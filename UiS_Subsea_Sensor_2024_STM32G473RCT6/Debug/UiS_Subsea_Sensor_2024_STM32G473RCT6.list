
UiS_Subsea_Sensor_2024_STM32G473RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d640  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800d820  0800d820  0001d820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd08  0800dd08  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd08  0800dd08  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd08  0800dd08  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd08  0800dd08  0001dd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd0c  0800dd0c  0001dd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800dd10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003480  200001f0  0800df00  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003670  0800df00  00023670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000230d6  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000535d  00000000  00000000  00043339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fb0  00000000  00000000  00048698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000182a  00000000  00000000  0004a648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a885  00000000  00000000  0004be72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027fbc  00000000  00000000  000766f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010757c  00000000  00000000  0009e6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000097a8  00000000  00000000  001a5c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001af3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d808 	.word	0x0800d808

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800d808 	.word	0x0800d808

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2lz>:
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	460d      	mov	r5, r1
 8000c56:	f7ff ff61 	bl	8000b1c <__aeabi_dcmplt>
 8000c5a:	b928      	cbnz	r0, 8000c68 <__aeabi_d2lz+0x1c>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4629      	mov	r1, r5
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b80a 	b.w	8000c7c <__aeabi_d2ulz>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6e:	f000 f805 	bl	8000c7c <__aeabi_d2ulz>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	bf00      	nop

08000c7c <__aeabi_d2ulz>:
 8000c7c:	b5d0      	push	{r4, r6, r7, lr}
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__aeabi_d2ulz+0x34>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcd7 	bl	8000638 <__aeabi_dmul>
 8000c8a:	f7ff ff6f 	bl	8000b6c <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc58 	bl	8000544 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <__aeabi_d2ulz+0x38>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcce 	bl	8000638 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff fb10 	bl	80002c8 <__aeabi_dsub>
 8000ca8:	f7ff ff60 	bl	8000b6c <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <EMA_Init>:
#include "EMA.h"

void EMA_Init(EMA *filt, float alpha) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	ed87 0a00 	vstr	s0, [r7]

	/* Setter filterkoeffisient */
	EMA_SetAlpha(filt, alpha);
 8000cc4:	ed97 0a00 	vldr	s0, [r7]
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f808 	bl	8000cde <EMA_SetAlpha>

	/* Clear filter output */
	filt->out = 0.0f;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <EMA_SetAlpha>:


void EMA_SetAlpha(EMA *filt, float alpha){
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	ed87 0a00 	vstr	s0, [r7]

	/* Alfa må være mellom 0 og 1 */
	if (alpha > 1.0f) {
 8000cea:	edd7 7a00 	vldr	s15, [r7]
 8000cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfa:	dd03      	ble.n	8000d04 <EMA_SetAlpha+0x26>
		alpha = 1.0f;
 8000cfc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	e009      	b.n	8000d18 <EMA_SetAlpha+0x3a>

	} else if (alpha < 0.0f){
 8000d04:	edd7 7a00 	vldr	s15, [r7]
 8000d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d10:	d502      	bpl.n	8000d18 <EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]

	}

	filt->alpha = alpha;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <EMA_Update>:


float EMA_Update(EMA *filt, float input) {
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	ed87 0a00 	vstr	s0, [r7]
    filt->out = filt->alpha * input + (1.0f - filt->alpha) * filt->out;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	ed93 7a00 	vldr	s14, [r3]
 8000d3c:	edd7 7a00 	vldr	s15, [r7]
 8000d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edd3 7a00 	vldr	s15, [r3]
 8000d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a01 	vstr	s15, [r3, #4]
    return filt->out;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	ee07 3a90 	vmov	s15, r3
}
 8000d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <ms5837_i2c_read>:
//    HAL_I2C_Master_Transmit(&hi2c3, dev_addr, &reg_addr, 1, HAL_MAX_DELAY);
//    HAL_I2C_Master_Receive(&hi2c3, dev_addr, data, len, HAL_MAX_DELAY);
//}

// Utfør I2C lesing ved bruk av wrapper funksjon
void ms5837_i2c_read(ms5837_t *sensor, uint8_t command, uint8_t *data, uint8_t num_bytes) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	461a      	mov	r2, r3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	72fb      	strb	r3, [r7, #11]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	72bb      	strb	r3, [r7, #10]
	uint8_t message[1];
	message[0] = command;
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(&hi2c3,(0x76<<1), message, 1,10); // Send kommando
 8000d94:	f107 0214 	add.w	r2, r7, #20
 8000d98:	230a      	movs	r3, #10
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	21ec      	movs	r1, #236	; 0xec
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <ms5837_i2c_read+0x44>)
 8000da2:	f006 fd1f 	bl	80077e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c3,(0x76<<1), data, num_bytes,10); // Motta data
 8000da6:	7abb      	ldrb	r3, [r7, #10]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	220a      	movs	r2, #10
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	21ec      	movs	r1, #236	; 0xec
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <ms5837_i2c_read+0x44>)
 8000db4:	f006 fe2e 	bl	8007a14 <HAL_I2C_Master_Receive>
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000424 	.word	0x20000424

08000dc4 <ms5837_i2c_write>:

//Utfør I2C skriving ved bruk av wrapper funksjon
void ms5837_i2c_write(ms5837_t *sensor, uint8_t command) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	uint8_t message[1];
	message[0] = command;
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c3,(0x76<<1), message, 1,10);
 8000dd4:	f107 020c 	add.w	r2, r7, #12
 8000dd8:	230a      	movs	r3, #10
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	21ec      	movs	r1, #236	; 0xec
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <ms5837_i2c_write+0x2c>)
 8000de2:	f006 fcff 	bl	80077e4 <HAL_I2C_Master_Transmit>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000424 	.word	0x20000424

08000df4 <ms5837_reset>:
// ---------------------------------------------------------------------

// Utfør reset av software på sensoren
void ms5837_reset( ms5837_t *sensor )
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    ms5837_i2c_write( sensor, CMD_RESET );
 8000dfc:	211e      	movs	r1, #30
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe0 	bl	8000dc4 <ms5837_i2c_write>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <ms5837_read_calibration_data>:

// Be om PROM data fra sensoren og lagre det i structuren
// returnerer True hvis fullført

bool ms5837_read_calibration_data( ms5837_t *sensor )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    if( !sensor )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <ms5837_read_calibration_data+0x12>
    {
        return false;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e053      	b.n	8000ec6 <ms5837_read_calibration_data+0xba>
    }

    // Les de 7 16-bit verdiene fra PROM
    for( uint8_t i = 0; i < NUM_CALIBRATION_VARIABLES; i++ )
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	e02b      	b.n	8000e7c <ms5837_read_calibration_data+0x70>
    {
        uint8_t buffer[2] = { 0 };
 8000e24:	2300      	movs	r3, #0
 8000e26:	813b      	strh	r3, [r7, #8]
        ms5837_i2c_read( sensor, CMD_READ_PROM_START+(i*2), &buffer[0], 2 );
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	3350      	adds	r3, #80	; 0x50
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	b2d9      	uxtb	r1, r3
 8000e32:	f107 0208 	add.w	r2, r7, #8
 8000e36:	2302      	movs	r3, #2
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff9f 	bl	8000d7c <ms5837_i2c_read>

        sensor->calibration_data[i] = (buffer[0] << 8);    // MSB
 8000e3e:	7a3b      	ldrb	r3, [r7, #8]
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	0212      	lsls	r2, r2, #8
 8000e46:	b291      	uxth	r1, r2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	460a      	mov	r2, r1
 8000e52:	809a      	strh	r2, [r3, #4]
        sensor->calibration_data[i] |= buffer[1];          // LSB
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	8899      	ldrh	r1, [r3, #4]
 8000e60:	7a7b      	ldrb	r3, [r7, #9]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	b291      	uxth	r1, r2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	460a      	mov	r2, r1
 8000e74:	809a      	strh	r2, [r3, #4]
    for( uint8_t i = 0; i < NUM_CALIBRATION_VARIABLES; i++ )
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d9d0      	bls.n	8000e24 <ms5837_read_calibration_data+0x18>
    }

    // Valider Cyclic redudancy check (CRC)
    uint8_t crc_rx = sensor->calibration_data[C0_VERSION] >> 12;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	899b      	ldrh	r3, [r3, #12]
 8000e86:	0b1b      	lsrs	r3, r3, #12
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	73bb      	strb	r3, [r7, #14]
    uint8_t crc_calc = crc4( &sensor->calibration_data[0] );
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	330c      	adds	r3, #12
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f859 	bl	8000f48 <crc4>
 8000e96:	4603      	mov	r3, r0
 8000e98:	737b      	strb	r3, [r7, #13]

    sensor->calibration_loaded = ( crc_rx == crc_calc );
 8000e9a:	7bba      	ldrb	r2, [r7, #14]
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	bf0c      	ite	eq
 8000ea2:	2301      	moveq	r3, #1
 8000ea4:	2300      	movne	r3, #0
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	729a      	strb	r2, [r3, #10]

    // Sjekk sensor versjon
    uint8_t version = (sensor->calibration_data[C0_VERSION] >> 5) & 0x7F;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	899b      	ldrh	r3, [r3, #12]
 8000eb0:	095b      	lsrs	r3, r3, #5
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eba:	733b      	strb	r3, [r7, #12]
    sensor->variant = version;  // TODO map to an enum here
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7b3a      	ldrb	r2, [r7, #12]
 8000ec0:	725a      	strb	r2, [r3, #9]

    return sensor->calibration_loaded;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7a9b      	ldrb	r3, [r3, #10]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <ms5837_start_conversion>:

// Begynner ADC convertering, returnerer antall mikrosekunder til data er klart
// hvis ugyldig eller feil vil den returnere 0

uint16_t ms5837_start_conversion( ms5837_t *sensor, MS5837_SELECT_SENSOR type, MS5837_ADC_OSR osr )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
 8000edc:	4613      	mov	r3, r2
 8000ede:	70bb      	strb	r3, [r7, #2]
    if( !sensor )
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <ms5837_start_conversion+0x1a>
    {
        return 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e028      	b.n	8000f3c <ms5837_start_conversion+0x6c>
    }

    switch( type )
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <ms5837_start_conversion+0x26>
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d00e      	beq.n	8000f12 <ms5837_start_conversion+0x42>
 8000ef4:	e01b      	b.n	8000f2e <ms5837_start_conversion+0x5e>
    {
        case SENSOR_PRESSURE:
            ms5837_i2c_write( sensor, CMD_PRESSURE_OSR_BASE + adc_osr_settings[osr].offset );
 8000ef6:	78bb      	ldrb	r3, [r7, #2]
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <ms5837_start_conversion+0x74>)
 8000efa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000efe:	3340      	adds	r3, #64	; 0x40
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff5d 	bl	8000dc4 <ms5837_i2c_write>
            sensor->last_conversion = SENSOR_PRESSURE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	769a      	strb	r2, [r3, #26]
        break;
 8000f10:	e00f      	b.n	8000f32 <ms5837_start_conversion+0x62>

        case SENSOR_TEMPERATURE:
            ms5837_i2c_write( sensor, CMD_TEMPERATURE_OSR_BASE + adc_osr_settings[osr].offset );
 8000f12:	78bb      	ldrb	r3, [r7, #2]
 8000f14:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <ms5837_start_conversion+0x74>)
 8000f16:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000f1a:	3350      	adds	r3, #80	; 0x50
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff4f 	bl	8000dc4 <ms5837_i2c_write>
            sensor->last_conversion = SENSOR_TEMPERATURE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	769a      	strb	r2, [r3, #26]
        break;
 8000f2c:	e001      	b.n	8000f32 <ms5837_start_conversion+0x62>

        default:
     //       sensor->last_conversion = NUM_SENSOR_FIELDS+1; // TODO consider an invalid enum value
            return 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e004      	b.n	8000f3c <ms5837_start_conversion+0x6c>
    }

    return adc_osr_settings[osr].duration_us;
 8000f32:	78bb      	ldrb	r3, [r7, #2]
 8000f34:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <ms5837_start_conversion+0x74>)
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	885b      	ldrh	r3, [r3, #2]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000

08000f48 <crc4>:

// ---------------------------------------------------------------------

// RROM is 7 unsigned int16 values for 112-bits
uint8_t crc4( uint16_t n_prom[7] )
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    uint16_t crc_rem = 0; // CRC remainder
 8000f50:	2300      	movs	r3, #0
 8000f52:	81fb      	strh	r3, [r7, #14]

    n_prom[0] = n_prom[0] & 0x0FFF; // CRC byte is replaced by 0
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	801a      	strh	r2, [r3, #0]
    n_prom[7] = 0;                  // Subsidiary value, set to 0
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	330e      	adds	r3, #14
 8000f66:	2200      	movs	r2, #0
 8000f68:	801a      	strh	r2, [r3, #0]

    for( uint8_t byte = 0; byte < 16; byte++ )
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	737b      	strb	r3, [r7, #13]
 8000f6e:	e03c      	b.n	8000fea <crc4+0xa2>
    {
        // choose LSB or MSB
        if( byte % 2 == 1 )
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00f      	beq.n	8000f9c <crc4+0x54>
        {
            crc_rem ^= (unsigned short)(n_prom[byte >> 1] & 0x00FF);
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	085b      	lsrs	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f94:	4053      	eors	r3, r2
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	81fb      	strh	r3, [r7, #14]
 8000f9a:	e00b      	b.n	8000fb4 <crc4+0x6c>
        }
        else
        {
            crc_rem ^= (unsigned short)(n_prom[byte >>1 ] >> 8);
 8000f9c:	7b7b      	ldrb	r3, [r7, #13]
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	4053      	eors	r3, r2
 8000fb2:	81fb      	strh	r3, [r7, #14]
        }

        for( uint8_t n_bit = 8; n_bit > 0; n_bit-- )
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	733b      	strb	r3, [r7, #12]
 8000fb8:	e011      	b.n	8000fde <crc4+0x96>
        {
            if( crc_rem & 0x8000 )
 8000fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da07      	bge.n	8000fd2 <crc4+0x8a>
            {
                crc_rem = (crc_rem << 1) ^ 0x3000;
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	81fb      	strh	r3, [r7, #14]
 8000fd0:	e002      	b.n	8000fd8 <crc4+0x90>
            }
            else
            {
                crc_rem = (crc_rem << 1);
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	81fb      	strh	r3, [r7, #14]
        for( uint8_t n_bit = 8; n_bit > 0; n_bit-- )
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	733b      	strb	r3, [r7, #12]
 8000fde:	7b3b      	ldrb	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1ea      	bne.n	8000fba <crc4+0x72>
    for( uint8_t byte = 0; byte < 16; byte++ )
 8000fe4:	7b7b      	ldrb	r3, [r7, #13]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	737b      	strb	r3, [r7, #13]
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d9bf      	bls.n	8000f70 <crc4+0x28>
            }
        }
    }

    crc_rem = ((crc_rem >> 12) & 0x000F); // final 4-bit remainder is CRC code
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	0b1b      	lsrs	r3, r3, #12
 8000ff4:	81fb      	strh	r3, [r7, #14]

    return (crc_rem ^ 0x00);
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	b2db      	uxtb	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	; 0x30
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2220      	movs	r2, #32
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f00a fd3a 	bl	800ba9a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001028:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800102c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800102e:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001030:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001034:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <MX_ADC1_Init+0xe8>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001048:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <MX_ADC1_Init+0xe8>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001050:	2204      	movs	r2, #4
 8001052:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001056:	2200      	movs	r2, #0
 8001058:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <MX_ADC1_Init+0xe8>)
 800105c:	2201      	movs	r2, #1
 800105e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001062:	2201      	movs	r2, #1
 8001064:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC1_Init+0xe8>)
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <MX_ADC1_Init+0xe8>)
 8001092:	f002 ff1d 	bl	8003ed0 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800109c:	f001 f864 	bl	8002168 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <MX_ADC1_Init+0xe8>)
 80010ac:	f004 fbec 	bl	8005888 <HAL_ADCEx_MultiModeConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010b6:	f001 f857 	bl	8002168 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_ADC1_Init+0xec>)
 80010bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010be:	2306      	movs	r3, #6
 80010c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c6:	237f      	movs	r3, #127	; 0x7f
 80010c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ca:	2304      	movs	r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_ADC1_Init+0xe8>)
 80010d8:	f003 fc6a 	bl	80049b0 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010e2:	f001 f841 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	; 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000020c 	.word	0x2000020c
 80010f4:	04300002 	.word	0x04300002

080010f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09e      	sub	sp, #120	; 0x78
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2254      	movs	r2, #84	; 0x54
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f00a fcbe 	bl	800ba9a <memset>
  if(adcHandle->Instance==ADC1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001126:	d167      	bne.n	80011f8 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800112c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800112e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001132:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4618      	mov	r0, r3
 800113a:	f007 fe63 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001144:	f001 f810 	bl	8002168 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_ADC_MspInit+0x108>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	4a2c      	ldr	r2, [pc, #176]	; (8001200 <HAL_ADC_MspInit+0x108>)
 800114e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_ADC_MspInit+0x108>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_ADC_MspInit+0x108>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	4a26      	ldr	r2, [pc, #152]	; (8001200 <HAL_ADC_MspInit+0x108>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_ADC_MspInit+0x108>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_Temp_1_Pin|ADC_Temp_2_Pin|ADC_Temp_3_Pin|ADC_Temp_4_Pin;
 8001178:	230f      	movs	r3, #15
 800117a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117c:	2303      	movs	r3, #3
 800117e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118e:	f006 f90b 	bl	80073a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 8001194:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_ADC_MspInit+0x110>)
 8001196:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 800119a:	2205      	movs	r2, #5
 800119c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011ce:	f004 fe97 	bl	8005f00 <HAL_DMA_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80011d8:	f000 ffc6 	bl	8002168 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_ADC_MspInit+0x10c>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2103      	movs	r1, #3
 80011ec:	2012      	movs	r0, #18
 80011ee:	f004 fd60 	bl	8005cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011f2:	2012      	movs	r0, #18
 80011f4:	f004 fd77 	bl	8005ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3778      	adds	r7, #120	; 0x78
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	20000278 	.word	0x20000278
 8001208:	40020008 	.word	0x40020008

0800120c <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_CORDIC_Init+0x20>)
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <MX_CORDIC_Init+0x24>)
 8001214:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_CORDIC_Init+0x20>)
 8001218:	f004 fc3e 	bl	8005a98 <HAL_CORDIC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001222:	f000 ffa1 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200002d8 	.word	0x200002d8
 8001230:	40020c00 	.word	0x40020c00

08001234 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_CORDIC_MspInit+0x38>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10b      	bne.n	800125e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_CORDIC_MspInit+0x3c>)
 8001248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_CORDIC_MspInit+0x3c>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6493      	str	r3, [r2, #72]	; 0x48
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <HAL_CORDIC_MspInit+0x3c>)
 8001254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000

08001274 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <MX_CRC_Init+0x3c>)
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <MX_CRC_Init+0x40>)
 800127c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_CRC_Init+0x3c>)
 8001280:	2200      	movs	r2, #0
 8001282:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_CRC_Init+0x3c>)
 8001286:	2200      	movs	r2, #0
 8001288:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_CRC_Init+0x3c>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_CRC_Init+0x3c>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_CRC_Init+0x3c>)
 8001298:	2201      	movs	r2, #1
 800129a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_CRC_Init+0x3c>)
 800129e:	f004 fd3d 	bl	8005d1c <HAL_CRC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012a8:	f000 ff5e 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000300 	.word	0x20000300
 80012b4:	40023000 	.word	0x40023000

080012b8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_CRC_MspInit+0x38>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10b      	bne.n	80012e2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_CRC_MspInit+0x3c>)
 80012cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_CRC_MspInit+0x3c>)
 80012d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d4:	6493      	str	r3, [r2, #72]	; 0x48
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_CRC_MspInit+0x3c>)
 80012d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023000 	.word	0x40023000
 80012f4:	40021000 	.word	0x40021000

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_DMA_Init+0x50>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001302:	4a11      	ldr	r2, [pc, #68]	; (8001348 <MX_DMA_Init+0x50>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6493      	str	r3, [r2, #72]	; 0x48
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_DMA_Init+0x50>)
 800130c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_DMA_Init+0x50>)
 8001318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <MX_DMA_Init+0x50>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6493      	str	r3, [r2, #72]	; 0x48
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_DMA_Init+0x50>)
 8001324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	200b      	movs	r0, #11
 8001334:	f004 fcbd 	bl	8005cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001338:	200b      	movs	r0, #11
 800133a:	f004 fcd4 	bl	8005ce6 <HAL_NVIC_EnableIRQ>

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <MX_FDCAN1_Init+0x8c>)
 8001354:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 800135e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001362:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 800136c:	2201      	movs	r2, #1
 800136e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 8001372:	2200      	movs	r2, #0
 8001374:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 8001378:	2200      	movs	r2, #0
 800137a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 800137e:	2201      	movs	r2, #1
 8001380:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 44;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 8001384:	222c      	movs	r2, #44	; 0x2c
 8001386:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 125;
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 800138a:	227d      	movs	r2, #125	; 0x7d
 800138c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 44;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 8001390:	222c      	movs	r2, #44	; 0x2c
 8001392:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 8001396:	2202      	movs	r2, #2
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 12;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 800139c:	220c      	movs	r2, #12
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 21;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 80013a2:	2215      	movs	r2, #21
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 12;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 80013a8:	220c      	movs	r2, #12
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_FDCAN1_Init+0x88>)
 80013c0:	f005 f86a 	bl	8006498 <HAL_FDCAN_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80013ca:	f000 fecd 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000388 	.word	0x20000388
 80013d8:	40006400 	.word	0x40006400

080013dc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b09e      	sub	sp, #120	; 0x78
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2254      	movs	r2, #84	; 0x54
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00a fb4c 	bl	800ba9a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <HAL_FDCAN_MspInit+0xcc>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d149      	bne.n	80014a0 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800140c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001410:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001416:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f007 fcf1 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001428:	f000 fe9e 	bl	8002168 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_FDCAN_MspInit+0xd0>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_FDCAN_MspInit+0xd0>)
 8001432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001436:	6593      	str	r3, [r2, #88]	; 0x58
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_FDCAN_MspInit+0xd0>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_FDCAN_MspInit+0xd0>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4a18      	ldr	r2, [pc, #96]	; (80014ac <HAL_FDCAN_MspInit+0xd0>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_FDCAN_MspInit+0xd0>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800145c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001460:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800146e:	2309      	movs	r3, #9
 8001470:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f005 ff94 	bl	80073a8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2015      	movs	r0, #21
 8001486:	f004 fc14 	bl	8005cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800148a:	2015      	movs	r0, #21
 800148c:	f004 fc2b 	bl	8005ce6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2016      	movs	r0, #22
 8001496:	f004 fc0c 	bl	8005cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800149a:	2016      	movs	r0, #22
 800149c:	f004 fc23 	bl	8005ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80014a0:	bf00      	nop
 80014a2:	3778      	adds	r7, #120	; 0x78
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40006400 	.word	0x40006400
 80014ac:	40021000 	.word	0x40021000

080014b0 <CANFD_Init>:
  }
}

/* USER CODE BEGIN 1 */
/* --------------------CANFD-------------------- */
void CANFD_Init(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af02      	add	r7, sp, #8

	/* ID reception filter: Rx FIFO 0 */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <CANFD_Init+0xd0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <CANFD_Init+0xd0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <CANFD_Init+0xd0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <CANFD_Init+0xd0>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	60da      	str	r2, [r3, #12]

	/*Id-er innenfor ID1 og ID2 slippes gjennom*/
	sFilterConfig.FilterID1 = Kommunikasjon_start;
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <CANFD_Init+0xd0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = Kommunikasjon_slutt;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <CANFD_Init+0xd0>)
 80014d6:	223f      	movs	r2, #63	; 0x3f
 80014d8:	615a      	str	r2, [r3, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 80014da:	4929      	ldr	r1, [pc, #164]	; (8001580 <CANFD_Init+0xd0>)
 80014dc:	4829      	ldr	r0, [pc, #164]	; (8001584 <CANFD_Init+0xd4>)
 80014de:	f005 f935 	bl	800674c <HAL_FDCAN_ConfigFilter>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <CANFD_Init+0x3c>
		Error_Handler();
 80014e8:	f000 fe3e 	bl	8002168 <Error_Handler>
	}

	/* ID reception filter: Rx FIFO 1 */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <CANFD_Init+0xd0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <CANFD_Init+0xd0>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <CANFD_Init+0xd0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <CANFD_Init+0xd0>)
 8001500:	2202      	movs	r2, #2
 8001502:	60da      	str	r2, [r3, #12]

	/*Id-er innenfor ID1 og ID2 slippes gjennom*/
	sFilterConfig.FilterID1 = test_start;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <CANFD_Init+0xd0>)
 8001506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = test_slutt;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <CANFD_Init+0xd0>)
 800150e:	f240 22ff 	movw	r2, #767	; 0x2ff
 8001512:	615a      	str	r2, [r3, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8001514:	491a      	ldr	r1, [pc, #104]	; (8001580 <CANFD_Init+0xd0>)
 8001516:	481b      	ldr	r0, [pc, #108]	; (8001584 <CANFD_Init+0xd4>)
 8001518:	f005 f918 	bl	800674c <HAL_FDCAN_ConfigFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <CANFD_Init+0x76>
		Error_Handler();
 8001522:	f000 fe21 	bl	8002168 <Error_Handler>
	}

	/*Configurerer det globale filteret*/
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK){
 8001526:	2300      	movs	r3, #0
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2300      	movs	r3, #0
 800152c:	2202      	movs	r2, #2
 800152e:	2102      	movs	r1, #2
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <CANFD_Init+0xd4>)
 8001532:	f005 f965 	bl	8006800 <HAL_FDCAN_ConfigGlobalFilter>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <CANFD_Init+0x90>
 		Error_Handler();
 800153c:	f000 fe14 	bl	8002168 <Error_Handler>
 	}

	/*Start CAN: Registere for initialisering av perifer og filter verdier låses*/
 	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 8001540:	4810      	ldr	r0, [pc, #64]	; (8001584 <CANFD_Init+0xd4>)
 8001542:	f005 f98e 	bl	8006862 <HAL_FDCAN_Start>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <CANFD_Init+0xa0>
 		Error_Handler();
 800154c:	f000 fe0c 	bl	8002168 <Error_Handler>
 	//if (HAL_FDCAN_Stop(&hfdcan1) != HAL_OK){
 	//	Error_Handler();
 	//}

	/*Interrupt handler aktivering for innkommende meldinger*/
 	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001550:	2200      	movs	r2, #0
 8001552:	2101      	movs	r1, #1
 8001554:	480b      	ldr	r0, [pc, #44]	; (8001584 <CANFD_Init+0xd4>)
 8001556:	f005 fb29 	bl	8006bac <HAL_FDCAN_ActivateNotification>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <CANFD_Init+0xb4>
 		Error_Handler();
 8001560:	f000 fe02 	bl	8002168 <Error_Handler>
 	}
 	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8001564:	2200      	movs	r2, #0
 8001566:	2108      	movs	r1, #8
 8001568:	4806      	ldr	r0, [pc, #24]	; (8001584 <CANFD_Init+0xd4>)
 800156a:	f005 fb1f 	bl	8006bac <HAL_FDCAN_ActivateNotification>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <CANFD_Init+0xc8>
 	   Error_Handler();
 8001574:	f000 fdf8 	bl	8002168 <Error_Handler>
 	}
	/* ____________________CANFD____________________ */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000324 	.word	0x20000324
 8001584:	20000388 	.word	0x20000388

08001588 <SendData>:
 *data: 	Liste av dataen som skal sendes i meldingen
 *size: 	Antall bytes "data" inneholder, uint8_t format
 *			Aksepterte verdier: 1-8, 12, 16, 20, 24, 32, 48, 64
 *datatype: Format "data" har
 *			Aksepterte verdier: uint8, uint16, float*/
int SendData(uint16_t adr, void* data, uint8_t size, DataType dataType) {
 8001588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800158c:	b095      	sub	sp, #84	; 0x54
 800158e:	af00      	add	r7, sp, #0
 8001590:	61b9      	str	r1, [r7, #24]
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	83fb      	strh	r3, [r7, #30]
 800159a:	460b      	mov	r3, r1
 800159c:	777b      	strb	r3, [r7, #29]
 800159e:	4613      	mov	r3, r2
 80015a0:	773b      	strb	r3, [r7, #28]
    if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) <= 0) {
 80015a2:	48cf      	ldr	r0, [pc, #828]	; (80018e0 <SendData+0x358>)
 80015a4:	f005 faf0 	bl	8006b88 <HAL_FDCAN_GetTxFifoFreeLevel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <SendData+0x2a>
        return 2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	e23f      	b.n	8001a32 <SendData+0x4aa>
    }
    /*CANFD melding Datalengde velges*/
	uint8_t data_L;
	switch(size){
 80015b2:	7f7b      	ldrb	r3, [r7, #29]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	2b3f      	cmp	r3, #63	; 0x3f
 80015b8:	f200 80c0 	bhi.w	800173c <SendData+0x1b4>
 80015bc:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <SendData+0x3c>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080016c5 	.word	0x080016c5
 80015c8:	080016cd 	.word	0x080016cd
 80015cc:	080016d5 	.word	0x080016d5
 80015d0:	080016dd 	.word	0x080016dd
 80015d4:	080016e5 	.word	0x080016e5
 80015d8:	080016ed 	.word	0x080016ed
 80015dc:	080016f5 	.word	0x080016f5
 80015e0:	080016fd 	.word	0x080016fd
 80015e4:	0800173d 	.word	0x0800173d
 80015e8:	0800173d 	.word	0x0800173d
 80015ec:	0800173d 	.word	0x0800173d
 80015f0:	08001705 	.word	0x08001705
 80015f4:	0800173d 	.word	0x0800173d
 80015f8:	0800173d 	.word	0x0800173d
 80015fc:	0800173d 	.word	0x0800173d
 8001600:	0800170d 	.word	0x0800170d
 8001604:	0800173d 	.word	0x0800173d
 8001608:	0800173d 	.word	0x0800173d
 800160c:	0800173d 	.word	0x0800173d
 8001610:	08001715 	.word	0x08001715
 8001614:	0800173d 	.word	0x0800173d
 8001618:	0800173d 	.word	0x0800173d
 800161c:	0800173d 	.word	0x0800173d
 8001620:	0800171d 	.word	0x0800171d
 8001624:	0800173d 	.word	0x0800173d
 8001628:	0800173d 	.word	0x0800173d
 800162c:	0800173d 	.word	0x0800173d
 8001630:	0800173d 	.word	0x0800173d
 8001634:	0800173d 	.word	0x0800173d
 8001638:	0800173d 	.word	0x0800173d
 800163c:	0800173d 	.word	0x0800173d
 8001640:	08001725 	.word	0x08001725
 8001644:	0800173d 	.word	0x0800173d
 8001648:	0800173d 	.word	0x0800173d
 800164c:	0800173d 	.word	0x0800173d
 8001650:	0800173d 	.word	0x0800173d
 8001654:	0800173d 	.word	0x0800173d
 8001658:	0800173d 	.word	0x0800173d
 800165c:	0800173d 	.word	0x0800173d
 8001660:	0800173d 	.word	0x0800173d
 8001664:	0800173d 	.word	0x0800173d
 8001668:	0800173d 	.word	0x0800173d
 800166c:	0800173d 	.word	0x0800173d
 8001670:	0800173d 	.word	0x0800173d
 8001674:	0800173d 	.word	0x0800173d
 8001678:	0800173d 	.word	0x0800173d
 800167c:	0800173d 	.word	0x0800173d
 8001680:	0800172d 	.word	0x0800172d
 8001684:	0800173d 	.word	0x0800173d
 8001688:	0800173d 	.word	0x0800173d
 800168c:	0800173d 	.word	0x0800173d
 8001690:	0800173d 	.word	0x0800173d
 8001694:	0800173d 	.word	0x0800173d
 8001698:	0800173d 	.word	0x0800173d
 800169c:	0800173d 	.word	0x0800173d
 80016a0:	0800173d 	.word	0x0800173d
 80016a4:	0800173d 	.word	0x0800173d
 80016a8:	0800173d 	.word	0x0800173d
 80016ac:	0800173d 	.word	0x0800173d
 80016b0:	0800173d 	.word	0x0800173d
 80016b4:	0800173d 	.word	0x0800173d
 80016b8:	0800173d 	.word	0x0800173d
 80016bc:	0800173d 	.word	0x0800173d
 80016c0:	08001735 	.word	0x08001735
	  case 1:
		  data_L = 0x01;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 80016ca:	e03c      	b.n	8001746 <SendData+0x1be>
	  case 2:
		  data_L = 0x02;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 80016d2:	e038      	b.n	8001746 <SendData+0x1be>
	  case 3:
		  data_L = 0x03;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 80016da:	e034      	b.n	8001746 <SendData+0x1be>
	  case 4:	// 4 bytes	-> 4 uint8, 2 uint16, 1 float
		  data_L = 0x04;
 80016dc:	2304      	movs	r3, #4
 80016de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 80016e2:	e030      	b.n	8001746 <SendData+0x1be>
	  case 5:
		  data_L = 0x05;
 80016e4:	2305      	movs	r3, #5
 80016e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 80016ea:	e02c      	b.n	8001746 <SendData+0x1be>
	  case 6:
		  data_L = 0x06;
 80016ec:	2306      	movs	r3, #6
 80016ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 80016f2:	e028      	b.n	8001746 <SendData+0x1be>
	  case 7:
		  data_L = 0x07;
 80016f4:	2307      	movs	r3, #7
 80016f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 80016fa:	e024      	b.n	8001746 <SendData+0x1be>
	  case 8:	// 8 bytes	-> 8 uint8, 4 uint16, 2 float
		  data_L = 0x08;
 80016fc:	2308      	movs	r3, #8
 80016fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001702:	e020      	b.n	8001746 <SendData+0x1be>
	  case 12:	// 12 bytes	-> 3 float
		  data_L = 0x09;
 8001704:	2309      	movs	r3, #9
 8001706:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 800170a:	e01c      	b.n	8001746 <SendData+0x1be>
	  case 16:	// 16 bytes	-> 4 float
		  data_L = 0x0A;
 800170c:	230a      	movs	r3, #10
 800170e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001712:	e018      	b.n	8001746 <SendData+0x1be>
	  case 20:	// 20 bytes	-> 5 float
		  data_L = 0x0B;
 8001714:	230b      	movs	r3, #11
 8001716:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 800171a:	e014      	b.n	8001746 <SendData+0x1be>
	  case 24:	// 24 bytes	-> 6 float
		  data_L = 0x0C;
 800171c:	230c      	movs	r3, #12
 800171e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001722:	e010      	b.n	8001746 <SendData+0x1be>
	  case 32:	// 32 bytes	-> 8 float
		  data_L = 0x0D;
 8001724:	230d      	movs	r3, #13
 8001726:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 800172a:	e00c      	b.n	8001746 <SendData+0x1be>
	  case 48:	// 48 bytes	-> 12 float
		  data_L = 0x0E;
 800172c:	230e      	movs	r3, #14
 800172e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001732:	e008      	b.n	8001746 <SendData+0x1be>
	  case 64:	// 64 bytes	-> 16 float
		  data_L = 0x0F;
 8001734:	230f      	movs	r3, #15
 8001736:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 800173a:	e004      	b.n	8001746 <SendData+0x1be>
	  default:	// 0 bytes	-> 0 float
		  data_L = 0x00;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  return 5;
 8001742:	2305      	movs	r3, #5
 8001744:	e175      	b.n	8001a32 <SendData+0x4aa>
	 * ErrorStateIndicator: Sender ut Error meldinger på bussen
	 * BitrRateSwitch: Aktivert
	 * melding format: FDCAN
	 * TxEvent: Aktiverer buffer for å hente sendt data
	 * MessageMarker: Markør for melding (satt til adresse)*/
	TxHeader.Identifier = adr;
 8001746:	8bfb      	ldrh	r3, [r7, #30]
 8001748:	4a66      	ldr	r2, [pc, #408]	; (80018e4 <SendData+0x35c>)
 800174a:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800174c:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <SendData+0x35c>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001752:	4b64      	ldr	r3, [pc, #400]	; (80018e4 <SendData+0x35c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = data_L; // FDCAN_DLC_BYTES_1
 8001758:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800175c:	4a61      	ldr	r2, [pc, #388]	; (80018e4 <SendData+0x35c>)
 800175e:	60d3      	str	r3, [r2, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001760:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <SendData+0x35c>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <SendData+0x35c>)
 8001768:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800176c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 800176e:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <SendData+0x35c>)
 8001770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001774:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8001776:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <SendData+0x35c>)
 8001778:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800177c:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = adr;
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <SendData+0x35c>)
 8001782:	6213      	str	r3, [r2, #32]
	 * Lengde på buffer lister settes
	 * 8 bytes -> uint8 liste med 8 plasser
	 * 8 bytes -> uint16 liste med 4 plasser
	 * 8 bytes -> float liste med 2 plasser*/
	uint8_t* dataInHex;
	uint8_t buffer8[size];
 8001784:	7f79      	ldrb	r1, [r7, #29]
 8001786:	466b      	mov	r3, sp
 8001788:	461e      	mov	r6, r3
 800178a:	460b      	mov	r3, r1
 800178c:	3b01      	subs	r3, #1
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001790:	b2cb      	uxtb	r3, r1
 8001792:	2200      	movs	r2, #0
 8001794:	461c      	mov	r4, r3
 8001796:	4615      	mov	r5, r2
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	00eb      	lsls	r3, r5, #3
 80017a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a6:	00e2      	lsls	r2, r4, #3
 80017a8:	b2cb      	uxtb	r3, r1
 80017aa:	2200      	movs	r2, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	617a      	str	r2, [r7, #20]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017bc:	4628      	mov	r0, r5
 80017be:	00c3      	lsls	r3, r0, #3
 80017c0:	4620      	mov	r0, r4
 80017c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017c6:	4620      	mov	r0, r4
 80017c8:	00c2      	lsls	r2, r0, #3
 80017ca:	460b      	mov	r3, r1
 80017cc:	3307      	adds	r3, #7
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	ebad 0d03 	sub.w	sp, sp, r3
 80017d6:	466b      	mov	r3, sp
 80017d8:	3300      	adds	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t buffer16[size/2];
 80017dc:	7f7b      	ldrb	r3, [r7, #29]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	1e4b      	subs	r3, r1, #1
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
 80017e8:	460a      	mov	r2, r1
 80017ea:	2300      	movs	r3, #0
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017fc:	4628      	mov	r0, r5
 80017fe:	0103      	lsls	r3, r0, #4
 8001800:	4620      	mov	r0, r4
 8001802:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001806:	4620      	mov	r0, r4
 8001808:	0102      	lsls	r2, r0, #4
 800180a:	460a      	mov	r2, r1
 800180c:	2300      	movs	r3, #0
 800180e:	603a      	str	r2, [r7, #0]
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800181e:	4628      	mov	r0, r5
 8001820:	0103      	lsls	r3, r0, #4
 8001822:	4620      	mov	r0, r4
 8001824:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001828:	4620      	mov	r0, r4
 800182a:	0102      	lsls	r2, r0, #4
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	3307      	adds	r3, #7
 8001832:	08db      	lsrs	r3, r3, #3
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	ebad 0d03 	sub.w	sp, sp, r3
 800183a:	466b      	mov	r3, sp
 800183c:	3301      	adds	r3, #1
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t bufferfloat[size/4];
 8001844:	7f7b      	ldrb	r3, [r7, #29]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4619      	mov	r1, r3
 800184c:	1e4b      	subs	r3, r1, #1
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001850:	460a      	mov	r2, r1
 8001852:	2300      	movs	r3, #0
 8001854:	4692      	mov	sl, r2
 8001856:	469b      	mov	fp, r3
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001864:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001868:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800186c:	460a      	mov	r2, r1
 800186e:	2300      	movs	r3, #0
 8001870:	4690      	mov	r8, r2
 8001872:	4699      	mov	r9, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001880:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001884:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001888:	460b      	mov	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	3307      	adds	r3, #7
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	ebad 0d03 	sub.w	sp, sp, r3
 8001896:	466b      	mov	r3, sp
 8001898:	3303      	adds	r3, #3
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	627b      	str	r3, [r7, #36]	; 0x24

	/*Velger riktig prossess etter hva dataType som formateres til hex*/
	switch (dataType){
 80018a0:	7f3b      	ldrb	r3, [r7, #28]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d065      	beq.n	8001972 <SendData+0x3ea>
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	f300 80af 	bgt.w	8001a0a <SendData+0x482>
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <SendData+0x32e>
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d029      	beq.n	8001908 <SendData+0x380>
 80018b4:	e0a9      	b.n	8001a0a <SendData+0x482>
		case uint8:
			/* uint8_t til Hex
			 * dataInHex: Lenge = antall bytes, lagrer dataen i big endian format*/
			memcpy(buffer8, data, size);
 80018b6:	7f7b      	ldrb	r3, [r7, #29]
 80018b8:	461a      	mov	r2, r3
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018be:	f00a f9ee 	bl	800bc9e <memcpy>
			dataInHex = malloc(size);
 80018c2:	7f7b      	ldrb	r3, [r7, #29]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f009 f90f 	bl	800aae8 <malloc>
 80018ca:	4603      	mov	r3, r0
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
		    if (!dataInHex) {
 80018ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <SendData+0x350>
		    	return 3;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0ab      	b.n	8001a30 <SendData+0x4a8>
		    }
			for (int i = 0; i < size; i++) {
 80018d8:	2300      	movs	r3, #0
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
 80018dc:	e00f      	b.n	80018fe <SendData+0x376>
 80018de:	bf00      	nop
 80018e0:	20000388 	.word	0x20000388
 80018e4:	2000033c 	.word	0x2000033c
			  dataInHex[i] = buffer8[i];
 80018e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018ec:	4413      	add	r3, r2
 80018ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018f2:	440a      	add	r2, r1
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++) {
 80018f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fa:	3301      	adds	r3, #1
 80018fc:	647b      	str	r3, [r7, #68]	; 0x44
 80018fe:	7f7b      	ldrb	r3, [r7, #29]
 8001900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf0      	blt.n	80018e8 <SendData+0x360>
			}
			break;
 8001906:	e082      	b.n	8001a0e <SendData+0x486>
		case uint16:
			// uint16_t til Hex
			memcpy(buffer16, data, size);
 8001908:	7f7b      	ldrb	r3, [r7, #29]
 800190a:	461a      	mov	r2, r3
 800190c:	69b9      	ldr	r1, [r7, #24]
 800190e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001910:	f00a f9c5 	bl	800bc9e <memcpy>

			dataInHex = malloc(size*2);
 8001914:	7f7b      	ldrb	r3, [r7, #29]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4618      	mov	r0, r3
 800191a:	f009 f8e5 	bl	800aae8 <malloc>
 800191e:	4603      	mov	r3, r0
 8001920:	64bb      	str	r3, [r7, #72]	; 0x48
		    if (!dataInHex) {
 8001922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <SendData+0x3a4>
		    	return 3;
 8001928:	2303      	movs	r3, #3
 800192a:	e081      	b.n	8001a30 <SendData+0x4a8>
		    }
			for (int i = 0; i < size; i++) {
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
 8001930:	e01a      	b.n	8001968 <SendData+0x3e0>
				dataInHex[i*2 + 0] = (buffer16[i] >> 8) & 0xFF;
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001936:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b29a      	uxth	r2, r3
 800193e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4619      	mov	r1, r3
 8001944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001946:	440b      	add	r3, r1
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
				dataInHex[i*2 + 1] =  buffer16[i] & 0xFF;
 800194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001950:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	3301      	adds	r3, #1
 800195a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800195c:	4413      	add	r3, r2
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++) {
 8001962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001964:	3301      	adds	r3, #1
 8001966:	643b      	str	r3, [r7, #64]	; 0x40
 8001968:	7f7b      	ldrb	r3, [r7, #29]
 800196a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800196c:	429a      	cmp	r2, r3
 800196e:	dbe0      	blt.n	8001932 <SendData+0x3aa>
			}
			break;
 8001970:	e04d      	b.n	8001a0e <SendData+0x486>
		case float32:
			/* float til Hex
			 * bufferfloat: binær reprensentasjon av float listen,
			 * dataInHex: Bruker big endian*/
			memcpy(bufferfloat, data, size);
 8001972:	7f7b      	ldrb	r3, [r7, #29]
 8001974:	461a      	mov	r2, r3
 8001976:	69b9      	ldr	r1, [r7, #24]
 8001978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800197a:	f00a f990 	bl	800bc9e <memcpy>
			dataInHex = malloc(size*4);
 800197e:	7f7b      	ldrb	r3, [r7, #29]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4618      	mov	r0, r3
 8001984:	f009 f8b0 	bl	800aae8 <malloc>
 8001988:	4603      	mov	r3, r0
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
		    if (!dataInHex) {
 800198c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <SendData+0x40e>
		    	return 3;
 8001992:	2303      	movs	r3, #3
 8001994:	e04c      	b.n	8001a30 <SendData+0x4a8>
		    }
			for (int i = 0; i < size; i++) {
 8001996:	2300      	movs	r3, #0
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800199a:	e031      	b.n	8001a00 <SendData+0x478>
			  dataInHex[i*4 + 0] = (bufferfloat[i] >> 24) & 0xFF;
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	0e1a      	lsrs	r2, r3, #24
 80019a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4619      	mov	r1, r3
 80019ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ae:	440b      	add	r3, r1
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]
			  dataInHex[i*4 + 1] = (bufferfloat[i] >> 16) & 0xFF;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	0c19      	lsrs	r1, r3, #16
 80019be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	3301      	adds	r3, #1
 80019c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019c6:	4413      	add	r3, r2
 80019c8:	b2ca      	uxtb	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
			  dataInHex[i*4 + 2] = (bufferfloat[i] >> 8) & 0xFF;
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d4:	0a19      	lsrs	r1, r3, #8
 80019d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019de:	4413      	add	r3, r2
 80019e0:	b2ca      	uxtb	r2, r1
 80019e2:	701a      	strb	r2, [r3, #0]
			  dataInHex[i*4 + 3] = bufferfloat[i] & 0xFF;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80019ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	3303      	adds	r3, #3
 80019f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019f4:	4413      	add	r3, r2
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++) {
 80019fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019fc:	3301      	adds	r3, #1
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a00:	7f7b      	ldrb	r3, [r7, #29]
 8001a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbc9      	blt.n	800199c <SendData+0x414>
			}
			break;
 8001a08:	e001      	b.n	8001a0e <SendData+0x486>
		default:
			return 4;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	e010      	b.n	8001a30 <SendData+0x4a8>
			break;
	}

	/*Legger til meldingen i Tx buffer, Returnerer 0 hvis error*/
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, dataInHex) != HAL_OK) {
 8001a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a10:	490a      	ldr	r1, [pc, #40]	; (8001a3c <SendData+0x4b4>)
 8001a12:	480b      	ldr	r0, [pc, #44]	; (8001a40 <SendData+0x4b8>)
 8001a14:	f004 ff4d 	bl	80068b2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <SendData+0x4a0>
         free(dataInHex);
 8001a1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a20:	f009 f86a 	bl	800aaf8 <free>
         return 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e003      	b.n	8001a30 <SendData+0x4a8>
     }
    /* Stopper Malloc-ed variabler fra å lekke minne og returnerer 1 (melding sendt)*/
	free(dataInHex);
 8001a28:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a2a:	f009 f865 	bl	800aaf8 <free>
	return 1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	46b5      	mov	sp, r6
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3754      	adds	r7, #84	; 0x54
 8001a36:	46bd      	mov	sp, r7
 8001a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a3c:	2000033c 	.word	0x2000033c
 8001a40:	20000388 	.word	0x20000388

08001a44 <hexToValues>:
 * voidData: 	verdilisten som dataen settes i etter konverteringen
 * hexData: 	Data som skal konverteres
 * sizeBytes: 	Lengde på meldingen i bytes, må samsvare med byte lengde til "voidData"
 * dataType: 	Velger datatypen "hexData" skal konverteres til, må samsvare med "voidData"
 * 				Aksepterte verdier: uint8, uint16, float*/
int hexToValues(void* voidData, const uint8_t* hexData, uint8_t sizeBytes, DataType dataType){
 8001a44:	b480      	push	{r7}
 8001a46:	b08f      	sub	sp, #60	; 0x3c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	460b      	mov	r3, r1
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	4613      	mov	r3, r2
 8001a58:	71bb      	strb	r3, [r7, #6]
	/*Velger metode etter oppgitt dataType*/
	switch(dataType) {
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d059      	beq.n	8001b14 <hexToValues+0xd0>
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	f300 809e 	bgt.w	8001ba2 <hexToValues+0x15e>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <hexToValues+0x2c>
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d01b      	beq.n	8001aa6 <hexToValues+0x62>
 8001a6e:	e098      	b.n	8001ba2 <hexToValues+0x15e>
		case uint8:
			/* uint8Data som peker på listen i "voidData" som får de konverterte verdiene
			 * Big endian brukes*/
			uint8_t* uint8Data = (uint8_t*)voidData;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	623b      	str	r3, [r7, #32]
		    for (uint8_t i = 0; i < sizeBytes; i++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a7a:	e00e      	b.n	8001a9a <hexToValues+0x56>
		    	uint8Data[i] = hexData[i];
 8001a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	441a      	add	r2, r3
 8001a84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a88:	6a39      	ldr	r1, [r7, #32]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	701a      	strb	r2, [r3, #0]
		    for (uint8_t i = 0; i < sizeBytes; i++) {
 8001a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a94:	3301      	adds	r3, #1
 8001a96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a9a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d3eb      	bcc.n	8001a7c <hexToValues+0x38>
		    }
			break;
 8001aa4:	e07f      	b.n	8001ba6 <hexToValues+0x162>
		case uint16:
			/* Kjekker om byte størrelsen går opp: 7%2=1 -> returnerer 2
			 * uint16Data som peker på listen i "voidData" som får de konverterte verdiene
			 * Big endian brukes*/
			if (sizeBytes % 2 != 0) return 2;
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <hexToValues+0x72>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e078      	b.n	8001ba8 <hexToValues+0x164>
			uint16_t* uint16Data = (uint16_t*)voidData;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
		    uint8_t uint16Nr = sizeBytes / 2;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		    for (uint8_t i = 0; i < uint16Nr; i++) {
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ac8:	e01d      	b.n	8001b06 <hexToValues+0xc2>
		    	uint8_t bytes[2];
		    	bytes[0] = hexData[i * 2 + 1];
 8001aca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	773b      	strb	r3, [r7, #28]
		    	bytes[1] = hexData[i * 2 + 0];
 8001ada:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	777b      	strb	r3, [r7, #29]
 8001aea:	8bbb      	ldrh	r3, [r7, #28]

		    	uint16_t uint16Value;
		    	memcpy(&uint16Value, bytes, 2);
 8001aec:	837b      	strh	r3, [r7, #26]
		    	uint16Data[i] = uint16Value;
 8001aee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af6:	4413      	add	r3, r2
 8001af8:	8b7a      	ldrh	r2, [r7, #26]
 8001afa:	801a      	strh	r2, [r3, #0]
		    for (uint8_t i = 0; i < uint16Nr; i++) {
 8001afc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b00:	3301      	adds	r3, #1
 8001b02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001b06:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3db      	bcc.n	8001aca <hexToValues+0x86>
		    }
			break;
 8001b12:	e048      	b.n	8001ba6 <hexToValues+0x162>
		case float32:
			/* Byte størrelsen sjekk: 6%4=2 -> returnerer 3
			 * floatData som peker på listen i "voidData" som får de konverterte verdiene
			 * Big endian brukes */
			if (sizeBytes % 4 != 0) return 3;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <hexToValues+0xe0>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e041      	b.n	8001ba8 <hexToValues+0x164>
			float* floatData = (float*)voidData;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
		    uint8_t floatNr = sizeBytes / 4;
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		    for (uint8_t i = 0; i < floatNr; i++) {
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001b36:	e02d      	b.n	8001b94 <hexToValues+0x150>
		        uint8_t bytes[4];
		        bytes[0] = hexData[i * 4 + 3];
 8001b38:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	3303      	adds	r3, #3
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	753b      	strb	r3, [r7, #20]
		        bytes[1] = hexData[i * 4 + 2];
 8001b48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	757b      	strb	r3, [r7, #21]
		        bytes[2] = hexData[i * 4 + 1];
 8001b58:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	3301      	adds	r3, #1
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	75bb      	strb	r3, [r7, #22]
		        bytes[3] = hexData[i * 4];
 8001b68:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4413      	add	r3, r2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	75fb      	strb	r3, [r7, #23]
 8001b78:	697b      	ldr	r3, [r7, #20]
		        float floatValue;
		        memcpy(&floatValue, bytes, 4);
 8001b7a:	613b      	str	r3, [r7, #16]
		        floatData[i] = floatValue;
 8001b7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b84:	4413      	add	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	601a      	str	r2, [r3, #0]
		    for (uint8_t i = 0; i < floatNr; i++) {
 8001b8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001b94:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3cb      	bcc.n	8001b38 <hexToValues+0xf4>
		    }
			break;
 8001ba0:	e001      	b.n	8001ba6 <hexToValues+0x162>
		default:
			return 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <hexToValues+0x164>
			break;
	}
	/*Ved fullført konvertering returner 1*/
	return 1;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	373c      	adds	r7, #60	; 0x3c
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_FMAC_Init+0x20>)
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <MX_FMAC_Init+0x24>)
 8001bbc:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_FMAC_Init+0x20>)
 8001bc0:	f005 fb46 	bl	8007250 <HAL_FMAC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8001bca:	f000 facd 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200003ec 	.word	0x200003ec
 8001bd8:	40021400 	.word	0x40021400

08001bdc <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_FMAC_MspInit+0x38>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10b      	bne.n	8001c06 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_FMAC_MspInit+0x3c>)
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_FMAC_MspInit+0x3c>)
 8001bf4:	f043 0310 	orr.w	r3, r3, #16
 8001bf8:	6493      	str	r3, [r2, #72]	; 0x48
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_FMAC_MspInit+0x3c>)
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021400 	.word	0x40021400
 8001c18:	40021000 	.word	0x40021000

08001c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_GPIO_Init+0x98>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Lekasje_probe_1_Pin|Lekasje_probe_2_Pin|Lekasje_b_nd_Pin|Lekasje_probe_3_Pin
 8001c92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c96:	617b      	str	r3, [r7, #20]
                          |Test_Knapp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <MX_GPIO_Init+0x9c>)
 8001ca8:	f005 fb7e 	bl	80073a8 <HAL_GPIO_Init>

}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000400 	.word	0x48000400

08001cbc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <MX_I2C3_Init+0x78>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <MX_I2C3_Init+0x7c>)
 8001cca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001cf8:	f005 fcd8 	bl	80076ac <HAL_I2C_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001d02:	f000 fa31 	bl	8002168 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d06:	2100      	movs	r1, #0
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001d0a:	f006 fa39 	bl	8008180 <HAL_I2CEx_ConfigAnalogFilter>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001d14:	f000 fa28 	bl	8002168 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_I2C3_Init+0x74>)
 8001d1c:	f006 fa7b 	bl	8008216 <HAL_I2CEx_ConfigDigitalFilter>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001d26:	f000 fa1f 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000424 	.word	0x20000424
 8001d34:	40007800 	.word	0x40007800
 8001d38:	30a0a7fb 	.word	0x30a0a7fb

08001d3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b09e      	sub	sp, #120	; 0x78
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2254      	movs	r2, #84	; 0x54
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f009 fe9c 	bl	800ba9a <memset>
  if(i2cHandle->Instance==I2C3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_I2C_MspInit+0xb8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d13f      	bne.n	8001dec <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d70:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f007 f842 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d86:	f000 f9ef 	bl	8002168 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_I2C_MspInit+0xbc>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_I2C_MspInit+0xbc>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_I2C_MspInit+0xbc>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001da6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da8:	2312      	movs	r3, #18
 8001daa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001db4:	2308      	movs	r3, #8
 8001db6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480f      	ldr	r0, [pc, #60]	; (8001dfc <HAL_I2C_MspInit+0xc0>)
 8001dc0:	f005 faf2 	bl	80073a8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_I2C_MspInit+0xbc>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <HAL_I2C_MspInit+0xbc>)
 8001dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dce:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_I2C_MspInit+0xbc>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 3, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2103      	movs	r1, #3
 8001de0:	205c      	movs	r0, #92	; 0x5c
 8001de2:	f003 ff66 	bl	8005cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001de6:	205c      	movs	r0, #92	; 0x5c
 8001de8:	f003 ff7d 	bl	8005ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001dec:	bf00      	nop
 8001dee:	3778      	adds	r7, #120	; 0x78
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40007800 	.word	0x40007800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	48000800 	.word	0x48000800

08001e00 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	e853 3f00 	ldrex	r3, [r3]
 8001e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f043 0320 	orr.w	r3, r3, #32
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	61ba      	str	r2, [r7, #24]
 8001e22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e24:	6979      	ldr	r1, [r7, #20]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	e841 2300 	strex	r3, r2, [r1]
 8001e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1e9      	bne.n	8001e08 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b089      	sub	sp, #36	; 0x24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	e853 3f00 	ldrex	r3, [r3]
 8001e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3308      	adds	r3, #8
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	61ba      	str	r2, [r7, #24]
 8001e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6a:	6979      	ldr	r1, [r7, #20]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	e841 2300 	strex	r3, r2, [r1]
 8001e72:	613b      	str	r3, [r7, #16]
   return(result);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e7      	bne.n	8001e4a <LL_USART_EnableIT_ERROR+0x8>
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3724      	adds	r7, #36	; 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//-------------------Temp---------------
	float alpha = 0.5f; // Definer alfa-verdi for EMA-filter
 8001e90:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001e94:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8001e98:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e9a:	f001 fcf8 	bl	800388e <HAL_Init>

  /* USER CODE BEGIN Init */
  EMA_Init(&ema_filter, alpha);
 8001e9e:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8001ea2:	ed93 0a00 	vldr	s0, [r3]
 8001ea6:	482a      	ldr	r0, [pc, #168]	; (8001f50 <main+0xc8>)
 8001ea8:	f7fe ff06 	bl	8000cb8 <EMA_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eac:	f000 f85c 	bl	8001f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb0:	f7ff feb4 	bl	8001c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001eb4:	f7ff fa20 	bl	80012f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001eb8:	f7ff f8a6 	bl	8001008 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001ebc:	f7ff fa46 	bl	800134c <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8001ec0:	f7ff fefc 	bl	8001cbc <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001ec4:	f001 f81e 	bl	8002f04 <MX_USART1_UART_Init>
  MX_CORDIC_Init();
 8001ec8:	f7ff f9a0 	bl	800120c <MX_CORDIC_Init>
  MX_CRC_Init();
 8001ecc:	f7ff f9d2 	bl	8001274 <MX_CRC_Init>
  MX_FMAC_Init();
 8001ed0:	f7ff fe70 	bl	8001bb4 <MX_FMAC_Init>
  MX_TIM2_Init();
 8001ed4:	f000 fd66 	bl	80029a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ed8:	f000 fdce 	bl	8002a78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //-----------CANFD Oppstart--------------
  CANFD_Init();
 8001edc:	f7ff fae8 	bl	80014b0 <CANFD_Init>

  //-----------UART Oppstart---------------
  LL_USART_EnableIT_RXNE(USART1);
 8001ee0:	481c      	ldr	r0, [pc, #112]	; (8001f54 <main+0xcc>)
 8001ee2:	f7ff ff8d 	bl	8001e00 <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_ERROR(USART1);
 8001ee6:	481b      	ldr	r0, [pc, #108]	; (8001f54 <main+0xcc>)
 8001ee8:	f7ff ffab 	bl	8001e42 <LL_USART_EnableIT_ERROR>
  //------------Temp oppstart---------------------------

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001eec:	217f      	movs	r1, #127	; 0x7f
 8001eee:	481a      	ldr	r0, [pc, #104]	; (8001f58 <main+0xd0>)
 8001ef0:	f003 fc36 	bl	8005760 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) tempBuf, numChannels);
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4919      	ldr	r1, [pc, #100]	; (8001f5c <main+0xd4>)
 8001ef8:	4817      	ldr	r0, [pc, #92]	; (8001f58 <main+0xd0>)
 8001efa:	f002 f9a5 	bl	8004248 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8001efe:	4818      	ldr	r0, [pc, #96]	; (8001f60 <main+0xd8>)
 8001f00:	f007 fa26 	bl	8009350 <HAL_TIM_Base_Start>
  //-----------pressuresensor/I2C Oppstart----

 // Velger samplingsrate (se enum i MS5837-30BA.c)
  ms5837_t pressuresensor; // Initialiserer en pressuresensor struct
  pressuresensor.i2c_address = 0x76; // Setter adressen til riktig adresse
 8001f04:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8001f08:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8001f0c:	2276      	movs	r2, #118	; 0x76
 8001f0e:	721a      	strb	r2, [r3, #8]
  //Nullstill sensor
  ms5837_reset(&pressuresensor); // Nullstiller pressuresensoren
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe ff6e 	bl	8000df4 <ms5837_reset>
  HAL_Delay(30);
 8001f18:	201e      	movs	r0, #30
 8001f1a:	f001 fd29 	bl	8003970 <HAL_Delay>
  ms5837_read_calibration_data(&pressuresensor); // Henter ut kalibreringsverdier
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe ff73 	bl	8000e0c <ms5837_read_calibration_data>
  ms5837_start_conversion(&pressuresensor, SENSOR_PRESSURE, OSR_4096);
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2204      	movs	r2, #4
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe ffcf 	bl	8000ed0 <ms5837_start_conversion>
    /* USER CODE BEGIN 3 */

	  //------------TRYKK---------------

	  //-----------TEMP-----------------
	  while (convCompleted !=1){
 8001f32:	bf00      	nop
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <main+0xdc>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d1fb      	bne.n	8001f34 <main+0xac>

	  	  }

	  	  convCompleted = 0;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <main+0xdc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]

	  	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)tempBuf, numChannels);
 8001f42:	2204      	movs	r2, #4
 8001f44:	4905      	ldr	r1, [pc, #20]	; (8001f5c <main+0xd4>)
 8001f46:	4804      	ldr	r0, [pc, #16]	; (8001f58 <main+0xd0>)
 8001f48:	f002 f97e 	bl	8004248 <HAL_ADC_Start_DMA>
	  while (convCompleted !=1){
 8001f4c:	e7f1      	b.n	8001f32 <main+0xaa>
 8001f4e:	bf00      	nop
 8001f50:	2000047c 	.word	0x2000047c
 8001f54:	40013800 	.word	0x40013800
 8001f58:	2000020c 	.word	0x2000020c
 8001f5c:	20000488 	.word	0x20000488
 8001f60:	200034cc 	.word	0x200034cc
 8001f64:	20000484 	.word	0x20000484

08001f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b094      	sub	sp, #80	; 0x50
 8001f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6e:	f107 0318 	add.w	r3, r7, #24
 8001f72:	2238      	movs	r2, #56	; 0x38
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f009 fd8f 	bl	800ba9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f006 f990 	bl	80082b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f98:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001fa6:	2355      	movs	r3, #85	; 0x55
 8001fa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb6:	f107 0318 	add.w	r3, r7, #24
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f006 fa2c 	bl	8008418 <HAL_RCC_OscConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001fc6:	f000 f8cf 	bl	8002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fca:	230f      	movs	r3, #15
 8001fcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f006 fd2a 	bl	8008a3c <HAL_RCC_ClockConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001fee:	f000 f8bb 	bl	8002168 <Error_Handler>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3750      	adds	r7, #80	; 0x50
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

	convCompleted =1;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_ADC_ConvCpltCallback+0x80>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 800200a:	481d      	ldr	r0, [pc, #116]	; (8002080 <HAL_ADC_ConvCpltCallback+0x84>)
 800200c:	f002 f9f0 	bl	80043f0 <HAL_ADC_Stop_DMA>


	  for (int i = 0; i < numChannels; i++) {
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e029      	b.n	800206a <HAL_ADC_ConvCpltCallback+0x6e>
		  // Konverter ADC-verdier til mv
	    float input_value = __HAL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE_, tempBuf[i], ADC_RESOLUTION12b);
 8002016:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_ADC_ConvCpltCallback+0x88>)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800201e:	461a      	mov	r2, r3
 8002020:	f640 43e4 	movw	r3, #3300	; 0xce4
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	461a      	mov	r2, r3
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_ADC_ConvCpltCallback+0x8c>)
 800202c:	fba3 1302 	umull	r1, r3, r3, r2
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	0852      	lsrs	r2, r2, #1
 8002034:	4413      	add	r3, r2
 8002036:	0adb      	lsrs	r3, r3, #11
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002040:	edc7 7a02 	vstr	s15, [r7, #8]
	    filtrertTemp[i] = EMA_Update(&ema_filter, input_value);
 8002044:	ed97 0a02 	vldr	s0, [r7, #8]
 8002048:	4810      	ldr	r0, [pc, #64]	; (800208c <HAL_ADC_ConvCpltCallback+0x90>)
 800204a:	f7fe fe6e 	bl	8000d2a <EMA_Update>
 800204e:	eef0 7a40 	vmov.f32	s15, s0
 8002052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002056:	ee17 3a90 	vmov	r3, s15
 800205a:	b299      	uxth	r1, r3
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_ADC_ConvCpltCallback+0x94>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (int i = 0; i < numChannels; i++) {
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3301      	adds	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b03      	cmp	r3, #3
 800206e:	ddd2      	ble.n	8002016 <HAL_ADC_ConvCpltCallback+0x1a>
	    	// sensor i eksempel da den gir ut 0.5V ved 0 grader C, og den gir ut 10 mv/C
	   // float celsius = (filtrertTemp[i] - offset) *100;  // annet tall enn 100?

	  }

}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000484 	.word	0x20000484
 8002080:	2000020c 	.word	0x2000020c
 8002084:	20000488 	.word	0x20000488
 8002088:	00100101 	.word	0x00100101
 800208c:	2000047c 	.word	0x2000047c
 8002090:	20000490 	.word	0x20000490

08002094 <Lekk>:

/*Sjekker først om en av pinnene har logisk høy verdi */
void Lekk(void){
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
	if((GPIOB->IDR & LL_GPIO_PIN_11) || (GPIOB->IDR & LL_GPIO_PIN_12) || (GPIOB->IDR & LL_GPIO_PIN_13) || (GPIOB->IDR & LL_GPIO_PIN_14)  	|| (GPIOB->IDR & LL_GPIO_PIN_15)) {
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <Lekk+0xc8>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d117      	bne.n	80020d4 <Lekk+0x40>
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <Lekk+0xc8>)
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d111      	bne.n	80020d4 <Lekk+0x40>
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <Lekk+0xc8>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10b      	bne.n	80020d4 <Lekk+0x40>
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <Lekk+0xc8>)
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <Lekk+0x40>
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <Lekk+0xc8>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d033      	beq.n	800213c <Lekk+0xa8>

						/*Dersom en av pinnene er høy lages en maske som forteller hvor lekkasjen er. */
		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_11){
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <Lekk+0xc8>)
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <Lekk+0x5a>
		  		  		  lekkasje |= 0x1;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <Lekk+0xcc>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <Lekk+0xcc>)
 80020ec:	701a      	strb	r2, [r3, #0]
		  		  	  }
		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_12){
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <Lekk+0xc8>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <Lekk+0x74>
		  		  		  lekkasje |= 0x2;
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <Lekk+0xcc>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <Lekk+0xcc>)
 8002106:	701a      	strb	r2, [r3, #0]
		  		  	  }
		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_13){
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <Lekk+0xc8>)
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <Lekk+0x8e>
		  		  		  lekkasje |= 0x4;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <Lekk+0xcc>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <Lekk+0xcc>)
 8002120:	701a      	strb	r2, [r3, #0]
		  		  	  }
		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_14){
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <Lekk+0xc8>)
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <Lekk+0xa8>
		  		  		  lekkasje |= 0x8;
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <Lekk+0xcc>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <Lekk+0xcc>)
 800213a:	701a      	strb	r2, [r3, #0]
		  		  	  //knapp kun for testing
//		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_15){
//		  		  		  lekkasje |= 0x10;
//		  		  	  }
	}
	  if (lekkasje > 0){
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <Lekk+0xcc>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <Lekk+0xbe>
		  send_msg |= 0x4;
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <Lekk+0xd0>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <Lekk+0xd0>)
 8002150:	701a      	strb	r2, [r3, #0]
	  }
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	48000400 	.word	0x48000400
 8002160:	20000478 	.word	0x20000478
 8002164:	20001618 	.word	0x20001618

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	e7fe      	b.n	8002170 <Error_Handler+0x8>
	...

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_MspInit+0x44>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_MspInit+0x44>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6613      	str	r3, [r2, #96]	; 0x60
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_MspInit+0x44>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_MspInit+0x44>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <HAL_MspInit+0x44>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_MspInit+0x44>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021aa:	f006 f925 	bl	80083f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000

080021bc <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d101      	bne.n	80021d4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	b2db      	uxtb	r3, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0a0      	sub	sp, #128	; 0x80
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224a:	f001 fb73 	bl	8003934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  static uint8_t ms1_ticker, ms10_ticker, ms100_ticker = 0;

  //Skjer hvert 10ms
  if(ms1_ticker++>9){//if_ms			/* Teller til opp til 5 slik at det går 5ms for hver gang Lekk() kjører */
 800224e:	4b92      	ldr	r3, [pc, #584]	; (8002498 <SysTick_Handler+0x254>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	b2d1      	uxtb	r1, r2
 8002256:	4a90      	ldr	r2, [pc, #576]	; (8002498 <SysTick_Handler+0x254>)
 8002258:	7011      	strb	r1, [r2, #0]
 800225a:	2b09      	cmp	r3, #9
 800225c:	f240 819a 	bls.w	8002594 <SysTick_Handler+0x350>
	  ms1_ticker = 0;
 8002260:	4b8d      	ldr	r3, [pc, #564]	; (8002498 <SysTick_Handler+0x254>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
	  Lekk();
 8002266:	f7ff ff15 	bl	8002094 <Lekk>

	  if(send_dvl){//if_dvl
 800226a:	4b8c      	ldr	r3, [pc, #560]	; (800249c <SysTick_Handler+0x258>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8163 	beq.w	800253a <SysTick_Handler+0x2f6>
			  UART1_update(dvl_cmd);
 8002274:	4b8a      	ldr	r3, [pc, #552]	; (80024a0 <SysTick_Handler+0x25c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f001 f9d5 	bl	8003628 <UART1_update>
			  send_dvl=0;
 800227e:	4b87      	ldr	r3, [pc, #540]	; (800249c <SysTick_Handler+0x258>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]

			  Process_msg();
 8002284:	f000 ff2e 	bl	80030e4 <Process_msg>
			  while (send_msg > 0){//_while
 8002288:	e152      	b.n	8002530 <SysTick_Handler+0x2ec>
//			  	  	Hastighet
			  	  	if (send_msg & 0x01){//_if
 800228a:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <SysTick_Handler+0x260>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d05c      	beq.n	8002350 <SysTick_Handler+0x10c>
			  	  			  float Vx = atof(wrz.vx);
 8002296:	4884      	ldr	r0, [pc, #528]	; (80024a8 <SysTick_Handler+0x264>)
 8002298:	f008 fc22 	bl	800aae0 <atof>
 800229c:	ec53 2b10 	vmov	r2, r3, d0
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc82 	bl	8000bac <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	65fb      	str	r3, [r7, #92]	; 0x5c
			  	  			  float Vy = atof(wrz.vy);
 80022ac:	487f      	ldr	r0, [pc, #508]	; (80024ac <SysTick_Handler+0x268>)
 80022ae:	f008 fc17 	bl	800aae0 <atof>
 80022b2:	ec53 2b10 	vmov	r2, r3, d0
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc77 	bl	8000bac <__aeabi_d2f>
 80022be:	4603      	mov	r3, r0
 80022c0:	65bb      	str	r3, [r7, #88]	; 0x58
			  	  			  float Vz = atof(wrz.vz);
 80022c2:	487b      	ldr	r0, [pc, #492]	; (80024b0 <SysTick_Handler+0x26c>)
 80022c4:	f008 fc0c 	bl	800aae0 <atof>
 80022c8:	ec53 2b10 	vmov	r2, r3, d0
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	f7fe fc6c 	bl	8000bac <__aeabi_d2f>
 80022d4:	4603      	mov	r3, r0
 80022d6:	657b      	str	r3, [r7, #84]	; 0x54
			  	  			  float altitude = atof(wrz.altitude);
 80022d8:	4876      	ldr	r0, [pc, #472]	; (80024b4 <SysTick_Handler+0x270>)
 80022da:	f008 fc01 	bl	800aae0 <atof>
 80022de:	ec53 2b10 	vmov	r2, r3, d0
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fc61 	bl	8000bac <__aeabi_d2f>
 80022ea:	4603      	mov	r3, r0
 80022ec:	653b      	str	r3, [r7, #80]	; 0x50
			  	  			  float V_fom = atof(wrz.merit_figure);
 80022ee:	4872      	ldr	r0, [pc, #456]	; (80024b8 <SysTick_Handler+0x274>)
 80022f0:	f008 fbf6 	bl	800aae0 <atof>
 80022f4:	ec53 2b10 	vmov	r2, r3, d0
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7fe fc56 	bl	8000bac <__aeabi_d2f>
 8002300:	4603      	mov	r3, r0
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
			  	  			  float Tid_siste = atof(wrz.time_since_last_rep);
 8002304:	486d      	ldr	r0, [pc, #436]	; (80024bc <SysTick_Handler+0x278>)
 8002306:	f008 fbeb 	bl	800aae0 <atof>
 800230a:	ec53 2b10 	vmov	r2, r3, d0
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fc4b 	bl	8000bac <__aeabi_d2f>
 8002316:	4603      	mov	r3, r0
 8002318:	64bb      	str	r3, [r7, #72]	; 0x48
			  	  			  float poisition_msg[] = {Vx,Vy,Vz,altitude,V_fom, Tid_siste};
 800231a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
 800231e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
 8002322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
 8002326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232c:	643b      	str	r3, [r7, #64]	; 0x40
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	647b      	str	r3, [r7, #68]	; 0x44

			  	  			  SendData((Sensor_start + 0x01), poisition_msg, sizeof(poisition_msg), float32);
 8002332:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002336:	2302      	movs	r3, #2
 8002338:	2218      	movs	r2, #24
 800233a:	2081      	movs	r0, #129	; 0x81
 800233c:	f7ff f924 	bl	8001588 <SendData>
			  	  			  send_msg &= 0xFE; //Nullstill respektiv bit i maske
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <SysTick_Handler+0x260>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b56      	ldr	r3, [pc, #344]	; (80024a4 <SysTick_Handler+0x260>)
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e0ef      	b.n	8002530 <SysTick_Handler+0x2ec>

			  	  	}//_if
			  	  		  //Posisjon
			  	  	else if (send_msg & 0x04){//_if_else
 8002350:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <SysTick_Handler+0x260>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d075      	beq.n	8002448 <SysTick_Handler+0x204>
			  	  			  float time_stamp = atof(wrp.time_stamp);
 800235c:	4858      	ldr	r0, [pc, #352]	; (80024c0 <SysTick_Handler+0x27c>)
 800235e:	f008 fbbf 	bl	800aae0 <atof>
 8002362:	ec53 2b10 	vmov	r2, r3, d0
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fc1f 	bl	8000bac <__aeabi_d2f>
 800236e:	4603      	mov	r3, r0
 8002370:	67fb      	str	r3, [r7, #124]	; 0x7c
			  	  			  float Px = atof(wrp.px);
 8002372:	4854      	ldr	r0, [pc, #336]	; (80024c4 <SysTick_Handler+0x280>)
 8002374:	f008 fbb4 	bl	800aae0 <atof>
 8002378:	ec53 2b10 	vmov	r2, r3, d0
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f7fe fc14 	bl	8000bac <__aeabi_d2f>
 8002384:	4603      	mov	r3, r0
 8002386:	67bb      	str	r3, [r7, #120]	; 0x78
			  	  			  float Py = atof(wrp.py);
 8002388:	484f      	ldr	r0, [pc, #316]	; (80024c8 <SysTick_Handler+0x284>)
 800238a:	f008 fba9 	bl	800aae0 <atof>
 800238e:	ec53 2b10 	vmov	r2, r3, d0
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f7fe fc09 	bl	8000bac <__aeabi_d2f>
 800239a:	4603      	mov	r3, r0
 800239c:	677b      	str	r3, [r7, #116]	; 0x74
			  	  			  float Pz = atof(wrp.pz);
 800239e:	484b      	ldr	r0, [pc, #300]	; (80024cc <SysTick_Handler+0x288>)
 80023a0:	f008 fb9e 	bl	800aae0 <atof>
 80023a4:	ec53 2b10 	vmov	r2, r3, d0
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fbfe 	bl	8000bac <__aeabi_d2f>
 80023b0:	4603      	mov	r3, r0
 80023b2:	673b      	str	r3, [r7, #112]	; 0x70
			  	  			  float Roll = atof(wrp.roll);
 80023b4:	4846      	ldr	r0, [pc, #280]	; (80024d0 <SysTick_Handler+0x28c>)
 80023b6:	f008 fb93 	bl	800aae0 <atof>
 80023ba:	ec53 2b10 	vmov	r2, r3, d0
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fbf3 	bl	8000bac <__aeabi_d2f>
 80023c6:	4603      	mov	r3, r0
 80023c8:	66fb      	str	r3, [r7, #108]	; 0x6c
			  	  			  float Pitch = atof(wrp.pitch);
 80023ca:	4842      	ldr	r0, [pc, #264]	; (80024d4 <SysTick_Handler+0x290>)
 80023cc:	f008 fb88 	bl	800aae0 <atof>
 80023d0:	ec53 2b10 	vmov	r2, r3, d0
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fbe8 	bl	8000bac <__aeabi_d2f>
 80023dc:	4603      	mov	r3, r0
 80023de:	66bb      	str	r3, [r7, #104]	; 0x68
			  	  			  float Yaw = atof(wrp.yaw);
 80023e0:	483d      	ldr	r0, [pc, #244]	; (80024d8 <SysTick_Handler+0x294>)
 80023e2:	f008 fb7d 	bl	800aae0 <atof>
 80023e6:	ec53 2b10 	vmov	r2, r3, d0
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbdd 	bl	8000bac <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	667b      	str	r3, [r7, #100]	; 0x64
			  	  			  float P_fom = atof(wrp.pos_std);
 80023f6:	4839      	ldr	r0, [pc, #228]	; (80024dc <SysTick_Handler+0x298>)
 80023f8:	f008 fb72 	bl	800aae0 <atof>
 80023fc:	ec53 2b10 	vmov	r2, r3, d0
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fbd2 	bl	8000bac <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	663b      	str	r3, [r7, #96]	; 0x60

			  	  			  float heading_msg[] = {Px,Py,Pz,Roll,Pitch,Yaw,P_fom,time_stamp};
 800240c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800242a:	61fb      	str	r3, [r7, #28]
			  	  			  SendData(Sensor_start, heading_msg, sizeof(heading_msg), float32);
 800242c:	4639      	mov	r1, r7
 800242e:	2302      	movs	r3, #2
 8002430:	2220      	movs	r2, #32
 8002432:	2080      	movs	r0, #128	; 0x80
 8002434:	f7ff f8a8 	bl	8001588 <SendData>
			  	  			  send_msg &= 0xFB; //Nullstill respektiv bit i maske
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <SysTick_Handler+0x260>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <SysTick_Handler+0x260>)
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e073      	b.n	8002530 <SysTick_Handler+0x2ec>

			  	  	}//_if_else
			  	  		  //Temp & Trykk
			  	  	else if (send_msg & 0x80){//_if_else
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <SysTick_Handler+0x260>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b25b      	sxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	da50      	bge.n	80024f4 <SysTick_Handler+0x2b0>
			  	  			  uint8_t tp_msg[] = {temp1,temp2,temp3,vanntemp,trykk};
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <SysTick_Handler+0x29c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <SysTick_Handler+0x2a0>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <SysTick_Handler+0x2a4>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <SysTick_Handler+0x2a8>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002472:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <SysTick_Handler+0x2ac>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			  	  			  SendData((Sensor_start + 0x02), tp_msg, sizeof(tp_msg), uint8);
 800247a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800247e:	2300      	movs	r3, #0
 8002480:	2205      	movs	r2, #5
 8002482:	2082      	movs	r0, #130	; 0x82
 8002484:	f7ff f880 	bl	8001588 <SendData>
			  	  			  send_msg &= 0x7F;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <SysTick_Handler+0x260>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Handler+0x260>)
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e04b      	b.n	8002530 <SysTick_Handler+0x2ec>
 8002498:	20003476 	.word	0x20003476
 800249c:	20001619 	.word	0x20001619
 80024a0:	20003425 	.word	0x20003425
 80024a4:	20001618 	.word	0x20001618
 80024a8:	20000498 	.word	0x20000498
 80024ac:	20000518 	.word	0x20000518
 80024b0:	20000598 	.word	0x20000598
 80024b4:	20000698 	.word	0x20000698
 80024b8:	20000718 	.word	0x20000718
 80024bc:	20000918 	.word	0x20000918
 80024c0:	20001198 	.word	0x20001198
 80024c4:	20001218 	.word	0x20001218
 80024c8:	20001298 	.word	0x20001298
 80024cc:	20001318 	.word	0x20001318
 80024d0:	20001418 	.word	0x20001418
 80024d4:	20001498 	.word	0x20001498
 80024d8:	20001518 	.word	0x20001518
 80024dc:	20001398 	.word	0x20001398
 80024e0:	20003420 	.word	0x20003420
 80024e4:	20003421 	.word	0x20003421
 80024e8:	20003422 	.word	0x20003422
 80024ec:	20003423 	.word	0x20003423
 80024f0:	20003424 	.word	0x20003424
			  	  	}//_if_else

			  	  		  //Feilmelding og "Catch-all"
			  	  	else if (send_msg){//_if_else
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <SysTick_Handler+0x358>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d019      	beq.n	8002530 <SysTick_Handler+0x2ec>
			  	  			  uint8_t error_msg[] = {dvl_mask,dvl_mask2,lekkasje};
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <SysTick_Handler+0x35c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <SysTick_Handler+0x360>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800250c:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <SysTick_Handler+0x364>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  	  			  SendData((Sensor_start + 0x03), error_msg, sizeof(error_msg), uint8);
 8002514:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002518:	2300      	movs	r3, #0
 800251a:	2203      	movs	r2, #3
 800251c:	2083      	movs	r0, #131	; 0x83
 800251e:	f7ff f833 	bl	8001588 <SendData>
			  	  			  send_msg &= 0x85; //Nullstill alle bit som ikke stemmer med andre masker
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <SysTick_Handler+0x358>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <SysTick_Handler+0x358>)
 800252e:	701a      	strb	r2, [r3, #0]
			  while (send_msg > 0){//_while
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <SysTick_Handler+0x358>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f aea8 	bne.w	800228a <SysTick_Handler+0x46>
			  	  	}//_if_else
			  }//_while
	  }//if_dvl
	  				  ms10_ticker++;
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <SysTick_Handler+0x368>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <SysTick_Handler+0x368>)
 8002544:	701a      	strb	r2, [r3, #0]


	//-------------------Skjer hvert 100ms
					  if (ms10_ticker++ > 99){//_100ms
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <SysTick_Handler+0x368>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	b2d1      	uxtb	r1, r2
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <SysTick_Handler+0x368>)
 8002550:	7011      	strb	r1, [r2, #0]
 8002552:	2b63      	cmp	r3, #99	; 0x63
 8002554:	d91e      	bls.n	8002594 <SysTick_Handler+0x350>
						  ms10_ticker = 0;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <SysTick_Handler+0x368>)
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
//								 watertemp = ms5837_temperature_celcius(&pressuresensor);
//								 waterpressure = ms5837_pressure_bar(&pressuresensor);
//						  }

	//----------------Skjer hvert 1sek
						  if(ms100_ticker++>9){ //_1s
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <SysTick_Handler+0x36c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	b2d1      	uxtb	r1, r2
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <SysTick_Handler+0x36c>)
 8002566:	7011      	strb	r1, [r2, #0]
 8002568:	2b09      	cmp	r3, #9
 800256a:	d913      	bls.n	8002594 <SysTick_Handler+0x350>
							uint8_t status_msg[] = {0x00,0x00,lekkasje};
 800256c:	2300      	movs	r3, #0
 800256e:	f887 3020 	strb.w	r3, [r7, #32]
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <SysTick_Handler+0x364>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
							ms100_ticker = 0;
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <SysTick_Handler+0x36c>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
							SendData((Sensor_start + 0x03), status_msg, sizeof(status_msg), uint8);
 8002586:	f107 0120 	add.w	r1, r7, #32
 800258a:	2300      	movs	r3, #0
 800258c:	2203      	movs	r2, #3
 800258e:	2083      	movs	r0, #131	; 0x83
 8002590:	f7fe fffa 	bl	8001588 <SendData>
					  }//_100ms

  }//if_ms

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	3780      	adds	r7, #128	; 0x80
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20001618 	.word	0x20001618
 80025a0:	2000161b 	.word	0x2000161b
 80025a4:	2000161c 	.word	0x2000161c
 80025a8:	20000478 	.word	0x20000478
 80025ac:	20003477 	.word	0x20003477
 80025b0:	20003478 	.word	0x20003478

080025b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Channel1_IRQHandler+0x10>)
 80025ba:	f003 fe1d 	bl	80061f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000278 	.word	0x20000278

080025c8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <ADC1_2_IRQHandler+0x10>)
 80025ce:	f001 ff71 	bl	80044b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000020c 	.word	0x2000020c

080025dc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <FDCAN1_IT0_IRQHandler+0x10>)
 80025e2:	f004 fbc9 	bl	8006d78 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000388 	.word	0x20000388

080025f0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <FDCAN1_IT1_IRQHandler+0x10>)
 80025f6:	f004 fbbf 	bl	8006d78 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000388 	.word	0x20000388

08002604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM2_IRQHandler+0x10>)
 800260a:	f006 ff11 	bl	8009430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20003480 	.word	0x20003480

08002618 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	  if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 800261e:	482a      	ldr	r0, [pc, #168]	; (80026c8 <USART1_IRQHandler+0xb0>)
 8002620:	f7ff fdcc 	bl	80021bc <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d04a      	beq.n	80026c0 <USART1_IRQHandler+0xa8>
	      // Les motatt byte og initaliser variabler
	      char rx_data = LL_USART_ReceiveData8(USART1);
 800262a:	4827      	ldr	r0, [pc, #156]	; (80026c8 <USART1_IRQHandler+0xb0>)
 800262c:	f7ff fdd9 	bl	80021e2 <LL_USART_ReceiveData8>
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
	      static uint8_t rx_buffer_nr = 0, rx_index = 0;
	      // Sjekk om ny byte er Line feed eller Carriage return
	      if ((rx_data == '\r') || (rx_data == '\n')) {
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	2b0d      	cmp	r3, #13
 8002638:	d002      	beq.n	8002640 <USART1_IRQHandler+0x28>
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b0a      	cmp	r3, #10
 800263e:	d127      	bne.n	8002690 <USART1_IRQHandler+0x78>
	    	  // Avslutt streng med \0 streng terminering
	    	  rx_buffer[rx_buffer_nr++][rx_index] = '\0';
 8002640:	4b22      	ldr	r3, [pc, #136]	; (80026cc <USART1_IRQHandler+0xb4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	b2d1      	uxtb	r1, r2
 8002648:	4a20      	ldr	r2, [pc, #128]	; (80026cc <USART1_IRQHandler+0xb4>)
 800264a:	7011      	strb	r1, [r2, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <USART1_IRQHandler+0xb8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	4619      	mov	r1, r3
 8002654:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <USART1_IRQHandler+0xbc>)
 8002656:	01c3      	lsls	r3, r0, #7
 8002658:	4413      	add	r3, r2
 800265a:	440b      	add	r3, r1
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
	          // Reset buffer index for neste melding
	          rx_index = 0;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <USART1_IRQHandler+0xb8>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
	          new_uart++;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <USART1_IRQHandler+0xc0>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <USART1_IRQHandler+0xc0>)
 8002670:	701a      	strb	r2, [r3, #0]
	          if (new_uart>10){
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <USART1_IRQHandler+0xc0>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b0a      	cmp	r3, #10
 8002678:	d902      	bls.n	8002680 <USART1_IRQHandler+0x68>
	            new_uart=10;
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <USART1_IRQHandler+0xc0>)
 800267c:	220a      	movs	r2, #10
 800267e:	701a      	strb	r2, [r3, #0]
	            }
	          if(rx_buffer_nr>=MAX_AMOUNT_BUFFERS){
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <USART1_IRQHandler+0xb4>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d913      	bls.n	80026b0 <USART1_IRQHandler+0x98>
	             rx_buffer_nr = 0;
 8002688:	4b10      	ldr	r3, [pc, #64]	; (80026cc <USART1_IRQHandler+0xb4>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
	          if(rx_buffer_nr>=MAX_AMOUNT_BUFFERS){
 800268e:	e00f      	b.n	80026b0 <USART1_IRQHandler+0x98>
	            }

	        }
	        else {
	            // Lagre motatt byte i buffer
	            rx_buffer[rx_buffer_nr][rx_index++] = rx_data;
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <USART1_IRQHandler+0xb4>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <USART1_IRQHandler+0xb8>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	b2d1      	uxtb	r1, r2
 800269e:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <USART1_IRQHandler+0xb8>)
 80026a0:	7011      	strb	r1, [r2, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <USART1_IRQHandler+0xbc>)
 80026a6:	01c3      	lsls	r3, r0, #7
 80026a8:	4413      	add	r3, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	79fa      	ldrb	r2, [r7, #7]
 80026ae:	701a      	strb	r2, [r3, #0]
	        	}
	            // Se etter buffer overflow
	        if (rx_index >= RX_BUFFER_SIZE) {
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <USART1_IRQHandler+0xb8>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da02      	bge.n	80026c0 <USART1_IRQHandler+0xa8>
	            // Reset buffer index
	            rx_index = 0;
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <USART1_IRQHandler+0xb8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40013800 	.word	0x40013800
 80026cc:	20003479 	.word	0x20003479
 80026d0:	2000347a 	.word	0x2000347a
 80026d4:	20001620 	.word	0x20001620
 80026d8:	2000161a 	.word	0x2000161a

080026dc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <I2C3_EV_IRQHandler+0x10>)
 80026e2:	f005 fa8d 	bl	8007c00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000424 	.word	0x20000424

080026f0 <HAL_FDCAN_RxFifo0Callback>:
// Definering av verdilister som hentes fra CANFD nettverk
uint8_t testV[3];
uint8_t ping[7];
uint8_t CAN_buffer[6];

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	// Går gjennom alle meldinger i fifo bufferen
	while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 80026fa:	e035      	b.n	8002768 <HAL_FDCAN_RxFifo0Callback+0x78>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_FDCAN_RxFifo0Callback+0x90>)
 80026fe:	4a21      	ldr	r2, [pc, #132]	; (8002784 <HAL_FDCAN_RxFifo0Callback+0x94>)
 8002700:	2140      	movs	r1, #64	; 0x40
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f004 f91a 	bl	800693c <HAL_FDCAN_GetRxMessage>

		idValue = (uint16_t)(RxHeader.Identifier & 0xFFF);
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <HAL_FDCAN_RxFifo0Callback+0x94>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_FDCAN_RxFifo0Callback+0x98>)
 8002716:	801a      	strh	r2, [r3, #0]
	    switch (idValue) {
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_FDCAN_RxFifo0Callback+0x98>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d014      	beq.n	800274a <HAL_FDCAN_RxFifo0Callback+0x5a>
 8002720:	2b09      	cmp	r3, #9
 8002722:	d120      	bne.n	8002766 <HAL_FDCAN_RxFifo0Callback+0x76>
	        case Lytting:
	        	hexToValues(ping, RxData, sizeof(ping), uint8);
 8002724:	2300      	movs	r3, #0
 8002726:	2207      	movs	r2, #7
 8002728:	4915      	ldr	r1, [pc, #84]	; (8002780 <HAL_FDCAN_RxFifo0Callback+0x90>)
 800272a:	4818      	ldr	r0, [pc, #96]	; (800278c <HAL_FDCAN_RxFifo0Callback+0x9c>)
 800272c:	f7ff f98a 	bl	8001a44 <hexToValues>
	        	ping[1] = ping[1] +1;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	3301      	adds	r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <HAL_FDCAN_RxFifo0Callback+0x9c>)
 800273a:	705a      	strb	r2, [r3, #1]
	        	SendData(Sensor_slutt, ping, sizeof(ping), uint8);
 800273c:	2300      	movs	r3, #0
 800273e:	2207      	movs	r2, #7
 8002740:	4912      	ldr	r1, [pc, #72]	; (800278c <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8002742:	20bf      	movs	r0, #191	; 0xbf
 8002744:	f7fe ff20 	bl	8001588 <SendData>
	            break;
 8002748:	e00e      	b.n	8002768 <HAL_FDCAN_RxFifo0Callback+0x78>
	        case Kommunikasjon_start:
	        	hexToValues(CAN_buffer, RxData, sizeof(CAN_buffer), uint8);
 800274a:	2300      	movs	r3, #0
 800274c:	2206      	movs	r2, #6
 800274e:	490c      	ldr	r1, [pc, #48]	; (8002780 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8002750:	480f      	ldr	r0, [pc, #60]	; (8002790 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8002752:	f7ff f977 	bl	8001a44 <hexToValues>
	        	dvl_cmd = CAN_buffer[0];
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800275c:	701a      	strb	r2, [r3, #0]
	        	send_dvl = 1;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
				break;
 8002764:	e000      	b.n	8002768 <HAL_FDCAN_RxFifo0Callback+0x78>
	        default:
	            break;
 8002766:	bf00      	nop
	while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8002768:	2140      	movs	r1, #64	; 0x40
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f004 f9ee 	bl	8006b4c <HAL_FDCAN_GetRxFifoFillLevel>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1c2      	bne.n	80026fc <HAL_FDCAN_RxFifo0Callback+0xc>
	    }
	}
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20003428 	.word	0x20003428
 8002784:	20000360 	.word	0x20000360
 8002788:	20003426 	.word	0x20003426
 800278c:	20003468 	.word	0x20003468
 8002790:	20003470 	.word	0x20003470
 8002794:	20003425 	.word	0x20003425
 8002798:	20001619 	.word	0x20001619

0800279c <HAL_FDCAN_RxFifo1Callback>:


void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
	// Går gjennom alle meldinger i fifo bufferen
	while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO1) > 0) {
 80027a6:	e013      	b.n	80027d0 <HAL_FDCAN_RxFifo1Callback+0x34>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData);
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_FDCAN_RxFifo1Callback+0x4c>)
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_FDCAN_RxFifo1Callback+0x50>)
 80027ac:	2141      	movs	r1, #65	; 0x41
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f004 f8c4 	bl	800693c <HAL_FDCAN_GetRxMessage>

		idValue = (uint16_t)(RxHeader.Identifier & 0xFFF);
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_FDCAN_RxFifo1Callback+0x50>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_FDCAN_RxFifo1Callback+0x54>)
 80027c2:	801a      	strh	r2, [r3, #0]
	    switch (idValue) {
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_FDCAN_RxFifo1Callback+0x54>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d100      	bne.n	80027ce <HAL_FDCAN_RxFifo1Callback+0x32>
	    	case 1:
	    		break;
 80027cc:	e000      	b.n	80027d0 <HAL_FDCAN_RxFifo1Callback+0x34>
	    	default:
	            break;
 80027ce:	bf00      	nop
	while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO1) > 0) {
 80027d0:	2141      	movs	r1, #65	; 0x41
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f004 f9ba 	bl	8006b4c <HAL_FDCAN_GetRxFifoFillLevel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e4      	bne.n	80027a8 <HAL_FDCAN_RxFifo1Callback+0xc>
	    }
	}
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20003428 	.word	0x20003428
 80027ec:	20000360 	.word	0x20000360
 80027f0:	20003426 	.word	0x20003426

080027f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return 1;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_kill>:

int _kill(int pid, int sig)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800280e:	f009 fa11 	bl	800bc34 <__errno>
 8002812:	4603      	mov	r3, r0
 8002814:	2216      	movs	r2, #22
 8002816:	601a      	str	r2, [r3, #0]
  return -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <_exit>:

void _exit (int status)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ffe7 	bl	8002804 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002836:	e7fe      	b.n	8002836 <_exit+0x12>

08002838 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e00a      	b.n	8002860 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800284a:	f3af 8000 	nop.w
 800284e:	4601      	mov	r1, r0
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	60ba      	str	r2, [r7, #8]
 8002856:	b2ca      	uxtb	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbf0      	blt.n	800284a <_read+0x12>
  }

  return len;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e009      	b.n	8002898 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	60ba      	str	r2, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	dbf1      	blt.n	8002884 <_write+0x12>
  }
  return len;
 80028a0:	687b      	ldr	r3, [r7, #4]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_close>:

int _close(int file)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d2:	605a      	str	r2, [r3, #4]
  return 0;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <_isatty>:

int _isatty(int file)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <_sbrk+0x5c>)
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <_sbrk+0x60>)
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <_sbrk+0x64>)
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <_sbrk+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002944:	f009 f976 	bl	800bc34 <__errno>
 8002948:	4603      	mov	r3, r0
 800294a:	220c      	movs	r2, #12
 800294c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	e009      	b.n	8002968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <_sbrk+0x64>)
 8002964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20020000 	.word	0x20020000
 8002974:	00000400 	.word	0x00000400
 8002978:	2000347c 	.word	0x2000347c
 800297c:	20003670 	.word	0x20003670

08002980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <SystemInit+0x20>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <SystemInit+0x20>)
 800298c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029aa:	f107 0320 	add.w	r3, r7, #32
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c8:	463b      	mov	r3, r7
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <MX_TIM2_Init+0xd0>)
 80029d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <MX_TIM2_Init+0xd0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <MX_TIM2_Init+0xd0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <MX_TIM2_Init+0xd0>)
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ee:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <MX_TIM2_Init+0xd0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MX_TIM2_Init+0xd0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029fa:	481e      	ldr	r0, [pc, #120]	; (8002a74 <MX_TIM2_Init+0xd0>)
 80029fc:	f006 fc50 	bl	80092a0 <HAL_TIM_Base_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002a06:	f7ff fbaf 	bl	8002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a0e:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a1c:	f107 0320 	add.w	r3, r7, #32
 8002a20:	4619      	mov	r1, r3
 8002a22:	4814      	ldr	r0, [pc, #80]	; (8002a74 <MX_TIM2_Init+0xd0>)
 8002a24:	f006 fe54 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a2e:	f7ff fb9b 	bl	8002168 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <MX_TIM2_Init+0xd0>)
 8002a42:	f006 ff51 	bl	80098e8 <HAL_TIM_SlaveConfigSynchro>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002a4c:	f7ff fb8c 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a58:	463b      	mov	r3, r7
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_TIM2_Init+0xd0>)
 8002a5e:	f007 f9dd 	bl	8009e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8002a68:	f7ff fb7e 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a6c:	bf00      	nop
 8002a6e:	3730      	adds	r7, #48	; 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20003480 	.word	0x20003480

08002a78 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7e:	f107 0310 	add.w	r3, r7, #16
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002a98:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <MX_TIM3_Init+0x9c>)
 8002a9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002a9e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002abe:	4814      	ldr	r0, [pc, #80]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002ac0:	f006 fbee 	bl	80092a0 <HAL_TIM_Base_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002aca:	f7ff fb4d 	bl	8002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002adc:	f006 fdf8 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002ae6:	f7ff fb3f 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002af8:	f007 f990 	bl	8009e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002b02:	f7ff fb31 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200034cc 	.word	0x200034cc
 8002b14:	40000400 	.word	0x40000400

08002b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d131      	bne.n	8002b9e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b3a:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b88:	f004 fc0e 	bl	80073a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2105      	movs	r1, #5
 8002b90:	201c      	movs	r0, #28
 8002b92:	f003 f88e 	bl	8005cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b96:	201c      	movs	r0, #28
 8002b98:	f003 f8a5 	bl	8005ce6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b9c:	e010      	b.n	8002bc0 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_TIM_Base_MspInit+0xb4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	3728      	adds	r7, #40	; 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	; (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	; (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_USART_Enable>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_USART_DisableFIFO>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_USART_SetTXFIFOThreshold>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	b089      	sub	sp, #36	; 0x24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3308      	adds	r3, #8
 8002d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	075b      	lsls	r3, r3, #29
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	61ba      	str	r2, [r7, #24]
 8002d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6979      	ldr	r1, [r7, #20]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e4      	bne.n	8002d2c <LL_USART_SetTXFIFOThreshold+0xa>
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	3724      	adds	r7, #36	; 0x24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_USART_SetRXFIFOThreshold>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	065b      	lsls	r3, r3, #25
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3308      	adds	r3, #8
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	61ba      	str	r2, [r7, #24]
 8002d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6979      	ldr	r1, [r7, #20]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	613b      	str	r3, [r7, #16]
   return(result);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e4      	bne.n	8002d7a <LL_USART_SetRXFIFOThreshold+0xa>
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_USART_ConfigAsyncMode>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_USART_IsActiveFlag_TC>:
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d101      	bne.n	8002e02 <LL_USART_IsActiveFlag_TC+0x18>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <LL_USART_IsActiveFlag_TC+0x1a>
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d101      	bne.n	8002e28 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_USART_IsActiveFlag_TEACK>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e4a:	d101      	bne.n	8002e50 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_USART_IsActiveFlag_REACK>:
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e72:	d101      	bne.n	8002e78 <LL_USART_IsActiveFlag_REACK+0x1a>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <LL_USART_IsActiveFlag_REACK+0x1c>
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eb0:	4907      	ldr	r1, [pc, #28]	; (8002ed0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ede:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002eea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40021000 	.word	0x40021000

08002f04 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b0a4      	sub	sp, #144	; 0x90
 8002f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */


  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002f0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f0e:	2220      	movs	r2, #32
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f008 fdc1 	bl	800ba9a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
 8002f28:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	2254      	movs	r2, #84	; 0x54
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f008 fdb2 	bl	800ba9a <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	4618      	mov	r0, r3
 8002f42:	f005 ff5f 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002f4c:	f7ff f90c 	bl	8002168 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002f50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f54:	f7ff ffbe 	bl	8002ed4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002f58:	2004      	movs	r0, #4
 8002f5a:	f7ff ffa3 	bl	8002ea4 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PC4   ------> USART1_TX
  PC5   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002f5e:	2310      	movs	r3, #16
 8002f60:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f62:	2302      	movs	r3, #2
 8002f64:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f66:	2300      	movs	r3, #0
 8002f68:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002f72:	2307      	movs	r3, #7
 8002f74:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4831      	ldr	r0, [pc, #196]	; (8003044 <MX_USART1_UART_Init+0x140>)
 8002f7e:	f007 f974 	bl	800a26a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002f82:	2320      	movs	r3, #32
 8002f84:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f86:	2302      	movs	r3, #2
 8002f88:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f92:	2300      	movs	r3, #0
 8002f94:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002f96:	2307      	movs	r3, #7
 8002f98:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4828      	ldr	r0, [pc, #160]	; (8003044 <MX_USART1_UART_Init+0x140>)
 8002fa2:	f007 f962 	bl	800a26a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002fa6:	f7ff fe13 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2200      	movs	r2, #0
 8002fae:	2102      	movs	r1, #2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fe63 	bl	8002c7c <NVIC_EncodePriority>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4619      	mov	r1, r3
 8002fba:	2025      	movs	r0, #37	; 0x25
 8002fbc:	f7ff fe34 	bl	8002c28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002fc0:	2025      	movs	r0, #37	; 0x25
 8002fc2:	f7ff fe13 	bl	8002bec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	673b      	str	r3, [r7, #112]	; 0x70
  USART_InitStruct.BaudRate = 115200;
 8002fca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fce:	677b      	str	r3, [r7, #116]	; 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	67bb      	str	r3, [r7, #120]	; 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002fde:	230c      	movs	r3, #12
 8002fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002ff0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4814      	ldr	r0, [pc, #80]	; (8003048 <MX_USART1_UART_Init+0x144>)
 8002ff8:	f007 fcec 	bl	800a9d4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4812      	ldr	r0, [pc, #72]	; (8003048 <MX_USART1_UART_Init+0x144>)
 8003000:	f7ff fe8f 	bl	8002d22 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8003004:	2100      	movs	r1, #0
 8003006:	4810      	ldr	r0, [pc, #64]	; (8003048 <MX_USART1_UART_Init+0x144>)
 8003008:	f7ff feb2 	bl	8002d70 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 800300c:	480e      	ldr	r0, [pc, #56]	; (8003048 <MX_USART1_UART_Init+0x144>)
 800300e:	f7ff fe78 	bl	8002d02 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8003012:	480d      	ldr	r0, [pc, #52]	; (8003048 <MX_USART1_UART_Init+0x144>)
 8003014:	f7ff fed3 	bl	8002dbe <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8003018:	480b      	ldr	r0, [pc, #44]	; (8003048 <MX_USART1_UART_Init+0x144>)
 800301a:	f7ff fe62 	bl	8002ce2 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 800301e:	bf00      	nop
 8003020:	4809      	ldr	r0, [pc, #36]	; (8003048 <MX_USART1_UART_Init+0x144>)
 8003022:	f7ff ff08 	bl	8002e36 <LL_USART_IsActiveFlag_TEACK>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f9      	beq.n	8003020 <MX_USART1_UART_Init+0x11c>
 800302c:	4806      	ldr	r0, [pc, #24]	; (8003048 <MX_USART1_UART_Init+0x144>)
 800302e:	f7ff ff16 	bl	8002e5e <LL_USART_IsActiveFlag_REACK>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f3      	beq.n	8003020 <MX_USART1_UART_Init+0x11c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3790      	adds	r7, #144	; 0x90
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	48000800 	.word	0x48000800
 8003048:	40013800 	.word	0x40013800

0800304c <Parse_msg>:

/* USER CODE BEGIN 1 */
void Parse_msg(void){
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
	// Initialiserer indexer
	static uint8_t read_index = 0;
	uint8_t write_index = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
	// Definerer hvor strenger skal spittes
	const char delim[] = ",";
 8003056:	232c      	movs	r3, #44	; 0x2c
 8003058:	803b      	strh	r3, [r7, #0]
	// Henter streng fra buffer
	char* str= rx_buffer[read_index];
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <Parse_msg+0x8c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	01db      	lsls	r3, r3, #7
 8003060:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <Parse_msg+0x90>)
 8003062:	4413      	add	r3, r2
 8003064:	607b      	str	r3, [r7, #4]
	//
	// Splitter streng
	char* token = strtok(str,delim);
 8003066:	463b      	mov	r3, r7
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f008 fd30 	bl	800bad0 <strtok>
 8003070:	60b8      	str	r0, [r7, #8]
	// For alle ord i streng
	while(token != NULL){
 8003072:	e01c      	b.n	80030ae <Parse_msg+0x62>
		strcpy(DVL_Parced[read_index][write_index++], token);
 8003074:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <Parse_msg+0x8c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	1c59      	adds	r1, r3, #1
 800307e:	73f9      	strb	r1, [r7, #15]
 8003080:	4619      	mov	r1, r3
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	440b      	add	r3, r1
 800308e:	01db      	lsls	r3, r3, #7
 8003090:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <Parse_msg+0x94>)
 8003092:	4413      	add	r3, r2
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f008 fdf9 	bl	800bc8e <strcpy>
		token = strtok(NULL,delim);
 800309c:	463b      	mov	r3, r7
 800309e:	4619      	mov	r1, r3
 80030a0:	2000      	movs	r0, #0
 80030a2:	f008 fd15 	bl	800bad0 <strtok>
 80030a6:	60b8      	str	r0, [r7, #8]
		if (write_index>MAX_WORD_LENGTH){
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d810      	bhi.n	80030d0 <Parse_msg+0x84>
	while(token != NULL){
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1df      	bne.n	8003074 <Parse_msg+0x28>
			return;
		}
	}
	// Inkrementerer og sjekker for overflow
	read_index++;
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <Parse_msg+0x8c>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <Parse_msg+0x8c>)
 80030be:	701a      	strb	r2, [r3, #0]
	if (read_index>=MAX_AMOUNT_BUFFERS){
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <Parse_msg+0x8c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d904      	bls.n	80030d2 <Parse_msg+0x86>
		read_index = 0;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <Parse_msg+0x8c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e000      	b.n	80030d2 <Parse_msg+0x86>
			return;
 80030d0:	bf00      	nop
	}
}
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20003518 	.word	0x20003518
 80030dc:	20001620 	.word	0x20001620
 80030e0:	200018a0 	.word	0x200018a0

080030e4 <Process_msg>:

void Process_msg(void){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
	// Index for kontroll av avlest melding
	static int process_index = 0;
	// Sjekk om ny melding er splittet
	if (new_uart > 0){
 80030ea:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <Process_msg+0x234>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 827a 	beq.w	80035e8 <Process_msg+0x504>
		while (new_uart-- >=1){
 80030f4:	e26f      	b.n	80035d6 <Process_msg+0x4f2>
			Parse_msg();
 80030f6:	f7ff ffa9 	bl	800304c <Parse_msg>
			int word=0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
			/* Alle motatte meldinger starter med W(waterlinked) og R(Response)
			vi trenger derfor bare se på det tredje tegnet for å finne ut hvilken meldingstype det er
			send_msg er en bitmaske som beskriver hvilke meldinger som er blitt oppdatert*/

			switch (DVL_Parced[process_index][0][2]) {
 80030fe:	4b87      	ldr	r3, [pc, #540]	; (800331c <Process_msg+0x238>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a87      	ldr	r2, [pc, #540]	; (8003320 <Process_msg+0x23c>)
 8003104:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3302      	adds	r3, #2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b7a      	cmp	r3, #122	; 0x7a
 8003114:	f300 8255 	bgt.w	80035c2 <Process_msg+0x4de>
 8003118:	2b61      	cmp	r3, #97	; 0x61
 800311a:	da06      	bge.n	800312a <Process_msg+0x46>
 800311c:	2b21      	cmp	r3, #33	; 0x21
 800311e:	f000 8238 	beq.w	8003592 <Process_msg+0x4ae>
 8003122:	2b3f      	cmp	r3, #63	; 0x3f
 8003124:	f000 822d 	beq.w	8003582 <Process_msg+0x49e>
 8003128:	e24b      	b.n	80035c2 <Process_msg+0x4de>
 800312a:	3b61      	subs	r3, #97	; 0x61
 800312c:	2b19      	cmp	r3, #25
 800312e:	f200 8248 	bhi.w	80035c2 <Process_msg+0x4de>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <Process_msg+0x54>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	080035a3 	.word	0x080035a3
 800313c:	080035c3 	.word	0x080035c3
 8003140:	080035c3 	.word	0x080035c3
 8003144:	080035c3 	.word	0x080035c3
 8003148:	080035c3 	.word	0x080035c3
 800314c:	080035c3 	.word	0x080035c3
 8003150:	080035c3 	.word	0x080035c3
 8003154:	080035c3 	.word	0x080035c3
 8003158:	080035c3 	.word	0x080035c3
 800315c:	080035c3 	.word	0x080035c3
 8003160:	080035c3 	.word	0x080035c3
 8003164:	080035c3 	.word	0x080035c3
 8003168:	080035c3 	.word	0x080035c3
 800316c:	080035b3 	.word	0x080035b3
 8003170:	080035c3 	.word	0x080035c3
 8003174:	0800342f 	.word	0x0800342f
 8003178:	080035c3 	.word	0x080035c3
 800317c:	080035c3 	.word	0x080035c3
 8003180:	080035c3 	.word	0x080035c3
 8003184:	080035c3 	.word	0x080035c3
 8003188:	08003351 	.word	0x08003351
 800318c:	080035c3 	.word	0x080035c3
 8003190:	080035c3 	.word	0x080035c3
 8003194:	080035c3 	.word	0x080035c3
 8003198:	080035c3 	.word	0x080035c3
 800319c:	080031a1 	.word	0x080031a1
			  case 'z': // Velocity report wrz

				  strcpy(wrz.vx,DVL_Parced[process_index][word++]);
 80031a0:	4b5e      	ldr	r3, [pc, #376]	; (800331c <Process_msg+0x238>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	1c4b      	adds	r3, r1, #1
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	440b      	add	r3, r1
 80031b6:	01db      	lsls	r3, r3, #7
 80031b8:	4a59      	ldr	r2, [pc, #356]	; (8003320 <Process_msg+0x23c>)
 80031ba:	4413      	add	r3, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	4859      	ldr	r0, [pc, #356]	; (8003324 <Process_msg+0x240>)
 80031c0:	f008 fd65 	bl	800bc8e <strcpy>
				  strcpy(wrz.vy,DVL_Parced[process_index][word++]);
 80031c4:	4b55      	ldr	r3, [pc, #340]	; (800331c <Process_msg+0x238>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	1c4b      	adds	r3, r1, #1
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	440b      	add	r3, r1
 80031da:	01db      	lsls	r3, r3, #7
 80031dc:	4a50      	ldr	r2, [pc, #320]	; (8003320 <Process_msg+0x23c>)
 80031de:	4413      	add	r3, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	4851      	ldr	r0, [pc, #324]	; (8003328 <Process_msg+0x244>)
 80031e4:	f008 fd53 	bl	800bc8e <strcpy>
				  strcpy(wrz.vz,DVL_Parced[process_index][word++]);
 80031e8:	4b4c      	ldr	r3, [pc, #304]	; (800331c <Process_msg+0x238>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	1c4b      	adds	r3, r1, #1
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	440b      	add	r3, r1
 80031fe:	01db      	lsls	r3, r3, #7
 8003200:	4a47      	ldr	r2, [pc, #284]	; (8003320 <Process_msg+0x23c>)
 8003202:	4413      	add	r3, r2
 8003204:	4619      	mov	r1, r3
 8003206:	4849      	ldr	r0, [pc, #292]	; (800332c <Process_msg+0x248>)
 8003208:	f008 fd41 	bl	800bc8e <strcpy>
				  strcpy(wrz.valid,DVL_Parced[process_index][word++]);
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <Process_msg+0x238>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	1c4b      	adds	r3, r1, #1
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	440b      	add	r3, r1
 8003222:	01db      	lsls	r3, r3, #7
 8003224:	4a3e      	ldr	r2, [pc, #248]	; (8003320 <Process_msg+0x23c>)
 8003226:	4413      	add	r3, r2
 8003228:	4619      	mov	r1, r3
 800322a:	4841      	ldr	r0, [pc, #260]	; (8003330 <Process_msg+0x24c>)
 800322c:	f008 fd2f 	bl	800bc8e <strcpy>
				  strcpy(wrz.altitude,DVL_Parced[process_index][word++]);
 8003230:	4b3a      	ldr	r3, [pc, #232]	; (800331c <Process_msg+0x238>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	1c4b      	adds	r3, r1, #1
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	440b      	add	r3, r1
 8003246:	01db      	lsls	r3, r3, #7
 8003248:	4a35      	ldr	r2, [pc, #212]	; (8003320 <Process_msg+0x23c>)
 800324a:	4413      	add	r3, r2
 800324c:	4619      	mov	r1, r3
 800324e:	4839      	ldr	r0, [pc, #228]	; (8003334 <Process_msg+0x250>)
 8003250:	f008 fd1d 	bl	800bc8e <strcpy>
				  strcpy(wrz.merit_figure,DVL_Parced[process_index][word++]);
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <Process_msg+0x238>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	1c4b      	adds	r3, r1, #1
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	440b      	add	r3, r1
 800326a:	01db      	lsls	r3, r3, #7
 800326c:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <Process_msg+0x23c>)
 800326e:	4413      	add	r3, r2
 8003270:	4619      	mov	r1, r3
 8003272:	4831      	ldr	r0, [pc, #196]	; (8003338 <Process_msg+0x254>)
 8003274:	f008 fd0b 	bl	800bc8e <strcpy>
				  strcpy(wrz.covariance,DVL_Parced[process_index][word++]);
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <Process_msg+0x238>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	1c4b      	adds	r3, r1, #1
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	440b      	add	r3, r1
 800328e:	01db      	lsls	r3, r3, #7
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <Process_msg+0x23c>)
 8003292:	4413      	add	r3, r2
 8003294:	4619      	mov	r1, r3
 8003296:	4829      	ldr	r0, [pc, #164]	; (800333c <Process_msg+0x258>)
 8003298:	f008 fcf9 	bl	800bc8e <strcpy>
				  strcpy(wrz.time_of_reflection,DVL_Parced[process_index][word++]);
 800329c:	4b1f      	ldr	r3, [pc, #124]	; (800331c <Process_msg+0x238>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	1c4b      	adds	r3, r1, #1
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	440b      	add	r3, r1
 80032b2:	01db      	lsls	r3, r3, #7
 80032b4:	4a1a      	ldr	r2, [pc, #104]	; (8003320 <Process_msg+0x23c>)
 80032b6:	4413      	add	r3, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	4821      	ldr	r0, [pc, #132]	; (8003340 <Process_msg+0x25c>)
 80032bc:	f008 fce7 	bl	800bc8e <strcpy>
				  strcpy(wrz.time_since_last_rep,DVL_Parced[process_index][word++]);
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <Process_msg+0x238>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	1c4b      	adds	r3, r1, #1
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	440b      	add	r3, r1
 80032d6:	01db      	lsls	r3, r3, #7
 80032d8:	4a11      	ldr	r2, [pc, #68]	; (8003320 <Process_msg+0x23c>)
 80032da:	4413      	add	r3, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	4819      	ldr	r0, [pc, #100]	; (8003344 <Process_msg+0x260>)
 80032e0:	f008 fcd5 	bl	800bc8e <strcpy>
				  strcpy(wrz.status,DVL_Parced[process_index][word++]);
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <Process_msg+0x238>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	1c4b      	adds	r3, r1, #1
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	4a08      	ldr	r2, [pc, #32]	; (8003320 <Process_msg+0x23c>)
 80032fe:	4413      	add	r3, r2
 8003300:	4619      	mov	r1, r3
 8003302:	4811      	ldr	r0, [pc, #68]	; (8003348 <Process_msg+0x264>)
 8003304:	f008 fcc3 	bl	800bc8e <strcpy>

				  send_msg |= 0x1;
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <Process_msg+0x268>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <Process_msg+0x268>)
 8003314:	701a      	strb	r2, [r3, #0]

				break;
 8003316:	e15e      	b.n	80035d6 <Process_msg+0x4f2>
 8003318:	2000161a 	.word	0x2000161a
 800331c:	2000351c 	.word	0x2000351c
 8003320:	200018a0 	.word	0x200018a0
 8003324:	20000498 	.word	0x20000498
 8003328:	20000518 	.word	0x20000518
 800332c:	20000598 	.word	0x20000598
 8003330:	20000618 	.word	0x20000618
 8003334:	20000698 	.word	0x20000698
 8003338:	20000718 	.word	0x20000718
 800333c:	20000798 	.word	0x20000798
 8003340:	20000818 	.word	0x20000818
 8003344:	20000918 	.word	0x20000918
 8003348:	20000998 	.word	0x20000998
 800334c:	20001618 	.word	0x20001618
			  case 'u':   // Transducer report wru
				  // Finner ut hvilken transducer rapporten gjelder og lagrer data i struct

				  uint8_t tra_num = DVL_Parced[process_index][1][0] - '0';
 8003350:	4ba7      	ldr	r3, [pc, #668]	; (80035f0 <Process_msg+0x50c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4aa7      	ldr	r2, [pc, #668]	; (80035f4 <Process_msg+0x510>)
 8003356:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3380      	adds	r3, #128	; 0x80
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	3b30      	subs	r3, #48	; 0x30
 8003366:	70fb      	strb	r3, [r7, #3]
				  word++;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3301      	adds	r3, #1
 800336c:	607b      	str	r3, [r7, #4]
				  strcpy(wru.velocity[tra_num],DVL_Parced[process_index][word++]);
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	3303      	adds	r3, #3
 8003372:	01db      	lsls	r3, r3, #7
 8003374:	4aa0      	ldr	r2, [pc, #640]	; (80035f8 <Process_msg+0x514>)
 8003376:	1898      	adds	r0, r3, r2
 8003378:	4b9d      	ldr	r3, [pc, #628]	; (80035f0 <Process_msg+0x50c>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	1c4b      	adds	r3, r1, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	440b      	add	r3, r1
 800338e:	01db      	lsls	r3, r3, #7
 8003390:	4a98      	ldr	r2, [pc, #608]	; (80035f4 <Process_msg+0x510>)
 8003392:	4413      	add	r3, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f008 fc7a 	bl	800bc8e <strcpy>
				  strcpy(wru.distance[tra_num],DVL_Parced[process_index][word++]);
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	3306      	adds	r3, #6
 800339e:	01db      	lsls	r3, r3, #7
 80033a0:	4a95      	ldr	r2, [pc, #596]	; (80035f8 <Process_msg+0x514>)
 80033a2:	1898      	adds	r0, r3, r2
 80033a4:	4b92      	ldr	r3, [pc, #584]	; (80035f0 <Process_msg+0x50c>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	1c4b      	adds	r3, r1, #1
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	440b      	add	r3, r1
 80033ba:	01db      	lsls	r3, r3, #7
 80033bc:	4a8d      	ldr	r2, [pc, #564]	; (80035f4 <Process_msg+0x510>)
 80033be:	4413      	add	r3, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f008 fc64 	bl	800bc8e <strcpy>
				  strcpy(wru.rssi[tra_num],DVL_Parced[process_index][word++]);
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	3309      	adds	r3, #9
 80033ca:	01db      	lsls	r3, r3, #7
 80033cc:	4a8a      	ldr	r2, [pc, #552]	; (80035f8 <Process_msg+0x514>)
 80033ce:	1898      	adds	r0, r3, r2
 80033d0:	4b87      	ldr	r3, [pc, #540]	; (80035f0 <Process_msg+0x50c>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	1c4b      	adds	r3, r1, #1
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	440b      	add	r3, r1
 80033e6:	01db      	lsls	r3, r3, #7
 80033e8:	4a82      	ldr	r2, [pc, #520]	; (80035f4 <Process_msg+0x510>)
 80033ea:	4413      	add	r3, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f008 fc4e 	bl	800bc8e <strcpy>
				  strcpy(wru.nsd[tra_num],DVL_Parced[process_index][word++]);
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	330c      	adds	r3, #12
 80033f6:	01db      	lsls	r3, r3, #7
 80033f8:	4a7f      	ldr	r2, [pc, #508]	; (80035f8 <Process_msg+0x514>)
 80033fa:	1898      	adds	r0, r3, r2
 80033fc:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <Process_msg+0x50c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	1c4b      	adds	r3, r1, #1
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	440b      	add	r3, r1
 8003412:	01db      	lsls	r3, r3, #7
 8003414:	4a77      	ldr	r2, [pc, #476]	; (80035f4 <Process_msg+0x510>)
 8003416:	4413      	add	r3, r2
 8003418:	4619      	mov	r1, r3
 800341a:	f008 fc38 	bl	800bc8e <strcpy>

				  send_msg |= 0x2;
 800341e:	4b77      	ldr	r3, [pc, #476]	; (80035fc <Process_msg+0x518>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	f043 0302 	orr.w	r3, r3, #2
 8003426:	b2da      	uxtb	r2, r3
 8003428:	4b74      	ldr	r3, [pc, #464]	; (80035fc <Process_msg+0x518>)
 800342a:	701a      	strb	r2, [r3, #0]
				break;
 800342c:	e0d3      	b.n	80035d6 <Process_msg+0x4f2>
			  case 'p':   // Dead reckogning report wrp
				  strcpy(wrp.time_stamp,DVL_Parced[process_index][word++]);
 800342e:	4b70      	ldr	r3, [pc, #448]	; (80035f0 <Process_msg+0x50c>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	1c4b      	adds	r3, r1, #1
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	440b      	add	r3, r1
 8003444:	01db      	lsls	r3, r3, #7
 8003446:	4a6b      	ldr	r2, [pc, #428]	; (80035f4 <Process_msg+0x510>)
 8003448:	4413      	add	r3, r2
 800344a:	4619      	mov	r1, r3
 800344c:	486c      	ldr	r0, [pc, #432]	; (8003600 <Process_msg+0x51c>)
 800344e:	f008 fc1e 	bl	800bc8e <strcpy>
				  strcpy(wrp.px,DVL_Parced[process_index][word++]);
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <Process_msg+0x50c>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	1c4b      	adds	r3, r1, #1
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	440b      	add	r3, r1
 8003468:	01db      	lsls	r3, r3, #7
 800346a:	4a62      	ldr	r2, [pc, #392]	; (80035f4 <Process_msg+0x510>)
 800346c:	4413      	add	r3, r2
 800346e:	4619      	mov	r1, r3
 8003470:	4864      	ldr	r0, [pc, #400]	; (8003604 <Process_msg+0x520>)
 8003472:	f008 fc0c 	bl	800bc8e <strcpy>
				  strcpy(wrp.py,DVL_Parced[process_index][word++]);
 8003476:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <Process_msg+0x50c>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	1c4b      	adds	r3, r1, #1
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	440b      	add	r3, r1
 800348c:	01db      	lsls	r3, r3, #7
 800348e:	4a59      	ldr	r2, [pc, #356]	; (80035f4 <Process_msg+0x510>)
 8003490:	4413      	add	r3, r2
 8003492:	4619      	mov	r1, r3
 8003494:	485c      	ldr	r0, [pc, #368]	; (8003608 <Process_msg+0x524>)
 8003496:	f008 fbfa 	bl	800bc8e <strcpy>
				  strcpy(wrp.pz,DVL_Parced[process_index][word++]);
 800349a:	4b55      	ldr	r3, [pc, #340]	; (80035f0 <Process_msg+0x50c>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	1c4b      	adds	r3, r1, #1
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	01db      	lsls	r3, r3, #7
 80034b2:	4a50      	ldr	r2, [pc, #320]	; (80035f4 <Process_msg+0x510>)
 80034b4:	4413      	add	r3, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	4854      	ldr	r0, [pc, #336]	; (800360c <Process_msg+0x528>)
 80034ba:	f008 fbe8 	bl	800bc8e <strcpy>
				  strcpy(wrp.pos_std,DVL_Parced[process_index][word++]);
 80034be:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <Process_msg+0x50c>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	1c4b      	adds	r3, r1, #1
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	01db      	lsls	r3, r3, #7
 80034d6:	4a47      	ldr	r2, [pc, #284]	; (80035f4 <Process_msg+0x510>)
 80034d8:	4413      	add	r3, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	484c      	ldr	r0, [pc, #304]	; (8003610 <Process_msg+0x52c>)
 80034de:	f008 fbd6 	bl	800bc8e <strcpy>
				  strcpy(wrp.roll,DVL_Parced[process_index][word++]);
 80034e2:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <Process_msg+0x50c>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	1c4b      	adds	r3, r1, #1
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	01db      	lsls	r3, r3, #7
 80034fa:	4a3e      	ldr	r2, [pc, #248]	; (80035f4 <Process_msg+0x510>)
 80034fc:	4413      	add	r3, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	4844      	ldr	r0, [pc, #272]	; (8003614 <Process_msg+0x530>)
 8003502:	f008 fbc4 	bl	800bc8e <strcpy>
				  strcpy(wrp.pitch,DVL_Parced[process_index][word++]);
 8003506:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <Process_msg+0x50c>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	1c4b      	adds	r3, r1, #1
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	440b      	add	r3, r1
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	4a35      	ldr	r2, [pc, #212]	; (80035f4 <Process_msg+0x510>)
 8003520:	4413      	add	r3, r2
 8003522:	4619      	mov	r1, r3
 8003524:	483c      	ldr	r0, [pc, #240]	; (8003618 <Process_msg+0x534>)
 8003526:	f008 fbb2 	bl	800bc8e <strcpy>
				  strcpy(wrp.yaw,DVL_Parced[process_index][word++]);
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <Process_msg+0x50c>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	1c4b      	adds	r3, r1, #1
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	440b      	add	r3, r1
 8003540:	01db      	lsls	r3, r3, #7
 8003542:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <Process_msg+0x510>)
 8003544:	4413      	add	r3, r2
 8003546:	4619      	mov	r1, r3
 8003548:	4834      	ldr	r0, [pc, #208]	; (800361c <Process_msg+0x538>)
 800354a:	f008 fba0 	bl	800bc8e <strcpy>
				  strcpy(wrp.status,DVL_Parced[process_index][word++]);
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <Process_msg+0x50c>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	1c4b      	adds	r3, r1, #1
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	440b      	add	r3, r1
 8003564:	01db      	lsls	r3, r3, #7
 8003566:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <Process_msg+0x510>)
 8003568:	4413      	add	r3, r2
 800356a:	4619      	mov	r1, r3
 800356c:	482c      	ldr	r0, [pc, #176]	; (8003620 <Process_msg+0x53c>)
 800356e:	f008 fb8e 	bl	800bc8e <strcpy>

				  send_msg |= 0x4;
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <Process_msg+0x518>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	b2da      	uxtb	r2, r3
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <Process_msg+0x518>)
 800357e:	701a      	strb	r2, [r3, #0]
				break;
 8003580:	e029      	b.n	80035d6 <Process_msg+0x4f2>
			  case '?':   // Malformed request, Request failed Unable to read request wr?

				  send_msg |= 0x8;
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <Process_msg+0x518>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	f043 0308 	orr.w	r3, r3, #8
 800358a:	b2da      	uxtb	r2, r3
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <Process_msg+0x518>)
 800358e:	701a      	strb	r2, [r3, #0]
				break;
 8003590:	e021      	b.n	80035d6 <Process_msg+0x4f2>
			  case '!':   // Malformed request, Request failed, Checksum error wr!

				  send_msg |= 0x10;
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <Process_msg+0x518>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	f043 0310 	orr.w	r3, r3, #16
 800359a:	b2da      	uxtb	r2, r3
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <Process_msg+0x518>)
 800359e:	701a      	strb	r2, [r3, #0]

				break;
 80035a0:	e019      	b.n	80035d6 <Process_msg+0x4f2>
			  case 'a':   // Command recived and successfully applied wra
				  send_msg |= 0x20;
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <Process_msg+0x518>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f043 0320 	orr.w	r3, r3, #32
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <Process_msg+0x518>)
 80035ae:	701a      	strb	r2, [r3, #0]

				break;
 80035b0:	e011      	b.n	80035d6 <Process_msg+0x4f2>
			  case 'n':   // Command recived but failed to apply wrn

				  send_msg |= 0x40;
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <Process_msg+0x518>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <Process_msg+0x518>)
 80035be:	701a      	strb	r2, [r3, #0]

				break;
 80035c0:	e009      	b.n	80035d6 <Process_msg+0x4f2>
			  default:  // Feil i mottak av melding

			if (process_index++>MAX_AMOUNT_BUFFERS){//Overflow
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <Process_msg+0x50c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	4909      	ldr	r1, [pc, #36]	; (80035f0 <Process_msg+0x50c>)
 80035ca:	600a      	str	r2, [r1, #0]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	dd02      	ble.n	80035d6 <Process_msg+0x4f2>
				process_index=0;
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <Process_msg+0x50c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
		while (new_uart-- >=1){
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <Process_msg+0x540>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	b2d1      	uxtb	r1, r2
 80035de:	4a11      	ldr	r2, [pc, #68]	; (8003624 <Process_msg+0x540>)
 80035e0:	7011      	strb	r1, [r2, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f47f ad87 	bne.w	80030f6 <Process_msg+0x12>
				}
			}
		}
	}
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	2000351c 	.word	0x2000351c
 80035f4:	200018a0 	.word	0x200018a0
 80035f8:	20000a18 	.word	0x20000a18
 80035fc:	20001618 	.word	0x20001618
 8003600:	20001198 	.word	0x20001198
 8003604:	20001218 	.word	0x20001218
 8003608:	20001298 	.word	0x20001298
 800360c:	20001318 	.word	0x20001318
 8003610:	20001398 	.word	0x20001398
 8003614:	20001418 	.word	0x20001418
 8003618:	20001498 	.word	0x20001498
 800361c:	20001518 	.word	0x20001518
 8003620:	20001598 	.word	0x20001598
 8003624:	2000161a 	.word	0x2000161a

08003628 <UART1_update>:

void UART1_update(uint8_t cmd){
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b0a5      	sub	sp, #148	; 0x94
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
	static uint8_t current_config = 0x01;
	if (cmd&0x04){
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <UART1_update+0x24>
		char cal_gyro[] = "wrg";
 800363c:	4b55      	ldr	r3, [pc, #340]	; (8003794 <UART1_update+0x16c>)
 800363e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		UART1_sendcmd(cal_gyro);
 8003642:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f8ba 	bl	80037c0 <UART1_sendcmd>
		}
	if (cmd&0x08){
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <UART1_update+0x3e>
		char reset_dr[]= "wcr";
 8003656:	4b50      	ldr	r3, [pc, #320]	; (8003798 <UART1_update+0x170>)
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			UART1_sendcmd(reset_dr);
 800365c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f8ad 	bl	80037c0 <UART1_sendcmd>
	}

	//[][][][fresh_water][Reset_DR][Calibrate_gyro][Dark_mode_enable],[Acoustic_enable]
	//wcs = wrc,[speed_of_sound],[mounting_rotation_offset],[acoustic_enabled],[dark_mode_enabled],[range_mode],[periodic_cycling_enabled]
	current_config = (cmd & 0x13);
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 0313 	and.w	r3, r3, #19
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <UART1_update+0x174>)
 8003670:	701a      	strb	r2, [r3, #0]
	switch (current_config & 0x13){
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <UART1_update+0x174>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f003 0313 	and.w	r3, r3, #19
 800367a:	2b13      	cmp	r3, #19
 800367c:	f200 8084 	bhi.w	8003788 <UART1_update+0x160>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART1_update+0x60>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	080036d9 	.word	0x080036d9
 800368c:	080036ef 	.word	0x080036ef
 8003690:	08003705 	.word	0x08003705
 8003694:	0800371b 	.word	0x0800371b
 8003698:	08003789 	.word	0x08003789
 800369c:	08003789 	.word	0x08003789
 80036a0:	08003789 	.word	0x08003789
 80036a4:	08003789 	.word	0x08003789
 80036a8:	08003731 	.word	0x08003731
 80036ac:	08003789 	.word	0x08003789
 80036b0:	08003789 	.word	0x08003789
 80036b4:	08003789 	.word	0x08003789
 80036b8:	08003789 	.word	0x08003789
 80036bc:	08003789 	.word	0x08003789
 80036c0:	08003789 	.word	0x08003789
 80036c4:	08003789 	.word	0x08003789
 80036c8:	08003789 	.word	0x08003789
 80036cc:	08003747 	.word	0x08003747
 80036d0:	0800375d 	.word	0x0800375d
 80036d4:	08003773 	.word	0x08003773
		case 0b00000000:
			const char fresh_nn[] = "wcs,1481,,n,n,,";
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <UART1_update+0x178>)
 80036da:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80036de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(fresh_nn);
 80036e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f869 	bl	80037c0 <UART1_sendcmd>
		case 0b00000001:
			const char fresh_yn[] = "wcs,1481,,y,n,,";
 80036ee:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <UART1_update+0x17c>)
 80036f0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80036f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(fresh_yn);
 80036fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f85e 	bl	80037c0 <UART1_sendcmd>
		case 0b00000010:
			const char fresh_ny[] = "wcs,1481,,n,y,,";
 8003704:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <UART1_update+0x180>)
 8003706:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800370a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800370c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(fresh_ny);
 8003710:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003714:	4618      	mov	r0, r3
 8003716:	f000 f853 	bl	80037c0 <UART1_sendcmd>
		case 0b00000011:
			const char fresh_yy[] = "wcs,1481,,y,y,,";
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <UART1_update+0x184>)
 800371c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(fresh_yy);
 8003726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f848 	bl	80037c0 <UART1_sendcmd>
		case 0b0001000:
			const char salt_nn[] = "wcs,1570,,n,n,,";
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <UART1_update+0x188>)
 8003732:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(salt_nn);
 800373c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f83d 	bl	80037c0 <UART1_sendcmd>
		case 0b00010001:
			const char salt_yn[] = "wcs,1570,,y,n,,";
 8003746:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <UART1_update+0x18c>)
 8003748:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800374c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800374e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(salt_yn);
 8003752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f832 	bl	80037c0 <UART1_sendcmd>
		case 0b00010010:
			const char salt_ny[] = "wcs,1570,,n,y,,";
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <UART1_update+0x190>)
 800375e:	f107 0418 	add.w	r4, r7, #24
 8003762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(salt_ny);
 8003768:	f107 0318 	add.w	r3, r7, #24
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f827 	bl	80037c0 <UART1_sendcmd>
		case 0b00010011:
			const char salt_yy[] = "wcs,1570,,y,y,,";
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <UART1_update+0x194>)
 8003774:	f107 0408 	add.w	r4, r7, #8
 8003778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800377a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(salt_yy);
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f81c 	bl	80037c0 <UART1_sendcmd>
		default:
			break;
 8003788:	bf00      	nop
	}


}
 800378a:	bf00      	nop
 800378c:	3794      	adds	r7, #148	; 0x94
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	00677277 	.word	0x00677277
 8003798:	00726377 	.word	0x00726377
 800379c:	2000001c 	.word	0x2000001c
 80037a0:	0800d820 	.word	0x0800d820
 80037a4:	0800d830 	.word	0x0800d830
 80037a8:	0800d840 	.word	0x0800d840
 80037ac:	0800d850 	.word	0x0800d850
 80037b0:	0800d860 	.word	0x0800d860
 80037b4:	0800d870 	.word	0x0800d870
 80037b8:	0800d880 	.word	0x0800d880
 80037bc:	0800d890 	.word	0x0800d890

080037c0 <UART1_sendcmd>:

void UART1_sendcmd(const char *string){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	while(!LL_USART_IsActiveFlag_TXE(USART1)) {
 80037c8:	bf00      	nop
 80037ca:	481b      	ldr	r0, [pc, #108]	; (8003838 <UART1_sendcmd+0x78>)
 80037cc:	f7ff fb20 	bl	8002e10 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f9      	beq.n	80037ca <UART1_sendcmd+0xa>

	    }
	    while(*string != '\0') {
 80037d6:	e00f      	b.n	80037f8 <UART1_sendcmd+0x38>
	        // Send tegn i strengen over UART1
	        LL_USART_TransmitData8(USART1, *string);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	4816      	ldr	r0, [pc, #88]	; (8003838 <UART1_sendcmd+0x78>)
 80037e0:	f7ff fb51 	bl	8002e86 <LL_USART_TransmitData8>

	        // Vent til sending av tegnet er ferdig
	        while(!LL_USART_IsActiveFlag_TC(USART1)) {
 80037e4:	bf00      	nop
 80037e6:	4814      	ldr	r0, [pc, #80]	; (8003838 <UART1_sendcmd+0x78>)
 80037e8:	f7ff faff 	bl	8002dea <LL_USART_IsActiveFlag_TC>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f9      	beq.n	80037e6 <UART1_sendcmd+0x26>
	        }

	        // Gå til neste tegn i strengen
	        string++;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3301      	adds	r3, #1
 80037f6:	607b      	str	r3, [r7, #4]
	    while(*string != '\0') {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1eb      	bne.n	80037d8 <UART1_sendcmd+0x18>
	    }
	    // Send carrige return ('\r') når hele strengen er sendt
	        LL_USART_TransmitData8(USART1, '\r');
 8003800:	210d      	movs	r1, #13
 8003802:	480d      	ldr	r0, [pc, #52]	; (8003838 <UART1_sendcmd+0x78>)
 8003804:	f7ff fb3f 	bl	8002e86 <LL_USART_TransmitData8>

	        // Vent til hele sendingen er fullført
	        while(!LL_USART_IsActiveFlag_TC(USART1)) {
 8003808:	bf00      	nop
 800380a:	480b      	ldr	r0, [pc, #44]	; (8003838 <UART1_sendcmd+0x78>)
 800380c:	f7ff faed 	bl	8002dea <LL_USART_IsActiveFlag_TC>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f9      	beq.n	800380a <UART1_sendcmd+0x4a>

	        }
		// Send line feed ('\n') når hele strengen er sendt
		    LL_USART_TransmitData8(USART1, '\n');
 8003816:	210a      	movs	r1, #10
 8003818:	4807      	ldr	r0, [pc, #28]	; (8003838 <UART1_sendcmd+0x78>)
 800381a:	f7ff fb34 	bl	8002e86 <LL_USART_TransmitData8>

		    // Vent til hele sendingen er fullført
		    while(!LL_USART_IsActiveFlag_TC(USART1)) {
 800381e:	bf00      	nop
 8003820:	4805      	ldr	r0, [pc, #20]	; (8003838 <UART1_sendcmd+0x78>)
 8003822:	f7ff fae2 	bl	8002dea <LL_USART_IsActiveFlag_TC>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f9      	beq.n	8003820 <UART1_sendcmd+0x60>

		    }
	}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40013800 	.word	0x40013800

0800383c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800383c:	480d      	ldr	r0, [pc, #52]	; (8003874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800383e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003840:	f7ff f89e 	bl	8002980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003844:	480c      	ldr	r0, [pc, #48]	; (8003878 <LoopForever+0x6>)
  ldr r1, =_edata
 8003846:	490d      	ldr	r1, [pc, #52]	; (800387c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <LoopForever+0xe>)
  movs r3, #0
 800384a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800384c:	e002      	b.n	8003854 <LoopCopyDataInit>

0800384e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800384e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003852:	3304      	adds	r3, #4

08003854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003858:	d3f9      	bcc.n	800384e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800385c:	4c0a      	ldr	r4, [pc, #40]	; (8003888 <LoopForever+0x16>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003860:	e001      	b.n	8003866 <LoopFillZerobss>

08003862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003864:	3204      	adds	r2, #4

08003866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003868:	d3fb      	bcc.n	8003862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800386a:	f008 f9e9 	bl	800bc40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800386e:	f7fe fb0b 	bl	8001e88 <main>

08003872 <LoopForever>:

LoopForever:
    b LoopForever
 8003872:	e7fe      	b.n	8003872 <LoopForever>
  ldr   r0, =_estack
 8003874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800387c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003880:	0800dd10 	.word	0x0800dd10
  ldr r2, =_sbss
 8003884:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003888:	20003670 	.word	0x20003670

0800388c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800388c:	e7fe      	b.n	800388c <ADC3_IRQHandler>

0800388e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003898:	2003      	movs	r0, #3
 800389a:	f002 f9ff 	bl	8005c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800389e:	200f      	movs	r0, #15
 80038a0:	f000 f80e 	bl	80038c0 <HAL_InitTick>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	71fb      	strb	r3, [r7, #7]
 80038ae:	e001      	b.n	80038b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038b0:	f7fe fc60 	bl	8002174 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038b4:	79fb      	ldrb	r3, [r7, #7]

}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_InitTick+0x68>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d022      	beq.n	800391a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_InitTick+0x6c>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_InitTick+0x68>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 fa0a 	bl	8005d02 <HAL_SYSTICK_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b0f      	cmp	r3, #15
 80038f8:	d809      	bhi.n	800390e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038fa:	2200      	movs	r2, #0
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003902:	f002 f9d6 	bl	8005cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_InitTick+0x70>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e007      	b.n	800391e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	e004      	b.n	800391e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e001      	b.n	800391e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000024 	.word	0x20000024
 800392c:	20000018 	.word	0x20000018
 8003930:	20000020 	.word	0x20000020

08003934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_IncTick+0x1c>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_IncTick+0x20>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4413      	add	r3, r2
 8003942:	4a03      	ldr	r2, [pc, #12]	; (8003950 <HAL_IncTick+0x1c>)
 8003944:	6013      	str	r3, [r2, #0]
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	20003520 	.word	0x20003520
 8003954:	20000024 	.word	0x20000024

08003958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return uwTick;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_GetTick+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20003520 	.word	0x20003520

08003970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003978:	f7ff ffee 	bl	8003958 <HAL_GetTick>
 800397c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d004      	beq.n	8003994 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_Delay+0x40>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003994:	bf00      	nop
 8003996:	f7ff ffdf 	bl	8003958 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d8f7      	bhi.n	8003996 <HAL_Delay+0x26>
  {
  }
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000024 	.word	0x20000024

080039b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3360      	adds	r3, #96	; 0x60
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <LL_ADC_SetOffset+0x44>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	03fff000 	.word	0x03fff000

08003a64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3360      	adds	r3, #96	; 0x60
 8003a72:	461a      	mov	r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3360      	adds	r3, #96	; 0x60
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3360      	adds	r3, #96	; 0x60
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3360      	adds	r3, #96	; 0x60
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	615a      	str	r2, [r3, #20]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3330      	adds	r3, #48	; 0x30
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	4413      	add	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	211f      	movs	r1, #31
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0e9b      	lsrs	r3, r3, #26
 8003bb6:	f003 011f 	and.w	r1, r3, #31
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	0e5b      	lsrs	r3, r3, #25
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	4413      	add	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	0d1b      	lsrs	r3, r3, #20
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2107      	movs	r1, #7
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	401a      	ands	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	0d1b      	lsrs	r3, r3, #20
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	431a      	orrs	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0318 	and.w	r3, r3, #24
 8003c76:	4908      	ldr	r1, [pc, #32]	; (8003c98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c78:	40d9      	lsrs	r1, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	400b      	ands	r3, r1
 8003c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c82:	431a      	orrs	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	0007ffff 	.word	0x0007ffff

08003c9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6093      	str	r3, [r2, #8]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0c:	d101      	bne.n	8003d12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d5c:	d101      	bne.n	8003d62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dac:	f043 0202 	orr.w	r2, r3, #2
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <LL_ADC_IsEnabled+0x18>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <LL_ADC_IsEnabled+0x1a>
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d101      	bne.n	8003dfe <LL_ADC_IsDisableOngoing+0x18>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <LL_ADC_IsDisableOngoing+0x1a>
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e48:	f043 0210 	orr.w	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d101      	bne.n	8003e74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d101      	bne.n	8003ec2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e1a9      	b.n	800423e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fd f8fd 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fef1 	bl	8003cf8 <LL_ADC_IsDeepPowerDownEnabled>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fed7 	bl	8003cd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ff0c 	bl	8003d48 <LL_ADC_IsInternalRegulatorEnabled>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d115      	bne.n	8003f62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fef0 	bl	8003d20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f40:	4b9c      	ldr	r3, [pc, #624]	; (80041b4 <HAL_ADC_Init+0x2e4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	4a9c      	ldr	r2, [pc, #624]	; (80041b8 <HAL_ADC_Init+0x2e8>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	3301      	adds	r3, #1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f54:	e002      	b.n	8003f5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f9      	bne.n	8003f56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff feee 	bl	8003d48 <LL_ADC_IsInternalRegulatorEnabled>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10d      	bne.n	8003f8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f76:	f043 0210 	orr.w	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ff62 	bl	8003e5c <LL_ADC_REG_IsConversionOngoing>
 8003f98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f040 8142 	bne.w	800422c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 813e 	bne.w	800422c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fb8:	f043 0202 	orr.w	r2, r3, #2
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fefb 	bl	8003dc0 <LL_ADC_IsEnabled>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d141      	bne.n	8004054 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fd8:	d004      	beq.n	8003fe4 <HAL_ADC_Init+0x114>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a77      	ldr	r2, [pc, #476]	; (80041bc <HAL_ADC_Init+0x2ec>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10f      	bne.n	8004004 <HAL_ADC_Init+0x134>
 8003fe4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003fe8:	f7ff feea 	bl	8003dc0 <LL_ADC_IsEnabled>
 8003fec:	4604      	mov	r4, r0
 8003fee:	4873      	ldr	r0, [pc, #460]	; (80041bc <HAL_ADC_Init+0x2ec>)
 8003ff0:	f7ff fee6 	bl	8003dc0 <LL_ADC_IsEnabled>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4323      	orrs	r3, r4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e012      	b.n	800402a <HAL_ADC_Init+0x15a>
 8004004:	486e      	ldr	r0, [pc, #440]	; (80041c0 <HAL_ADC_Init+0x2f0>)
 8004006:	f7ff fedb 	bl	8003dc0 <LL_ADC_IsEnabled>
 800400a:	4604      	mov	r4, r0
 800400c:	486d      	ldr	r0, [pc, #436]	; (80041c4 <HAL_ADC_Init+0x2f4>)
 800400e:	f7ff fed7 	bl	8003dc0 <LL_ADC_IsEnabled>
 8004012:	4603      	mov	r3, r0
 8004014:	431c      	orrs	r4, r3
 8004016:	486c      	ldr	r0, [pc, #432]	; (80041c8 <HAL_ADC_Init+0x2f8>)
 8004018:	f7ff fed2 	bl	8003dc0 <LL_ADC_IsEnabled>
 800401c:	4603      	mov	r3, r0
 800401e:	4323      	orrs	r3, r4
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d012      	beq.n	8004054 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004036:	d004      	beq.n	8004042 <HAL_ADC_Init+0x172>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a5f      	ldr	r2, [pc, #380]	; (80041bc <HAL_ADC_Init+0x2ec>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_ADC_Init+0x176>
 8004042:	4a62      	ldr	r2, [pc, #392]	; (80041cc <HAL_ADC_Init+0x2fc>)
 8004044:	e000      	b.n	8004048 <HAL_ADC_Init+0x178>
 8004046:	4a62      	ldr	r2, [pc, #392]	; (80041d0 <HAL_ADC_Init+0x300>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f7ff fcb0 	bl	80039b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	7f5b      	ldrb	r3, [r3, #29]
 8004058:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800405e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004064:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800406a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004072:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800407e:	2b01      	cmp	r3, #1
 8004080:	d106      	bne.n	8004090 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	045b      	lsls	r3, r3, #17
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d009      	beq.n	80040ac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <HAL_ADC_Init+0x304>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	69b9      	ldr	r1, [r7, #24]
 80040bc:	430b      	orrs	r3, r1
 80040be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fee5 	bl	8003eaa <LL_ADC_INJ_IsConversionOngoing>
 80040e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d17f      	bne.n	80041e8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d17c      	bne.n	80041e8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80040f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410a:	f023 0302 	bic.w	r3, r3, #2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	430b      	orrs	r3, r1
 8004116:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800412e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004138:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800413c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6911      	ldr	r1, [r2, #16]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	430b      	orrs	r3, r1
 800414a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800414e:	e013      	b.n	8004178 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800415e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004170:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004174:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800417e:	2b01      	cmp	r3, #1
 8004180:	d12a      	bne.n	80041d8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041a4:	430a      	orrs	r2, r1
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	611a      	str	r2, [r3, #16]
 80041b2:	e019      	b.n	80041e8 <HAL_ADC_Init+0x318>
 80041b4:	20000018 	.word	0x20000018
 80041b8:	053e2d63 	.word	0x053e2d63
 80041bc:	50000100 	.word	0x50000100
 80041c0:	50000400 	.word	0x50000400
 80041c4:	50000500 	.word	0x50000500
 80041c8:	50000600 	.word	0x50000600
 80041cc:	50000300 	.word	0x50000300
 80041d0:	50000700 	.word	0x50000700
 80041d4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0201 	bic.w	r2, r2, #1
 80041e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10c      	bne.n	800420a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f023 010f 	bic.w	r1, r3, #15
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	1e5a      	subs	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
 8004208:	e007      	b.n	800421a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 020f 	bic.w	r2, r2, #15
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	f023 0303 	bic.w	r3, r3, #3
 8004222:	f043 0201 	orr.w	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	65da      	str	r2, [r3, #92]	; 0x5c
 800422a:	e007      	b.n	800423c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	f043 0210 	orr.w	r2, r3, #16
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800423c:	7ffb      	ldrb	r3, [r7, #31]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3724      	adds	r7, #36	; 0x24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd90      	pop	{r4, r7, pc}
 8004246:	bf00      	nop

08004248 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800425c:	d004      	beq.n	8004268 <HAL_ADC_Start_DMA+0x20>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a5a      	ldr	r2, [pc, #360]	; (80043cc <HAL_ADC_Start_DMA+0x184>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_ADC_Start_DMA+0x24>
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_ADC_Start_DMA+0x188>)
 800426a:	e000      	b.n	800426e <HAL_ADC_Start_DMA+0x26>
 800426c:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_ADC_Start_DMA+0x18c>)
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fd14 	bl	8003c9c <LL_ADC_GetMultimode>
 8004274:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fdee 	bl	8003e5c <LL_ADC_REG_IsConversionOngoing>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 809b 	bne.w	80043be <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_ADC_Start_DMA+0x4e>
 8004292:	2302      	movs	r3, #2
 8004294:	e096      	b.n	80043c4 <HAL_ADC_Start_DMA+0x17c>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a4d      	ldr	r2, [pc, #308]	; (80043d8 <HAL_ADC_Start_DMA+0x190>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d008      	beq.n	80042ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d002      	beq.n	80042ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b09      	cmp	r3, #9
 80042b8:	d17a      	bne.n	80043b0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 f874 	bl	80053a8 <ADC_Enable>
 80042c0:	4603      	mov	r3, r0
 80042c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d16d      	bne.n	80043a6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a3a      	ldr	r2, [pc, #232]	; (80043cc <HAL_ADC_Start_DMA+0x184>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_ADC_Start_DMA+0xb4>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3b      	ldr	r2, [pc, #236]	; (80043dc <HAL_ADC_Start_DMA+0x194>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d002      	beq.n	80042f8 <HAL_ADC_Start_DMA+0xb0>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	e003      	b.n	8004300 <HAL_ADC_Start_DMA+0xb8>
 80042f8:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <HAL_ADC_Start_DMA+0x198>)
 80042fa:	e001      	b.n	8004300 <HAL_ADC_Start_DMA+0xb8>
 80042fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	4293      	cmp	r3, r2
 8004306:	d002      	beq.n	800430e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432a:	f023 0206 	bic.w	r2, r3, #6
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	661a      	str	r2, [r3, #96]	; 0x60
 8004332:	e002      	b.n	800433a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <HAL_ADC_Start_DMA+0x19c>)
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	4a28      	ldr	r2, [pc, #160]	; (80043e8 <HAL_ADC_Start_DMA+0x1a0>)
 8004348:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	4a27      	ldr	r2, [pc, #156]	; (80043ec <HAL_ADC_Start_DMA+0x1a4>)
 8004350:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	221c      	movs	r2, #28
 8004358:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0210 	orr.w	r2, r2, #16
 8004370:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3340      	adds	r3, #64	; 0x40
 800438c:	4619      	mov	r1, r3
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f001 fe5d 	bl	8006050 <HAL_DMA_Start_IT>
 8004396:	4603      	mov	r3, r0
 8004398:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fd34 	bl	8003e0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80043a4:	e00d      	b.n	80043c2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80043ae:	e008      	b.n	80043c2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80043bc:	e001      	b.n	80043c2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043be:	2302      	movs	r3, #2
 80043c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	50000100 	.word	0x50000100
 80043d0:	50000300 	.word	0x50000300
 80043d4:	50000700 	.word	0x50000700
 80043d8:	50000600 	.word	0x50000600
 80043dc:	50000500 	.word	0x50000500
 80043e0:	50000400 	.word	0x50000400
 80043e4:	08005593 	.word	0x08005593
 80043e8:	0800566b 	.word	0x0800566b
 80043ec:	08005687 	.word	0x08005687

080043f0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_ADC_Stop_DMA+0x16>
 8004402:	2302      	movs	r3, #2
 8004404:	e051      	b.n	80044aa <HAL_ADC_Stop_DMA+0xba>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800440e:	2103      	movs	r1, #3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 ff0d 	bl	8005230 <ADC_ConversionStop>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d13f      	bne.n	80044a0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d10f      	bne.n	800445e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	4618      	mov	r0, r3
 8004444:	f001 fe7f 	bl	8006146 <HAL_DMA_Abort>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0210 	bic.w	r2, r2, #16
 800446c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f001 f82d 	bl	80054d4 <ADC_Disable>
 800447a:	4603      	mov	r3, r0
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	e002      	b.n	8004486 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f001 f827 	bl	80054d4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d8:	d004      	beq.n	80044e4 <HAL_ADC_IRQHandler+0x30>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a8e      	ldr	r2, [pc, #568]	; (8004718 <HAL_ADC_IRQHandler+0x264>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_IRQHandler+0x34>
 80044e4:	4b8d      	ldr	r3, [pc, #564]	; (800471c <HAL_ADC_IRQHandler+0x268>)
 80044e6:	e000      	b.n	80044ea <HAL_ADC_IRQHandler+0x36>
 80044e8:	4b8d      	ldr	r3, [pc, #564]	; (8004720 <HAL_ADC_IRQHandler+0x26c>)
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fbd6 	bl	8003c9c <LL_ADC_GetMultimode>
 80044f0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d017      	beq.n	800452c <HAL_ADC_IRQHandler+0x78>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d012      	beq.n	800452c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004516:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f001 f9a8 	bl	8005874 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2202      	movs	r2, #2
 800452a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <HAL_ADC_IRQHandler+0x8c>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8094 	beq.w	8004674 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 808e 	beq.w	8004674 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff faef 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d072      	beq.n	8004666 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a64      	ldr	r2, [pc, #400]	; (8004718 <HAL_ADC_IRQHandler+0x264>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_ADC_IRQHandler+0xea>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a65      	ldr	r2, [pc, #404]	; (8004724 <HAL_ADC_IRQHandler+0x270>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d002      	beq.n	800459a <HAL_ADC_IRQHandler+0xe6>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	e003      	b.n	80045a2 <HAL_ADC_IRQHandler+0xee>
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_ADC_IRQHandler+0x274>)
 800459c:	e001      	b.n	80045a2 <HAL_ADC_IRQHandler+0xee>
 800459e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d008      	beq.n	80045bc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d002      	beq.n	80045bc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b09      	cmp	r3, #9
 80045ba:	d104      	bne.n	80045c6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	e014      	b.n	80045f0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a53      	ldr	r2, [pc, #332]	; (8004718 <HAL_ADC_IRQHandler+0x264>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_ADC_IRQHandler+0x130>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a53      	ldr	r2, [pc, #332]	; (8004724 <HAL_ADC_IRQHandler+0x270>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d002      	beq.n	80045e0 <HAL_ADC_IRQHandler+0x12c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	e003      	b.n	80045e8 <HAL_ADC_IRQHandler+0x134>
 80045e0:	4b51      	ldr	r3, [pc, #324]	; (8004728 <HAL_ADC_IRQHandler+0x274>)
 80045e2:	e001      	b.n	80045e8 <HAL_ADC_IRQHandler+0x134>
 80045e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045e8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d135      	bne.n	8004666 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d12e      	bne.n	8004666 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fc25 	bl	8003e5c <LL_ADC_REG_IsConversionOngoing>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d11a      	bne.n	800464e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 020c 	bic.w	r2, r2, #12
 8004626:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d112      	bne.n	8004666 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	65da      	str	r2, [r3, #92]	; 0x5c
 800464c:	e00b      	b.n	8004666 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	f043 0210 	orr.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	f043 0201 	orr.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd fcc8 	bl	8001ffc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	220c      	movs	r2, #12
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <HAL_ADC_IRQHandler+0x1d4>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80b3 	beq.w	80047fa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80ad 	beq.w	80047fa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fa8a 	bl	8003bd6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80046c2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fa45 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046ce:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a10      	ldr	r2, [pc, #64]	; (8004718 <HAL_ADC_IRQHandler+0x264>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_ADC_IRQHandler+0x23a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a11      	ldr	r2, [pc, #68]	; (8004724 <HAL_ADC_IRQHandler+0x270>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d002      	beq.n	80046ea <HAL_ADC_IRQHandler+0x236>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	e003      	b.n	80046f2 <HAL_ADC_IRQHandler+0x23e>
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <HAL_ADC_IRQHandler+0x274>)
 80046ec:	e001      	b.n	80046f2 <HAL_ADC_IRQHandler+0x23e>
 80046ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d008      	beq.n	800470c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b06      	cmp	r3, #6
 8004704:	d002      	beq.n	800470c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b07      	cmp	r3, #7
 800470a:	d10f      	bne.n	800472c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	623b      	str	r3, [r7, #32]
 8004714:	e01f      	b.n	8004756 <HAL_ADC_IRQHandler+0x2a2>
 8004716:	bf00      	nop
 8004718:	50000100 	.word	0x50000100
 800471c:	50000300 	.word	0x50000300
 8004720:	50000700 	.word	0x50000700
 8004724:	50000500 	.word	0x50000500
 8004728:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a8b      	ldr	r2, [pc, #556]	; (8004960 <HAL_ADC_IRQHandler+0x4ac>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_ADC_IRQHandler+0x296>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a8a      	ldr	r2, [pc, #552]	; (8004964 <HAL_ADC_IRQHandler+0x4b0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d002      	beq.n	8004746 <HAL_ADC_IRQHandler+0x292>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	e003      	b.n	800474e <HAL_ADC_IRQHandler+0x29a>
 8004746:	4b88      	ldr	r3, [pc, #544]	; (8004968 <HAL_ADC_IRQHandler+0x4b4>)
 8004748:	e001      	b.n	800474e <HAL_ADC_IRQHandler+0x29a>
 800474a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800474e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d047      	beq.n	80047ec <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_ADC_IRQHandler+0x2c2>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d03f      	beq.n	80047ec <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d13a      	bne.n	80047ec <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d133      	bne.n	80047ec <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d12e      	bne.n	80047ec <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fb89 	bl	8003eaa <LL_ADC_INJ_IsConversionOngoing>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d11a      	bne.n	80047d4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047ac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d112      	bne.n	80047ec <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80047d2:	e00b      	b.n	80047ec <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d8:	f043 0210 	orr.w	r2, r3, #16
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	f043 0201 	orr.w	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 f819 	bl	8005824 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2260      	movs	r2, #96	; 0x60
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d011      	beq.n	8004828 <HAL_ADC_IRQHandler+0x374>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004812:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8b4 	bl	8004988 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2280      	movs	r2, #128	; 0x80
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d012      	beq.n	8004858 <HAL_ADC_IRQHandler+0x3a4>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00d      	beq.n	8004858 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 ffff 	bl	800584c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004856:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <HAL_ADC_IRQHandler+0x3d4>
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00d      	beq.n	8004888 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fff1 	bl	8005860 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004886:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	d043      	beq.n	800491a <HAL_ADC_IRQHandler+0x466>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03e      	beq.n	800491a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80048a4:	2301      	movs	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
 80048a8:	e021      	b.n	80048ee <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048b8:	d004      	beq.n	80048c4 <HAL_ADC_IRQHandler+0x410>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a28      	ldr	r2, [pc, #160]	; (8004960 <HAL_ADC_IRQHandler+0x4ac>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_ADC_IRQHandler+0x414>
 80048c4:	4b29      	ldr	r3, [pc, #164]	; (800496c <HAL_ADC_IRQHandler+0x4b8>)
 80048c6:	e000      	b.n	80048ca <HAL_ADC_IRQHandler+0x416>
 80048c8:	4b29      	ldr	r3, [pc, #164]	; (8004970 <HAL_ADC_IRQHandler+0x4bc>)
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f9f4 	bl	8003cb8 <LL_ADC_GetMultiDMATransfer>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80048d6:	2301      	movs	r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	e008      	b.n	80048ee <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80048ea:	2301      	movs	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10e      	bne.n	8004912 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	f043 0202 	orr.w	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f845 	bl	800499c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2210      	movs	r2, #16
 8004918:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d018      	beq.n	8004956 <HAL_ADC_IRQHandler+0x4a2>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492a:	2b00      	cmp	r3, #0
 800492c:	d013      	beq.n	8004956 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800494e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 ff71 	bl	8005838 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004956:	bf00      	nop
 8004958:	3728      	adds	r7, #40	; 0x28
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	50000100 	.word	0x50000100
 8004964:	50000500 	.word	0x50000500
 8004968:	50000400 	.word	0x50000400
 800496c:	50000300 	.word	0x50000300
 8004970:	50000700 	.word	0x50000700

08004974 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b0b6      	sub	sp, #216	; 0xd8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d102      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x24>
 80049ce:	2302      	movs	r3, #2
 80049d0:	f000 bc13 	b.w	80051fa <HAL_ADC_ConfigChannel+0x84a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fa3b 	bl	8003e5c <LL_ADC_REG_IsConversionOngoing>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 83f3 	bne.w	80051d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f7ff f8bf 	bl	8003b7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fa29 	bl	8003e5c <LL_ADC_REG_IsConversionOngoing>
 8004a0a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fa49 	bl	8003eaa <LL_ADC_INJ_IsConversionOngoing>
 8004a18:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f040 81d9 	bne.w	8004dd8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 81d4 	bne.w	8004dd8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a38:	d10f      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	4619      	mov	r1, r3
 8004a46:	f7ff f8d9 	bl	8003bfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff f86d 	bl	8003b32 <LL_ADC_SetSamplingTimeCommonConfig>
 8004a58:	e00e      	b.n	8004a78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7ff f8c8 	bl	8003bfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2100      	movs	r1, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff f85d 	bl	8003b32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d022      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6919      	ldr	r1, [r3, #16]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aaa:	f7fe ffb7 	bl	8003a1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6919      	ldr	r1, [r3, #16]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f7ff f803 	bl	8003ac6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d102      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x126>
 8004ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ad4:	e000      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x128>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f7ff f80f 	bl	8003afc <LL_ADC_SetOffsetSaturation>
 8004ade:	e17b      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe ffbc 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x15c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe ffb1 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004b02:	4603      	mov	r3, r0
 8004b04:	0e9b      	lsrs	r3, r3, #26
 8004b06:	f003 021f 	and.w	r2, r3, #31
 8004b0a:	e01e      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x19a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe ffa6 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8004b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x18e>
    return 32U;
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	e004      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x198>
  return __builtin_clz(value);
 8004b3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x1b2>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	0e9b      	lsrs	r3, r3, #26
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	e018      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x1e4>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004b86:	2320      	movs	r3, #32
 8004b88:	e004      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b8e:	fab3 f383 	clz	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d106      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe ff75 	bl	8003a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2101      	movs	r1, #1
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe ff59 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <HAL_ADC_ConfigChannel+0x222>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe ff4e 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	0e9b      	lsrs	r3, r3, #26
 8004bcc:	f003 021f 	and.w	r2, r3, #31
 8004bd0:	e01e      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x260>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe ff43 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004bf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004c00:	2320      	movs	r3, #32
 8004c02:	e004      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x278>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	0e9b      	lsrs	r3, r3, #26
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	e018      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x2aa>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004c3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	e004      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c54:	fab3 f383 	clz	r3, r3
 8004c58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d106      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2200      	movs	r2, #0
 8004c64:	2101      	movs	r1, #1
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe ff12 	bl	8003a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2102      	movs	r1, #2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fef6 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x2e8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2102      	movs	r1, #2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fe feeb 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	0e9b      	lsrs	r3, r3, #26
 8004c92:	f003 021f 	and.w	r2, r3, #31
 8004c96:	e01e      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x326>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fee0 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	e004      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x33e>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	0e9b      	lsrs	r3, r3, #26
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	e016      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x36c>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cfa:	fa93 f3a3 	rbit	r3, r3
 8004cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004d0e:	2320      	movs	r3, #32
 8004d10:	e004      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d106      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2102      	movs	r1, #2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe feb1 	bl	8003a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2103      	movs	r1, #3
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe fe95 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x3aa>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2103      	movs	r1, #3
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe fe8a 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004d50:	4603      	mov	r3, r0
 8004d52:	0e9b      	lsrs	r3, r3, #26
 8004d54:	f003 021f 	and.w	r2, r3, #31
 8004d58:	e017      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x3da>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2103      	movs	r1, #3
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe fe7f 	bl	8003a64 <LL_ADC_GetOffsetChannel>
 8004d66:	4603      	mov	r3, r0
 8004d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d74:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	e003      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_ADC_ConfigChannel+0x3f2>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	0e9b      	lsrs	r3, r3, #26
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	e011      	b.n	8004dc6 <HAL_ADC_ConfigChannel+0x416>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004daa:	fa93 f3a3 	rbit	r3, r3
 8004dae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004dba:	2320      	movs	r3, #32
 8004dbc:	e003      	b.n	8004dc6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	fab3 f383 	clz	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d106      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2103      	movs	r1, #3
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fe5c 	bl	8003a90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe ffef 	bl	8003dc0 <LL_ADC_IsEnabled>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f040 813d 	bne.w	8005064 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f7fe ff2c 	bl	8003c54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4aa2      	ldr	r2, [pc, #648]	; (800508c <HAL_ADC_ConfigChannel+0x6dc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f040 812e 	bne.w	8005064 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x480>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	0e9b      	lsrs	r3, r3, #26
 8004e1e:	3301      	adds	r3, #1
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	2b09      	cmp	r3, #9
 8004e26:	bf94      	ite	ls
 8004e28:	2301      	movls	r3, #1
 8004e2a:	2300      	movhi	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e019      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x4b4>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004e48:	2320      	movs	r3, #32
 8004e4a:	e003      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e4e:	fab3 f383 	clz	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	3301      	adds	r3, #1
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	bf94      	ite	ls
 8004e5e:	2301      	movls	r3, #1
 8004e60:	2300      	movhi	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d079      	beq.n	8004f5c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d107      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x4d4>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	0e9b      	lsrs	r3, r3, #26
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	069b      	lsls	r3, r3, #26
 8004e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e82:	e015      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x500>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8c:	fa93 f3a3 	rbit	r3, r3
 8004e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	e003      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea2:	fab3 f383 	clz	r3, r3
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	069b      	lsls	r3, r3, #26
 8004eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x520>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0e9b      	lsrs	r3, r3, #26
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	2101      	movs	r1, #1
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	e017      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x550>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed8:	fa93 f3a3 	rbit	r3, r3
 8004edc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004ee8:	2320      	movs	r3, #32
 8004eea:	e003      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eee:	fab3 f383 	clz	r3, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2101      	movs	r1, #1
 8004efc:	fa01 f303 	lsl.w	r3, r1, r3
 8004f00:	ea42 0103 	orr.w	r1, r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x576>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	0e9b      	lsrs	r3, r3, #26
 8004f16:	3301      	adds	r3, #1
 8004f18:	f003 021f 	and.w	r2, r3, #31
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	051b      	lsls	r3, r3, #20
 8004f24:	e018      	b.n	8004f58 <HAL_ADC_ConfigChannel+0x5a8>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	fa93 f3a3 	rbit	r3, r3
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004f3e:	2320      	movs	r3, #32
 8004f40:	e003      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f44:	fab3 f383 	clz	r3, r3
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f003 021f 	and.w	r2, r3, #31
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	e07e      	b.n	800505a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d107      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x5c8>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	0e9b      	lsrs	r3, r3, #26
 8004f6e:	3301      	adds	r3, #1
 8004f70:	069b      	lsls	r3, r3, #26
 8004f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f76:	e015      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x5f4>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	fa93 f3a3 	rbit	r3, r3
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004f90:	2320      	movs	r3, #32
 8004f92:	e003      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	fab3 f383 	clz	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	069b      	lsls	r3, r3, #26
 8004fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x614>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	0e9b      	lsrs	r3, r3, #26
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc2:	e017      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x644>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	fa93 f3a3 	rbit	r3, r3
 8004fd0:	61fb      	str	r3, [r7, #28]
  return result;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004fdc:	2320      	movs	r3, #32
 8004fde:	e003      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	fab3 f383 	clz	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2101      	movs	r1, #1
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	ea42 0103 	orr.w	r1, r2, r3
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10d      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x670>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	0e9b      	lsrs	r3, r3, #26
 800500a:	3301      	adds	r3, #1
 800500c:	f003 021f 	and.w	r2, r3, #31
 8005010:	4613      	mov	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4413      	add	r3, r2
 8005016:	3b1e      	subs	r3, #30
 8005018:	051b      	lsls	r3, r3, #20
 800501a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800501e:	e01b      	b.n	8005058 <HAL_ADC_ConfigChannel+0x6a8>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	fa93 f3a3 	rbit	r3, r3
 800502c:	613b      	str	r3, [r7, #16]
  return result;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005038:	2320      	movs	r3, #32
 800503a:	e003      	b.n	8005044 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	3301      	adds	r3, #1
 8005046:	f003 021f 	and.w	r2, r3, #31
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	3b1e      	subs	r3, #30
 8005052:	051b      	lsls	r3, r3, #20
 8005054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005058:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800505e:	4619      	mov	r1, r3
 8005060:	f7fe fdcc 	bl	8003bfc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_ADC_ConfigChannel+0x6e0>)
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80be 	beq.w	80051ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800507a:	d004      	beq.n	8005086 <HAL_ADC_ConfigChannel+0x6d6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a04      	ldr	r2, [pc, #16]	; (8005094 <HAL_ADC_ConfigChannel+0x6e4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10a      	bne.n	800509c <HAL_ADC_ConfigChannel+0x6ec>
 8005086:	4b04      	ldr	r3, [pc, #16]	; (8005098 <HAL_ADC_ConfigChannel+0x6e8>)
 8005088:	e009      	b.n	800509e <HAL_ADC_ConfigChannel+0x6ee>
 800508a:	bf00      	nop
 800508c:	407f0000 	.word	0x407f0000
 8005090:	80080000 	.word	0x80080000
 8005094:	50000100 	.word	0x50000100
 8005098:	50000300 	.word	0x50000300
 800509c:	4b59      	ldr	r3, [pc, #356]	; (8005204 <HAL_ADC_ConfigChannel+0x854>)
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fcae 	bl	8003a00 <LL_ADC_GetCommonPathInternalCh>
 80050a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a56      	ldr	r2, [pc, #344]	; (8005208 <HAL_ADC_ConfigChannel+0x858>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_ADC_ConfigChannel+0x70c>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a55      	ldr	r2, [pc, #340]	; (800520c <HAL_ADC_ConfigChannel+0x85c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d13a      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d134      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d0:	d005      	beq.n	80050de <HAL_ADC_ConfigChannel+0x72e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4e      	ldr	r2, [pc, #312]	; (8005210 <HAL_ADC_ConfigChannel+0x860>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	f040 8085 	bne.w	80051e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e6:	d004      	beq.n	80050f2 <HAL_ADC_ConfigChannel+0x742>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a49      	ldr	r2, [pc, #292]	; (8005214 <HAL_ADC_ConfigChannel+0x864>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x746>
 80050f2:	4a49      	ldr	r2, [pc, #292]	; (8005218 <HAL_ADC_ConfigChannel+0x868>)
 80050f4:	e000      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x748>
 80050f6:	4a43      	ldr	r2, [pc, #268]	; (8005204 <HAL_ADC_ConfigChannel+0x854>)
 80050f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f7fe fc69 	bl	80039da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005108:	4b44      	ldr	r3, [pc, #272]	; (800521c <HAL_ADC_ConfigChannel+0x86c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	099b      	lsrs	r3, r3, #6
 800510e:	4a44      	ldr	r2, [pc, #272]	; (8005220 <HAL_ADC_ConfigChannel+0x870>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005122:	e002      	b.n	800512a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3b01      	subs	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f9      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005130:	e05a      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a3b      	ldr	r2, [pc, #236]	; (8005224 <HAL_ADC_ConfigChannel+0x874>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d125      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800513c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11f      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a31      	ldr	r2, [pc, #196]	; (8005214 <HAL_ADC_ConfigChannel+0x864>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d104      	bne.n	800515c <HAL_ADC_ConfigChannel+0x7ac>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a34      	ldr	r2, [pc, #208]	; (8005228 <HAL_ADC_ConfigChannel+0x878>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d047      	beq.n	80051ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005164:	d004      	beq.n	8005170 <HAL_ADC_ConfigChannel+0x7c0>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <HAL_ADC_ConfigChannel+0x864>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x7c4>
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <HAL_ADC_ConfigChannel+0x868>)
 8005172:	e000      	b.n	8005176 <HAL_ADC_ConfigChannel+0x7c6>
 8005174:	4a23      	ldr	r2, [pc, #140]	; (8005204 <HAL_ADC_ConfigChannel+0x854>)
 8005176:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800517a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe fc2a 	bl	80039da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005186:	e031      	b.n	80051ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a27      	ldr	r2, [pc, #156]	; (800522c <HAL_ADC_ConfigChannel+0x87c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d12d      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d127      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <HAL_ADC_ConfigChannel+0x864>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d022      	beq.n	80051ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b0:	d004      	beq.n	80051bc <HAL_ADC_ConfigChannel+0x80c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a17      	ldr	r2, [pc, #92]	; (8005214 <HAL_ADC_ConfigChannel+0x864>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d101      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x810>
 80051bc:	4a16      	ldr	r2, [pc, #88]	; (8005218 <HAL_ADC_ConfigChannel+0x868>)
 80051be:	e000      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x812>
 80051c0:	4a10      	ldr	r2, [pc, #64]	; (8005204 <HAL_ADC_ConfigChannel+0x854>)
 80051c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f7fe fc04 	bl	80039da <LL_ADC_SetCommonPathInternalCh>
 80051d2:	e00c      	b.n	80051ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80051e6:	e002      	b.n	80051ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80051f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	37d8      	adds	r7, #216	; 0xd8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	50000700 	.word	0x50000700
 8005208:	c3210000 	.word	0xc3210000
 800520c:	90c00010 	.word	0x90c00010
 8005210:	50000600 	.word	0x50000600
 8005214:	50000100 	.word	0x50000100
 8005218:	50000300 	.word	0x50000300
 800521c:	20000018 	.word	0x20000018
 8005220:	053e2d63 	.word	0x053e2d63
 8005224:	c7520000 	.word	0xc7520000
 8005228:	50000500 	.word	0x50000500
 800522c:	cb840000 	.word	0xcb840000

08005230 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fe08 	bl	8003e5c <LL_ADC_REG_IsConversionOngoing>
 800524c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fe29 	bl	8003eaa <LL_ADC_INJ_IsConversionOngoing>
 8005258:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d103      	bne.n	8005268 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8098 	beq.w	8005398 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d02a      	beq.n	80052cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7f5b      	ldrb	r3, [r3, #29]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d126      	bne.n	80052cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7f1b      	ldrb	r3, [r3, #28]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d122      	bne.n	80052cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005286:	2301      	movs	r3, #1
 8005288:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800528a:	e014      	b.n	80052b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4a45      	ldr	r2, [pc, #276]	; (80053a4 <ADC_ConversionStop+0x174>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d90d      	bls.n	80052b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	f043 0210 	orr.w	r2, r3, #16
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a4:	f043 0201 	orr.w	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e074      	b.n	800539a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d1e3      	bne.n	800528c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2240      	movs	r2, #64	; 0x40
 80052ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d014      	beq.n	80052fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe fdc0 	bl	8003e5c <LL_ADC_REG_IsConversionOngoing>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00c      	beq.n	80052fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fd7d 	bl	8003de6 <LL_ADC_IsDisableOngoing>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fd9c 	bl	8003e34 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d014      	beq.n	800532c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe fdcf 	bl	8003eaa <LL_ADC_INJ_IsConversionOngoing>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fd65 	bl	8003de6 <LL_ADC_IsDisableOngoing>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fdab 	bl	8003e82 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d005      	beq.n	800533e <ADC_ConversionStop+0x10e>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b03      	cmp	r3, #3
 8005336:	d105      	bne.n	8005344 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005338:	230c      	movs	r3, #12
 800533a:	617b      	str	r3, [r7, #20]
        break;
 800533c:	e005      	b.n	800534a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800533e:	2308      	movs	r3, #8
 8005340:	617b      	str	r3, [r7, #20]
        break;
 8005342:	e002      	b.n	800534a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005344:	2304      	movs	r3, #4
 8005346:	617b      	str	r3, [r7, #20]
        break;
 8005348:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800534a:	f7fe fb05 	bl	8003958 <HAL_GetTick>
 800534e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005350:	e01b      	b.n	800538a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005352:	f7fe fb01 	bl	8003958 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b05      	cmp	r3, #5
 800535e:	d914      	bls.n	800538a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005372:	f043 0210 	orr.w	r2, r3, #16
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537e:	f043 0201 	orr.w	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e007      	b.n	800539a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1dc      	bne.n	8005352 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	a33fffff 	.word	0xa33fffff

080053a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe fd01 	bl	8003dc0 <LL_ADC_IsEnabled>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d176      	bne.n	80054b2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	4b3c      	ldr	r3, [pc, #240]	; (80054bc <ADC_Enable+0x114>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d6:	f043 0210 	orr.w	r2, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e2:	f043 0201 	orr.w	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e062      	b.n	80054b4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fcbc 	bl	8003d70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005400:	d004      	beq.n	800540c <ADC_Enable+0x64>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a2e      	ldr	r2, [pc, #184]	; (80054c0 <ADC_Enable+0x118>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d101      	bne.n	8005410 <ADC_Enable+0x68>
 800540c:	4b2d      	ldr	r3, [pc, #180]	; (80054c4 <ADC_Enable+0x11c>)
 800540e:	e000      	b.n	8005412 <ADC_Enable+0x6a>
 8005410:	4b2d      	ldr	r3, [pc, #180]	; (80054c8 <ADC_Enable+0x120>)
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe faf4 	bl	8003a00 <LL_ADC_GetCommonPathInternalCh>
 8005418:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800541a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005422:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <ADC_Enable+0x124>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	4a29      	ldr	r2, [pc, #164]	; (80054d0 <ADC_Enable+0x128>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	099b      	lsrs	r3, r3, #6
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	4613      	mov	r3, r2
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800543c:	e002      	b.n	8005444 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3b01      	subs	r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f9      	bne.n	800543e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800544a:	f7fe fa85 	bl	8003958 <HAL_GetTick>
 800544e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005450:	e028      	b.n	80054a4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe fcb2 	bl	8003dc0 <LL_ADC_IsEnabled>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7fe fc82 	bl	8003d70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800546c:	f7fe fa74 	bl	8003958 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d914      	bls.n	80054a4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d00d      	beq.n	80054a4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548c:	f043 0210 	orr.w	r2, r3, #16
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e007      	b.n	80054b4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d1cf      	bne.n	8005452 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	8000003f 	.word	0x8000003f
 80054c0:	50000100 	.word	0x50000100
 80054c4:	50000300 	.word	0x50000300
 80054c8:	50000700 	.word	0x50000700
 80054cc:	20000018 	.word	0x20000018
 80054d0:	053e2d63 	.word	0x053e2d63

080054d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fe fc80 	bl	8003de6 <LL_ADC_IsDisableOngoing>
 80054e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe fc67 	bl	8003dc0 <LL_ADC_IsEnabled>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d047      	beq.n	8005588 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d144      	bne.n	8005588 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 030d 	and.w	r3, r3, #13
 8005508:	2b01      	cmp	r3, #1
 800550a:	d10c      	bne.n	8005526 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe fc41 	bl	8003d98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2203      	movs	r2, #3
 800551c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800551e:	f7fe fa1b 	bl	8003958 <HAL_GetTick>
 8005522:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005524:	e029      	b.n	800557a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552a:	f043 0210 	orr.w	r2, r3, #16
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005536:	f043 0201 	orr.w	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e023      	b.n	800558a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005542:	f7fe fa09 	bl	8003958 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d914      	bls.n	800557a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005562:	f043 0210 	orr.w	r2, r3, #16
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556e:	f043 0201 	orr.w	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e007      	b.n	800558a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1dc      	bne.n	8005542 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d14b      	bne.n	8005644 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d021      	beq.n	800560a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fac4 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d032      	beq.n	800563c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d12b      	bne.n	800563c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d11f      	bne.n	800563c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	f043 0201 	orr.w	r2, r3, #1
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	65da      	str	r2, [r3, #92]	; 0x5c
 8005608:	e018      	b.n	800563c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d111      	bne.n	800563c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d105      	bne.n	800563c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7fc fcdd 	bl	8001ffc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005642:	e00e      	b.n	8005662 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff f9a3 	bl	800499c <HAL_ADC_ErrorCallback>
}
 8005656:	e004      	b.n	8005662 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
}
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff f97b 	bl	8004974 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a4:	f043 0204 	orr.w	r2, r3, #4
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff f975 	bl	800499c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <LL_ADC_IsEnabled>:
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <LL_ADC_IsEnabled+0x18>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <LL_ADC_IsEnabled+0x1a>
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <LL_ADC_StartCalibration>:
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80056f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <LL_ADC_IsCalibrationOnGoing>:
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005726:	d101      	bne.n	800572c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <LL_ADC_REG_IsConversionOngoing>:
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b04      	cmp	r3, #4
 800574c:	d101      	bne.n	8005752 <LL_ADC_REG_IsConversionOngoing+0x18>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_ADCEx_Calibration_Start+0x1c>
 8005778:	2302      	movs	r3, #2
 800577a:	e04d      	b.n	8005818 <HAL_ADCEx_Calibration_Start+0xb8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff fea5 	bl	80054d4 <ADC_Disable>
 800578a:	4603      	mov	r3, r0
 800578c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d136      	bne.n	8005802 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800579c:	f023 0302 	bic.w	r3, r3, #2
 80057a0:	f043 0202 	orr.w	r2, r3, #2
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff ff96 	bl	80056e0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057b4:	e014      	b.n	80057e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_ADCEx_Calibration_Start+0xc0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d90d      	bls.n	80057e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c8:	f023 0312 	bic.w	r3, r3, #18
 80057cc:	f043 0210 	orr.w	r2, r3, #16
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e01b      	b.n	8005818 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff ff94 	bl	8005712 <LL_ADC_IsCalibrationOnGoing>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e2      	bne.n	80057b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f4:	f023 0303 	bic.w	r3, r3, #3
 80057f8:	f043 0201 	orr.w	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005800:	e005      	b.n	800580e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005806:	f043 0210 	orr.w	r2, r3, #16
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	0004de01 	.word	0x0004de01

08005824 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005888:	b590      	push	{r4, r7, lr}
 800588a:	b0a1      	sub	sp, #132	; 0x84
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e0e7      	b.n	8005a76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80058ae:	2300      	movs	r3, #0
 80058b0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80058b2:	2300      	movs	r3, #0
 80058b4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058be:	d102      	bne.n	80058c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80058c0:	4b6f      	ldr	r3, [pc, #444]	; (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	e009      	b.n	80058da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6e      	ldr	r2, [pc, #440]	; (8005a84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d102      	bne.n	80058d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80058d0:	4b6d      	ldr	r3, [pc, #436]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80058d2:	60bb      	str	r3, [r7, #8]
 80058d4:	e001      	b.n	80058da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10b      	bne.n	80058f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0be      	b.n	8005a76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff1d 	bl	800573a <LL_ADC_REG_IsConversionOngoing>
 8005900:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff ff17 	bl	800573a <LL_ADC_REG_IsConversionOngoing>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 80a0 	bne.w	8005a54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 809c 	bne.w	8005a54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005924:	d004      	beq.n	8005930 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a55      	ldr	r2, [pc, #340]	; (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d101      	bne.n	8005934 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005930:	4b56      	ldr	r3, [pc, #344]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005932:	e000      	b.n	8005936 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005934:	4b56      	ldr	r3, [pc, #344]	; (8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005936:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d04b      	beq.n	80059d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005952:	035b      	lsls	r3, r3, #13
 8005954:	430b      	orrs	r3, r1
 8005956:	431a      	orrs	r2, r3
 8005958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800595a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005964:	d004      	beq.n	8005970 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a45      	ldr	r2, [pc, #276]	; (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10f      	bne.n	8005990 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005970:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005974:	f7ff fea1 	bl	80056ba <LL_ADC_IsEnabled>
 8005978:	4604      	mov	r4, r0
 800597a:	4841      	ldr	r0, [pc, #260]	; (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800597c:	f7ff fe9d 	bl	80056ba <LL_ADC_IsEnabled>
 8005980:	4603      	mov	r3, r0
 8005982:	4323      	orrs	r3, r4
 8005984:	2b00      	cmp	r3, #0
 8005986:	bf0c      	ite	eq
 8005988:	2301      	moveq	r3, #1
 800598a:	2300      	movne	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e012      	b.n	80059b6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005990:	483c      	ldr	r0, [pc, #240]	; (8005a84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005992:	f7ff fe92 	bl	80056ba <LL_ADC_IsEnabled>
 8005996:	4604      	mov	r4, r0
 8005998:	483b      	ldr	r0, [pc, #236]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800599a:	f7ff fe8e 	bl	80056ba <LL_ADC_IsEnabled>
 800599e:	4603      	mov	r3, r0
 80059a0:	431c      	orrs	r4, r3
 80059a2:	483c      	ldr	r0, [pc, #240]	; (8005a94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80059a4:	f7ff fe89 	bl	80056ba <LL_ADC_IsEnabled>
 80059a8:	4603      	mov	r3, r0
 80059aa:	4323      	orrs	r3, r4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d056      	beq.n	8005a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80059ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80059c2:	f023 030f 	bic.w	r3, r3, #15
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	6811      	ldr	r1, [r2, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	6892      	ldr	r2, [r2, #8]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	431a      	orrs	r2, r3
 80059d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059d6:	e047      	b.n	8005a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80059d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ec:	d004      	beq.n	80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d10f      	bne.n	8005a18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80059f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80059fc:	f7ff fe5d 	bl	80056ba <LL_ADC_IsEnabled>
 8005a00:	4604      	mov	r4, r0
 8005a02:	481f      	ldr	r0, [pc, #124]	; (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a04:	f7ff fe59 	bl	80056ba <LL_ADC_IsEnabled>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	4323      	orrs	r3, r4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bf0c      	ite	eq
 8005a10:	2301      	moveq	r3, #1
 8005a12:	2300      	movne	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e012      	b.n	8005a3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005a18:	481a      	ldr	r0, [pc, #104]	; (8005a84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005a1a:	f7ff fe4e 	bl	80056ba <LL_ADC_IsEnabled>
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4819      	ldr	r0, [pc, #100]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005a22:	f7ff fe4a 	bl	80056ba <LL_ADC_IsEnabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	431c      	orrs	r4, r3
 8005a2a:	481a      	ldr	r0, [pc, #104]	; (8005a94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005a2c:	f7ff fe45 	bl	80056ba <LL_ADC_IsEnabled>
 8005a30:	4603      	mov	r3, r0
 8005a32:	4323      	orrs	r3, r4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d012      	beq.n	8005a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005a4a:	f023 030f 	bic.w	r3, r3, #15
 8005a4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005a50:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a52:	e009      	b.n	8005a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a58:	f043 0220 	orr.w	r2, r3, #32
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005a66:	e000      	b.n	8005a6a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3784      	adds	r7, #132	; 0x84
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	50000100 	.word	0x50000100
 8005a84:	50000400 	.word	0x50000400
 8005a88:	50000500 	.word	0x50000500
 8005a8c:	50000300 	.word	0x50000300
 8005a90:	50000700 	.word	0x50000700
 8005a94:	50000600 	.word	0x50000600

08005a98 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e023      	b.n	8005af2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fb fbb8 	bl	8001234 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <__NVIC_SetPriorityGrouping>:
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <__NVIC_SetPriorityGrouping+0x44>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b2e:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <__NVIC_SetPriorityGrouping+0x44>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	60d3      	str	r3, [r2, #12]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	e000ed00 	.word	0xe000ed00

08005b44 <__NVIC_GetPriorityGrouping>:
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b48:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <__NVIC_GetPriorityGrouping+0x18>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	f003 0307 	and.w	r3, r3, #7
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	e000ed00 	.word	0xe000ed00

08005b60 <__NVIC_EnableIRQ>:
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	db0b      	blt.n	8005b8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	f003 021f 	and.w	r2, r3, #31
 8005b78:	4907      	ldr	r1, [pc, #28]	; (8005b98 <__NVIC_EnableIRQ+0x38>)
 8005b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	2001      	movs	r0, #1
 8005b82:	fa00 f202 	lsl.w	r2, r0, r2
 8005b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	e000e100 	.word	0xe000e100

08005b9c <__NVIC_SetPriority>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	6039      	str	r1, [r7, #0]
 8005ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	db0a      	blt.n	8005bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	490c      	ldr	r1, [pc, #48]	; (8005be8 <__NVIC_SetPriority+0x4c>)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	0112      	lsls	r2, r2, #4
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005bc4:	e00a      	b.n	8005bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4908      	ldr	r1, [pc, #32]	; (8005bec <__NVIC_SetPriority+0x50>)
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	0112      	lsls	r2, r2, #4
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	440b      	add	r3, r1
 8005bda:	761a      	strb	r2, [r3, #24]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	e000e100 	.word	0xe000e100
 8005bec:	e000ed00 	.word	0xe000ed00

08005bf0 <NVIC_EncodePriority>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b089      	sub	sp, #36	; 0x24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f1c3 0307 	rsb	r3, r3, #7
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	bf28      	it	cs
 8005c0e:	2304      	movcs	r3, #4
 8005c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	3304      	adds	r3, #4
 8005c16:	2b06      	cmp	r3, #6
 8005c18:	d902      	bls.n	8005c20 <NVIC_EncodePriority+0x30>
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3b03      	subs	r3, #3
 8005c1e:	e000      	b.n	8005c22 <NVIC_EncodePriority+0x32>
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	401a      	ands	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c38:	f04f 31ff 	mov.w	r1, #4294967295
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	43d9      	mvns	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c48:	4313      	orrs	r3, r2
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3724      	adds	r7, #36	; 0x24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c68:	d301      	bcc.n	8005c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e00f      	b.n	8005c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <SysTick_Config+0x40>)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c76:	210f      	movs	r1, #15
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	f7ff ff8e 	bl	8005b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <SysTick_Config+0x40>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c86:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <SysTick_Config+0x40>)
 8005c88:	2207      	movs	r2, #7
 8005c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	e000e010 	.word	0xe000e010

08005c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ff29 	bl	8005afc <__NVIC_SetPriorityGrouping>
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	4603      	mov	r3, r0
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
 8005cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cc0:	f7ff ff40 	bl	8005b44 <__NVIC_GetPriorityGrouping>
 8005cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	6978      	ldr	r0, [r7, #20]
 8005ccc:	f7ff ff90 	bl	8005bf0 <NVIC_EncodePriority>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff ff5f 	bl	8005b9c <__NVIC_SetPriority>
}
 8005cde:	bf00      	nop
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	4603      	mov	r3, r0
 8005cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ff33 	bl	8005b60 <__NVIC_EnableIRQ>
}
 8005cfa:	bf00      	nop
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff ffa4 	bl	8005c58 <SysTick_Config>
 8005d10:	4603      	mov	r3, r0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e054      	b.n	8005dd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7f5b      	ldrb	r3, [r3, #29]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d105      	bne.n	8005d44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fb faba 	bl	80012b8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <HAL_CRC_Init+0xc4>)
 8005d58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0218 	bic.w	r2, r2, #24
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	e00c      	b.n	8005d86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6899      	ldr	r1, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	461a      	mov	r2, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f834 	bl	8005de4 <HAL_CRCEx_Polynomial_Set>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e028      	b.n	8005dd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	795b      	ldrb	r3, [r3, #5]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d105      	bne.n	8005d9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295
 8005d96:	611a      	str	r2, [r3, #16]
 8005d98:	e004      	b.n	8005da4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6912      	ldr	r2, [r2, #16]
 8005da2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699a      	ldr	r2, [r3, #24]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	04c11db7 	.word	0x04c11db7

08005de4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005df4:	231f      	movs	r3, #31
 8005df6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
 8005e06:	e063      	b.n	8005ed0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005e08:	bf00      	nop
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	613a      	str	r2, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d009      	beq.n	8005e28 <HAL_CRCEx_Polynomial_Set+0x44>
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0f0      	beq.n	8005e0a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b18      	cmp	r3, #24
 8005e2c:	d846      	bhi.n	8005ebc <HAL_CRCEx_Polynomial_Set+0xd8>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005ec3 	.word	0x08005ec3
 8005e38:	08005ebd 	.word	0x08005ebd
 8005e3c:	08005ebd 	.word	0x08005ebd
 8005e40:	08005ebd 	.word	0x08005ebd
 8005e44:	08005ebd 	.word	0x08005ebd
 8005e48:	08005ebd 	.word	0x08005ebd
 8005e4c:	08005ebd 	.word	0x08005ebd
 8005e50:	08005ebd 	.word	0x08005ebd
 8005e54:	08005eb1 	.word	0x08005eb1
 8005e58:	08005ebd 	.word	0x08005ebd
 8005e5c:	08005ebd 	.word	0x08005ebd
 8005e60:	08005ebd 	.word	0x08005ebd
 8005e64:	08005ebd 	.word	0x08005ebd
 8005e68:	08005ebd 	.word	0x08005ebd
 8005e6c:	08005ebd 	.word	0x08005ebd
 8005e70:	08005ebd 	.word	0x08005ebd
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005ebd 	.word	0x08005ebd
 8005e7c:	08005ebd 	.word	0x08005ebd
 8005e80:	08005ebd 	.word	0x08005ebd
 8005e84:	08005ebd 	.word	0x08005ebd
 8005e88:	08005ebd 	.word	0x08005ebd
 8005e8c:	08005ebd 	.word	0x08005ebd
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	08005e99 	.word	0x08005e99
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b06      	cmp	r3, #6
 8005e9c:	d913      	bls.n	8005ec6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005ea2:	e010      	b.n	8005ec6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b07      	cmp	r3, #7
 8005ea8:	d90f      	bls.n	8005eca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005eae:	e00c      	b.n	8005eca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	d90b      	bls.n	8005ece <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005eba:	e008      	b.n	8005ece <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
        break;
 8005ec0:	e006      	b.n	8005ed0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005ec2:	bf00      	nop
 8005ec4:	e004      	b.n	8005ed0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005ec6:	bf00      	nop
 8005ec8:	e002      	b.n	8005ed0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005ece:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10d      	bne.n	8005ef2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f023 0118 	bic.w	r1, r3, #24
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e08d      	b.n	800602e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	4b47      	ldr	r3, [pc, #284]	; (8006038 <HAL_DMA_Init+0x138>)
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d80f      	bhi.n	8005f3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	4b45      	ldr	r3, [pc, #276]	; (800603c <HAL_DMA_Init+0x13c>)
 8005f26:	4413      	add	r3, r2
 8005f28:	4a45      	ldr	r2, [pc, #276]	; (8006040 <HAL_DMA_Init+0x140>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	091b      	lsrs	r3, r3, #4
 8005f30:	009a      	lsls	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a42      	ldr	r2, [pc, #264]	; (8006044 <HAL_DMA_Init+0x144>)
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8005f3c:	e00e      	b.n	8005f5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	4b40      	ldr	r3, [pc, #256]	; (8006048 <HAL_DMA_Init+0x148>)
 8005f46:	4413      	add	r3, r2
 8005f48:	4a3d      	ldr	r2, [pc, #244]	; (8006040 <HAL_DMA_Init+0x140>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	091b      	lsrs	r3, r3, #4
 8005f50:	009a      	lsls	r2, r3, #2
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a3c      	ldr	r2, [pc, #240]	; (800604c <HAL_DMA_Init+0x14c>)
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa10 	bl	80063d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fbc:	d102      	bne.n	8005fc4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005fd8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d010      	beq.n	8006004 <HAL_DMA_Init+0x104>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d80c      	bhi.n	8006004 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fa30 	bl	8006450 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	e008      	b.n	8006016 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40020407 	.word	0x40020407
 800603c:	bffdfff8 	.word	0xbffdfff8
 8006040:	cccccccd 	.word	0xcccccccd
 8006044:	40020000 	.word	0x40020000
 8006048:	bffdfbf8 	.word	0xbffdfbf8
 800604c:	40020400 	.word	0x40020400

08006050 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_DMA_Start_IT+0x20>
 800606c:	2302      	movs	r3, #2
 800606e:	e066      	b.n	800613e <HAL_DMA_Start_IT+0xee>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	d155      	bne.n	8006130 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f954 	bl	8006356 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 020e 	orr.w	r2, r2, #14
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e00f      	b.n	80060e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0204 	bic.w	r2, r2, #4
 80060d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 020a 	orr.w	r2, r2, #10
 80060e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006104:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e005      	b.n	800613c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006138:	2302      	movs	r3, #2
 800613a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800613c:	7dfb      	ldrb	r3, [r7, #23]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d005      	beq.n	800616a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2204      	movs	r2, #4
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
 8006168:	e037      	b.n	80061da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 020e 	bic.w	r2, r2, #14
 8006178:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006188:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	f003 021f 	and.w	r2, r3, #31
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	2101      	movs	r1, #1
 80061a8:	fa01 f202 	lsl.w	r2, r1, r2
 80061ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00c      	beq.n	80061da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80061d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2204      	movs	r2, #4
 800621a:	409a      	lsls	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d026      	beq.n	8006272 <HAL_DMA_IRQHandler+0x7a>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d021      	beq.n	8006272 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d107      	bne.n	800624c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0204 	bic.w	r2, r2, #4
 800624a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	f003 021f 	and.w	r2, r3, #31
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	2104      	movs	r1, #4
 800625a:	fa01 f202 	lsl.w	r2, r1, r2
 800625e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	2b00      	cmp	r3, #0
 8006266:	d071      	beq.n	800634c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006270:	e06c      	b.n	800634c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2202      	movs	r2, #2
 800627c:	409a      	lsls	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d02e      	beq.n	80062e4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d029      	beq.n	80062e4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 020a 	bic.w	r2, r2, #10
 80062ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	f003 021f 	and.w	r2, r3, #31
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	2102      	movs	r1, #2
 80062c4:	fa01 f202 	lsl.w	r2, r1, r2
 80062c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d038      	beq.n	800634c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80062e2:	e033      	b.n	800634c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2208      	movs	r2, #8
 80062ee:	409a      	lsls	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d02a      	beq.n	800634e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d025      	beq.n	800634e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 020e 	bic.w	r2, r2, #14
 8006310:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006316:	f003 021f 	and.w	r2, r3, #31
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	2101      	movs	r1, #1
 8006320:	fa01 f202 	lsl.w	r2, r1, r2
 8006324:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800634c:	bf00      	nop
 800634e:	bf00      	nop
}
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800636c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800637e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006384:	f003 021f 	and.w	r2, r3, #31
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	2101      	movs	r1, #1
 800638e:	fa01 f202 	lsl.w	r2, r1, r2
 8006392:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d108      	bne.n	80063b6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80063b4:	e007      	b.n	80063c6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	60da      	str	r2, [r3, #12]
}
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b16      	ldr	r3, [pc, #88]	; (800643c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d802      	bhi.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80063e8:	4b15      	ldr	r3, [pc, #84]	; (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	e001      	b.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80063f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	3b08      	subs	r3, #8
 80063fe:	4a12      	ldr	r2, [pc, #72]	; (8006448 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640c:	089b      	lsrs	r3, r3, #2
 800640e:	009a      	lsls	r2, r3, #2
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	461a      	mov	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a0b      	ldr	r2, [pc, #44]	; (800644c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800641e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	2201      	movs	r2, #1
 8006428:	409a      	lsls	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40020407 	.word	0x40020407
 8006440:	40020800 	.word	0x40020800
 8006444:	40020820 	.word	0x40020820
 8006448:	cccccccd 	.word	0xcccccccd
 800644c:	40020880 	.word	0x40020880

08006450 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	461a      	mov	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a08      	ldr	r2, [pc, #32]	; (8006494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006472:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3b01      	subs	r3, #1
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2201      	movs	r2, #1
 800647e:	409a      	lsls	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	1000823f 	.word	0x1000823f
 8006494:	40020940 	.word	0x40020940

08006498 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e147      	b.n	800673a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fa ff8c 	bl	80013dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0210 	bic.w	r2, r2, #16
 80064d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064d4:	f7fd fa40 	bl	8003958 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80064da:	e012      	b.n	8006502 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80064dc:	f7fd fa3c 	bl	8003958 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b0a      	cmp	r3, #10
 80064e8:	d90b      	bls.n	8006502 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2203      	movs	r2, #3
 80064fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e11b      	b.n	800673a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b08      	cmp	r3, #8
 800650e:	d0e5      	beq.n	80064dc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006520:	f7fd fa1a 	bl	8003958 <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006526:	e012      	b.n	800654e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006528:	f7fd fa16 	bl	8003958 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b0a      	cmp	r3, #10
 8006534:	d90b      	bls.n	800654e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2203      	movs	r2, #3
 8006546:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0f5      	b.n	800673a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0e5      	beq.n	8006528 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0202 	orr.w	r2, r2, #2
 800656a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a74      	ldr	r2, [pc, #464]	; (8006744 <HAL_FDCAN_Init+0x2ac>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d103      	bne.n	800657e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006576:	4a74      	ldr	r2, [pc, #464]	; (8006748 <HAL_FDCAN_Init+0x2b0>)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	7c1b      	ldrb	r3, [r3, #16]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d108      	bne.n	8006598 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006594:	619a      	str	r2, [r3, #24]
 8006596:	e007      	b.n	80065a8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7c5b      	ldrb	r3, [r3, #17]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d108      	bne.n	80065c2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065be:	619a      	str	r2, [r3, #24]
 80065c0:	e007      	b.n	80065d2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	7c9b      	ldrb	r3, [r3, #18]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d108      	bne.n	80065ec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065e8:	619a      	str	r2, [r3, #24]
 80065ea:	e007      	b.n	80065fc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065fa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006620:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0210 	bic.w	r2, r2, #16
 8006630:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d108      	bne.n	800664c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699a      	ldr	r2, [r3, #24]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0204 	orr.w	r2, r2, #4
 8006648:	619a      	str	r2, [r3, #24]
 800664a:	e02c      	b.n	80066a6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d028      	beq.n	80066a6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d01c      	beq.n	8006696 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800666a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691a      	ldr	r2, [r3, #16]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0210 	orr.w	r2, r2, #16
 800667a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	2b03      	cmp	r3, #3
 8006682:	d110      	bne.n	80066a6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0220 	orr.w	r2, r2, #32
 8006692:	619a      	str	r2, [r3, #24]
 8006694:	e007      	b.n	80066a6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699a      	ldr	r2, [r3, #24]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0220 	orr.w	r2, r2, #32
 80066a4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80066b6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80066be:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80066ce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80066d0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066da:	d115      	bne.n	8006708 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	3b01      	subs	r3, #1
 80066e8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80066ea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	3b01      	subs	r3, #1
 80066f2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80066f4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	3b01      	subs	r3, #1
 80066fe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006704:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006706:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fcae 	bl	8007080 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40006400 	.word	0x40006400
 8006748:	40006500 	.word	0x40006500

0800674c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800675c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d002      	beq.n	800676a <HAL_FDCAN_ConfigFilter+0x1e>
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d13d      	bne.n	80067e6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d119      	bne.n	80067a6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800677e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006786:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e01d      	b.n	80067e2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	075a      	lsls	r2, r3, #29
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	079a      	lsls	r2, r3, #30
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4413      	add	r3, r2
 80067ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	3304      	adds	r3, #4
 80067da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e006      	b.n	80067f4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ea:	f043 0202 	orr.w	r2, r3, #2
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	d116      	bne.n	8006848 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006822:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	011a      	lsls	r2, r3, #4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	431a      	orrs	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	431a      	orrs	r2, r3
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	431a      	orrs	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e006      	b.n	8006856 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684c:	f043 0204 	orr.w	r2, r3, #4
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b01      	cmp	r3, #1
 8006874:	d110      	bne.n	8006898 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	e006      	b.n	80068a6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689c:	f043 0204 	orr.w	r2, r3, #4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
  }
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d12c      	bne.n	8006924 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80068d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e023      	b.n	8006932 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fc29 	bl	8007158 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2101      	movs	r1, #1
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	fa01 f202 	lsl.w	r2, r1, r2
 8006912:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006916:	2201      	movs	r2, #1
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	409a      	lsls	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e006      	b.n	8006932 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006928:	f043 0208 	orr.w	r2, r3, #8
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800693c:	b480      	push	{r7}
 800693e:	b08b      	sub	sp, #44	; 0x2c
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006954:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006956:	7efb      	ldrb	r3, [r7, #27]
 8006958:	2b02      	cmp	r3, #2
 800695a:	f040 80e8 	bne.w	8006b2e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d137      	bne.n	80069d4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	2b00      	cmp	r3, #0
 8006972:	d107      	bne.n	8006984 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0db      	b.n	8006b3c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10a      	bne.n	80069ac <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699e:	0a5b      	lsrs	r3, r3, #9
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80069a8:	2301      	movs	r3, #1
 80069aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b4:	0a1b      	lsrs	r3, r3, #8
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	4613      	mov	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	4413      	add	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	440b      	add	r3, r1
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
 80069d2:	e036      	b.n	8006a42 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d107      	bne.n	80069f4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0a3      	b.n	8006b3c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069fc:	0e1b      	lsrs	r3, r3, #24
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10a      	bne.n	8006a1c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	4613      	mov	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	440b      	add	r3, r1
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d107      	bne.n	8006a66 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	0c9b      	lsrs	r3, r3, #18
 8006a5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	e005      	b.n	8006a72 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	0c1b      	lsrs	r3, r3, #16
 8006aa0:	f003 020f 	and.w	r2, r3, #15
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	0e1b      	lsrs	r3, r3, #24
 8006ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	0fda      	lsrs	r2, r3, #31
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	3304      	adds	r3, #4
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	e00a      	b.n	8006afe <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	441a      	add	r2, r3
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	440b      	add	r3, r1
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	3301      	adds	r3, #1
 8006afc:	623b      	str	r3, [r7, #32]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4a11      	ldr	r2, [pc, #68]	; (8006b48 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006b04:	5cd3      	ldrb	r3, [r2, r3]
 8006b06:	461a      	mov	r2, r3
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d3ec      	bcc.n	8006ae8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d105      	bne.n	8006b20 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006b1e:	e004      	b.n	8006b2a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e006      	b.n	8006b3c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b32:	f043 0208 	orr.w	r2, r3, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
  }
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	372c      	adds	r7, #44	; 0x2c
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	0800d8b8 	.word	0x0800d8b8

08006b4c <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b40      	cmp	r3, #64	; 0x40
 8006b5a:	d107      	bne.n	8006b6c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	e006      	b.n	8006b7a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bbe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d003      	beq.n	8006bce <HAL_FDCAN_ActivateNotification+0x22>
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	f040 80c8 	bne.w	8006d5e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d03b      	beq.n	8006c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d031      	beq.n	8006c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d027      	beq.n	8006c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01d      	beq.n	8006c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d013      	beq.n	8006c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00c      	beq.n	8006c72 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d107      	bne.n	8006c72 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d13b      	bne.n	8006cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d131      	bne.n	8006cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d004      	beq.n	8006cae <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d127      	bne.n	8006cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d11d      	bne.n	8006cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d113      	bne.n	8006cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00c      	beq.n	8006d0e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0202 	orr.w	r2, r2, #2
 8006d0c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e006      	b.n	8006d6c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d62:	f043 0202 	orr.w	r2, r3, #2
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08c      	sub	sp, #48	; 0x30
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d86:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d94:	4013      	ands	r3, r2
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dac:	4013      	ands	r3, r2
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dce:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006dd2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	6a3a      	ldr	r2, [r7, #32]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006dea:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	4013      	ands	r3, r2
 8006df6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e06:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d006      	beq.n	8006e2a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2240      	movs	r2, #64	; 0x40
 8006e22:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f90b 	bl	8007040 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d019      	beq.n	8006e68 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d014      	beq.n	8006e68 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006e46:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4013      	ands	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e5e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006e60:	6939      	ldr	r1, [r7, #16]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8cd 	bl	8007002 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e74:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f8a2 	bl	8006fc2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fb fc2e 	bl	80026f0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fb fc79 	bl	800279c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00c      	beq.n	8006ece <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f885 	bl	8006fd8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d018      	beq.n	8006f0a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d013      	beq.n	8006f0a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006eea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2280      	movs	r2, #128	; 0x80
 8006f00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006f02:	68f9      	ldr	r1, [r7, #12]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f871 	bl	8006fec <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00c      	beq.n	8006f2e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f26:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f875 	bl	8007018 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00c      	beq.n	8006f52 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006f4a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f86d 	bl	800702c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00f      	beq.n	8006f7c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006f8a:	69f9      	ldr	r1, [r7, #28]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f86b 	bl	8007068 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6a3a      	ldr	r2, [r7, #32]
 8006f9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f84d 	bl	8007054 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006fba:	bf00      	nop
 8006fbc:	3730      	adds	r7, #48	; 0x30
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007088:	4b30      	ldr	r3, [pc, #192]	; (800714c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800708a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a2f      	ldr	r2, [pc, #188]	; (8007150 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d103      	bne.n	800709e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800709c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a2c      	ldr	r2, [pc, #176]	; (8007154 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d103      	bne.n	80070b0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80070ae:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070be:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c6:	041a      	lsls	r2, r3, #16
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	061a      	lsls	r2, r3, #24
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e005      	b.n	8007132 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3304      	adds	r3, #4
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	429a      	cmp	r2, r3
 800713c:	d3f3      	bcc.n	8007126 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	4000a400 	.word	0x4000a400
 8007150:	40006800 	.word	0x40006800
 8007154:	40006c00 	.word	0x40006c00

08007158 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007158:	b480      	push	{r7}
 800715a:	b089      	sub	sp, #36	; 0x24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007176:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800717e:	4313      	orrs	r3, r2
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	e00a      	b.n	800719a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800718c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007192:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007198:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80071a4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80071aa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80071b0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	4413      	add	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	440b      	add	r3, r1
 80071cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	3304      	adds	r3, #4
 80071d8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	3304      	adds	r3, #4
 80071e4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	e020      	b.n	800722e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	3303      	adds	r3, #3
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	3302      	adds	r3, #2
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	440b      	add	r3, r1
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007204:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	3301      	adds	r3, #1
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	440b      	add	r3, r1
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007212:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	440a      	add	r2, r1
 800721a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800721c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	3304      	adds	r3, #4
 8007226:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3304      	adds	r3, #4
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	4a06      	ldr	r2, [pc, #24]	; (800724c <FDCAN_CopyMessageToRAM+0xf4>)
 8007234:	5cd3      	ldrb	r3, [r2, r3]
 8007236:	461a      	mov	r2, r3
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	4293      	cmp	r3, r2
 800723c:	d3d6      	bcc.n	80071ec <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	3724      	adds	r7, #36	; 0x24
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	0800d8b8 	.word	0x0800d8b8

08007250 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e033      	b.n	80072ca <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7fa fcb0 	bl	8001bdc <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f854 	bl	8007330 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f822 	bl	80072d2 <FMAC_Reset>
 800728e:	4603      	mov	r3, r0
 8007290:	2b01      	cmp	r3, #1
 8007292:	d10c      	bne.n	80072ae <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007298:	f043 0210 	orr.w	r2, r3, #16
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	22a0      	movs	r2, #160	; 0xa0
 80072a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
 80072ac:	e008      	b.n	80072c0 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072da:	f7fc fb3d 	bl	8003958 <HAL_GetTick>
 80072de:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80072ee:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80072f0:	e00f      	b.n	8007312 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80072f2:	f7fc fb31 	bl	8003958 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007300:	d907      	bls.n	8007312 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e00a      	b.n	8007328 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e8      	bne.n	80072f2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f807 	bl	800734c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f81b 	bl	800737a <FMAC_ResetOutputStateAndDataPointers>
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2220      	movs	r2, #32
 800736a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80073b6:	e15a      	b.n	800766e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	2101      	movs	r1, #1
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	fa01 f303 	lsl.w	r3, r1, r3
 80073c4:	4013      	ands	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 814c 	beq.w	8007668 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d005      	beq.n	80073e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d130      	bne.n	800744a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	2203      	movs	r2, #3
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	43db      	mvns	r3, r3
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4013      	ands	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800741e:	2201      	movs	r2, #1
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	43db      	mvns	r3, r3
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4013      	ands	r3, r2
 800742c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	091b      	lsrs	r3, r3, #4
 8007434:	f003 0201 	and.w	r2, r3, #1
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	2b03      	cmp	r3, #3
 8007454:	d017      	beq.n	8007486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	2203      	movs	r2, #3
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	43db      	mvns	r3, r3
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4013      	ands	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d123      	bne.n	80074da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	08da      	lsrs	r2, r3, #3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3208      	adds	r2, #8
 800749a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	220f      	movs	r2, #15
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4013      	ands	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	691a      	ldr	r2, [r3, #16]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	08da      	lsrs	r2, r3, #3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3208      	adds	r2, #8
 80074d4:	6939      	ldr	r1, [r7, #16]
 80074d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	2203      	movs	r2, #3
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	43db      	mvns	r3, r3
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4013      	ands	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f003 0203 	and.w	r2, r3, #3
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80a6 	beq.w	8007668 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800751c:	4b5b      	ldr	r3, [pc, #364]	; (800768c <HAL_GPIO_Init+0x2e4>)
 800751e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007520:	4a5a      	ldr	r2, [pc, #360]	; (800768c <HAL_GPIO_Init+0x2e4>)
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	6613      	str	r3, [r2, #96]	; 0x60
 8007528:	4b58      	ldr	r3, [pc, #352]	; (800768c <HAL_GPIO_Init+0x2e4>)
 800752a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	60bb      	str	r3, [r7, #8]
 8007532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007534:	4a56      	ldr	r2, [pc, #344]	; (8007690 <HAL_GPIO_Init+0x2e8>)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	089b      	lsrs	r3, r3, #2
 800753a:	3302      	adds	r3, #2
 800753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f003 0303 	and.w	r3, r3, #3
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	220f      	movs	r2, #15
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	43db      	mvns	r3, r3
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4013      	ands	r3, r2
 8007556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800755e:	d01f      	beq.n	80075a0 <HAL_GPIO_Init+0x1f8>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a4c      	ldr	r2, [pc, #304]	; (8007694 <HAL_GPIO_Init+0x2ec>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d019      	beq.n	800759c <HAL_GPIO_Init+0x1f4>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a4b      	ldr	r2, [pc, #300]	; (8007698 <HAL_GPIO_Init+0x2f0>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <HAL_GPIO_Init+0x1f0>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a4a      	ldr	r2, [pc, #296]	; (800769c <HAL_GPIO_Init+0x2f4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00d      	beq.n	8007594 <HAL_GPIO_Init+0x1ec>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a49      	ldr	r2, [pc, #292]	; (80076a0 <HAL_GPIO_Init+0x2f8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <HAL_GPIO_Init+0x1e8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a48      	ldr	r2, [pc, #288]	; (80076a4 <HAL_GPIO_Init+0x2fc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d101      	bne.n	800758c <HAL_GPIO_Init+0x1e4>
 8007588:	2305      	movs	r3, #5
 800758a:	e00a      	b.n	80075a2 <HAL_GPIO_Init+0x1fa>
 800758c:	2306      	movs	r3, #6
 800758e:	e008      	b.n	80075a2 <HAL_GPIO_Init+0x1fa>
 8007590:	2304      	movs	r3, #4
 8007592:	e006      	b.n	80075a2 <HAL_GPIO_Init+0x1fa>
 8007594:	2303      	movs	r3, #3
 8007596:	e004      	b.n	80075a2 <HAL_GPIO_Init+0x1fa>
 8007598:	2302      	movs	r3, #2
 800759a:	e002      	b.n	80075a2 <HAL_GPIO_Init+0x1fa>
 800759c:	2301      	movs	r3, #1
 800759e:	e000      	b.n	80075a2 <HAL_GPIO_Init+0x1fa>
 80075a0:	2300      	movs	r3, #0
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	f002 0203 	and.w	r2, r2, #3
 80075a8:	0092      	lsls	r2, r2, #2
 80075aa:	4093      	lsls	r3, r2
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075b2:	4937      	ldr	r1, [pc, #220]	; (8007690 <HAL_GPIO_Init+0x2e8>)
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	089b      	lsrs	r3, r3, #2
 80075b8:	3302      	adds	r3, #2
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075c0:	4b39      	ldr	r3, [pc, #228]	; (80076a8 <HAL_GPIO_Init+0x300>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	43db      	mvns	r3, r3
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80075e4:	4a30      	ldr	r2, [pc, #192]	; (80076a8 <HAL_GPIO_Init+0x300>)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80075ea:	4b2f      	ldr	r3, [pc, #188]	; (80076a8 <HAL_GPIO_Init+0x300>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	43db      	mvns	r3, r3
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	4013      	ands	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800760e:	4a26      	ldr	r2, [pc, #152]	; (80076a8 <HAL_GPIO_Init+0x300>)
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007614:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <HAL_GPIO_Init+0x300>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	43db      	mvns	r3, r3
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4013      	ands	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007638:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <HAL_GPIO_Init+0x300>)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800763e:	4b1a      	ldr	r3, [pc, #104]	; (80076a8 <HAL_GPIO_Init+0x300>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	43db      	mvns	r3, r3
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4013      	ands	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007662:	4a11      	ldr	r2, [pc, #68]	; (80076a8 <HAL_GPIO_Init+0x300>)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	3301      	adds	r3, #1
 800766c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	f47f ae9d 	bne.w	80073b8 <HAL_GPIO_Init+0x10>
  }
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	40021000 	.word	0x40021000
 8007690:	40010000 	.word	0x40010000
 8007694:	48000400 	.word	0x48000400
 8007698:	48000800 	.word	0x48000800
 800769c:	48000c00 	.word	0x48000c00
 80076a0:	48001000 	.word	0x48001000
 80076a4:	48001400 	.word	0x48001400
 80076a8:	40010400 	.word	0x40010400

080076ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e08d      	b.n	80077da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fa fb32 	bl	8001d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2224      	movs	r2, #36	; 0x24
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800770c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d107      	bne.n	8007726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	e006      	b.n	8007734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d108      	bne.n	800774e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800774a:	605a      	str	r2, [r3, #4]
 800774c:	e007      	b.n	800775e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800775c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800776c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68da      	ldr	r2, [r3, #12]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	69d9      	ldr	r1, [r3, #28]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1a      	ldr	r2, [r3, #32]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	607a      	str	r2, [r7, #4]
 80077ee:	461a      	mov	r2, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	817b      	strh	r3, [r7, #10]
 80077f4:	4613      	mov	r3, r2
 80077f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b20      	cmp	r3, #32
 8007802:	f040 80fd 	bne.w	8007a00 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_I2C_Master_Transmit+0x30>
 8007810:	2302      	movs	r3, #2
 8007812:	e0f6      	b.n	8007a02 <HAL_I2C_Master_Transmit+0x21e>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800781c:	f7fc f89c 	bl	8003958 <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2319      	movs	r3, #25
 8007828:	2201      	movs	r2, #1
 800782a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 fa24 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e0e1      	b.n	8007a02 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2221      	movs	r2, #33	; 0x21
 8007842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2210      	movs	r2, #16
 800784a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	893a      	ldrh	r2, [r7, #8]
 800785e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786a:	b29b      	uxth	r3, r3
 800786c:	2bff      	cmp	r3, #255	; 0xff
 800786e:	d906      	bls.n	800787e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	22ff      	movs	r2, #255	; 0xff
 8007874:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e007      	b.n	800788e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800788c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d024      	beq.n	80078e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	3301      	adds	r3, #1
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	8979      	ldrh	r1, [r7, #10]
 80078d2:	4b4e      	ldr	r3, [pc, #312]	; (8007a0c <HAL_I2C_Master_Transmit+0x228>)
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 fc1f 	bl	800811c <I2C_TransferConfig>
 80078de:	e066      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	8979      	ldrh	r1, [r7, #10]
 80078e8:	4b48      	ldr	r3, [pc, #288]	; (8007a0c <HAL_I2C_Master_Transmit+0x228>)
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fc14 	bl	800811c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80078f4:	e05b      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	6a39      	ldr	r1, [r7, #32]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 fa17 	bl	8007d2e <I2C_WaitOnTXISFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e07b      	b.n	8007a02 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	781a      	ldrb	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007932:	3b01      	subs	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d034      	beq.n	80079ae <HAL_I2C_Master_Transmit+0x1ca>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007948:	2b00      	cmp	r3, #0
 800794a:	d130      	bne.n	80079ae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	2200      	movs	r2, #0
 8007954:	2180      	movs	r1, #128	; 0x80
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f990 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e04d      	b.n	8007a02 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796a:	b29b      	uxth	r3, r3
 800796c:	2bff      	cmp	r3, #255	; 0xff
 800796e:	d90e      	bls.n	800798e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	22ff      	movs	r2, #255	; 0xff
 8007974:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797a:	b2da      	uxtb	r2, r3
 800797c:	8979      	ldrh	r1, [r7, #10]
 800797e:	2300      	movs	r3, #0
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fbc8 	bl	800811c <I2C_TransferConfig>
 800798c:	e00f      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799c:	b2da      	uxtb	r2, r3
 800799e:	8979      	ldrh	r1, [r7, #10]
 80079a0:	2300      	movs	r3, #0
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fbb7 	bl	800811c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d19e      	bne.n	80078f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	6a39      	ldr	r1, [r7, #32]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f9fd 	bl	8007dbc <I2C_WaitOnSTOPFlagUntilTimeout>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e01a      	b.n	8007a02 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2220      	movs	r2, #32
 80079d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6859      	ldr	r1, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <HAL_I2C_Master_Transmit+0x22c>)
 80079e0:	400b      	ands	r3, r1
 80079e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	e000      	b.n	8007a02 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007a00:	2302      	movs	r3, #2
  }
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	80002000 	.word	0x80002000
 8007a10:	fe00e800 	.word	0xfe00e800

08007a14 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	460b      	mov	r3, r1
 8007a22:	817b      	strh	r3, [r7, #10]
 8007a24:	4613      	mov	r3, r2
 8007a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	f040 80db 	bne.w	8007bec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_I2C_Master_Receive+0x30>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e0d4      	b.n	8007bee <HAL_I2C_Master_Receive+0x1da>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a4c:	f7fb ff84 	bl	8003958 <HAL_GetTick>
 8007a50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	2319      	movs	r3, #25
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f90c 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e0bf      	b.n	8007bee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2222      	movs	r2, #34	; 0x22
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2210      	movs	r2, #16
 8007a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	893a      	ldrh	r2, [r7, #8]
 8007a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2bff      	cmp	r3, #255	; 0xff
 8007a9e:	d90e      	bls.n	8007abe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	22ff      	movs	r2, #255	; 0xff
 8007aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	8979      	ldrh	r1, [r7, #10]
 8007aae:	4b52      	ldr	r3, [pc, #328]	; (8007bf8 <HAL_I2C_Master_Receive+0x1e4>)
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fb30 	bl	800811c <I2C_TransferConfig>
 8007abc:	e06d      	b.n	8007b9a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	8979      	ldrh	r1, [r7, #10]
 8007ad0:	4b49      	ldr	r3, [pc, #292]	; (8007bf8 <HAL_I2C_Master_Receive+0x1e4>)
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fb1f 	bl	800811c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007ade:	e05c      	b.n	8007b9a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	6a39      	ldr	r1, [r7, #32]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f9ad 	bl	8007e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e07c      	b.n	8007bee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d034      	beq.n	8007b9a <HAL_I2C_Master_Receive+0x186>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d130      	bne.n	8007b9a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2180      	movs	r1, #128	; 0x80
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f89a 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e04d      	b.n	8007bee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2bff      	cmp	r3, #255	; 0xff
 8007b5a:	d90e      	bls.n	8007b7a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	22ff      	movs	r2, #255	; 0xff
 8007b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	8979      	ldrh	r1, [r7, #10]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fad2 	bl	800811c <I2C_TransferConfig>
 8007b78:	e00f      	b.n	8007b9a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	8979      	ldrh	r1, [r7, #10]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 fac1 	bl	800811c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d19d      	bne.n	8007ae0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	6a39      	ldr	r1, [r7, #32]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f907 	bl	8007dbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e01a      	b.n	8007bee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6859      	ldr	r1, [r3, #4]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <HAL_I2C_Master_Receive+0x1e8>)
 8007bcc:	400b      	ands	r3, r1
 8007bce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e000      	b.n	8007bee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	80002400 	.word	0x80002400
 8007bfc:	fe00e800 	.word	0xfe00e800

08007c00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	4798      	blx	r3
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d103      	bne.n	8007c52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d007      	beq.n	8007c70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	619a      	str	r2, [r3, #24]
  }
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c8c:	e03b      	b.n	8007d06 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f962 	bl	8007f5c <I2C_IsErrorOccurred>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e041      	b.n	8007d26 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d02d      	beq.n	8007d06 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007caa:	f7fb fe55 	bl	8003958 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d302      	bcc.n	8007cc0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d122      	bne.n	8007d06 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	bf0c      	ite	eq
 8007cd0:	2301      	moveq	r3, #1
 8007cd2:	2300      	movne	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d113      	bne.n	8007d06 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	f043 0220 	orr.w	r2, r3, #32
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e00f      	b.n	8007d26 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	bf0c      	ite	eq
 8007d16:	2301      	moveq	r3, #1
 8007d18:	2300      	movne	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d0b4      	beq.n	8007c8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d3a:	e033      	b.n	8007da4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f90b 	bl	8007f5c <I2C_IsErrorOccurred>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e031      	b.n	8007db4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d025      	beq.n	8007da4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d58:	f7fb fdfe 	bl	8003958 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d302      	bcc.n	8007d6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d11a      	bne.n	8007da4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d013      	beq.n	8007da4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	f043 0220 	orr.w	r2, r3, #32
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e007      	b.n	8007db4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d1c4      	bne.n	8007d3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dc8:	e02f      	b.n	8007e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f8c4 	bl	8007f5c <I2C_IsErrorOccurred>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e02d      	b.n	8007e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dde:	f7fb fdbb 	bl	8003958 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d302      	bcc.n	8007df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d11a      	bne.n	8007e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d013      	beq.n	8007e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	f043 0220 	orr.w	r2, r3, #32
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e007      	b.n	8007e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d1c8      	bne.n	8007dca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007e54:	e071      	b.n	8007f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f87e 	bl	8007f5c <I2C_IsErrorOccurred>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d13b      	bne.n	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d138      	bne.n	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d105      	bne.n	8007e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f003 0310 	and.w	r3, r3, #16
 8007ea2:	2b10      	cmp	r3, #16
 8007ea4:	d121      	bne.n	8007eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2210      	movs	r2, #16
 8007eac:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6859      	ldr	r1, [r3, #4]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	4b24      	ldr	r3, [pc, #144]	; (8007f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007ec8:	400b      	ands	r3, r1
 8007eca:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	75fb      	strb	r3, [r7, #23]
 8007ee8:	e002      	b.n	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007ef0:	f7fb fd32 	bl	8003958 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d302      	bcc.n	8007f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d119      	bne.n	8007f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d116      	bne.n	8007f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	f003 0304 	and.w	r3, r3, #4
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d00f      	beq.n	8007f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1e:	f043 0220 	orr.w	r2, r3, #32
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d002      	beq.n	8007f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d083      	beq.n	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	fe00e800 	.word	0xfe00e800

08007f5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f003 0310 	and.w	r3, r3, #16
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d068      	beq.n	800805a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2210      	movs	r2, #16
 8007f8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f90:	e049      	b.n	8008026 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d045      	beq.n	8008026 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f9a:	f7fb fcdd 	bl	8003958 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d302      	bcc.n	8007fb0 <I2C_IsErrorOccurred+0x54>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d13a      	bne.n	8008026 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd2:	d121      	bne.n	8008018 <I2C_IsErrorOccurred+0xbc>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fda:	d01d      	beq.n	8008018 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007fdc:	7cfb      	ldrb	r3, [r7, #19]
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d01a      	beq.n	8008018 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ff0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ff2:	f7fb fcb1 	bl	8003958 <HAL_GetTick>
 8007ff6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ff8:	e00e      	b.n	8008018 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ffa:	f7fb fcad 	bl	8003958 <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	2b19      	cmp	r3, #25
 8008006:	d907      	bls.n	8008018 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	f043 0320 	orr.w	r3, r3, #32
 800800e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008016:	e006      	b.n	8008026 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b20      	cmp	r3, #32
 8008024:	d1e9      	bne.n	8007ffa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f003 0320 	and.w	r3, r3, #32
 8008030:	2b20      	cmp	r3, #32
 8008032:	d003      	beq.n	800803c <I2C_IsErrorOccurred+0xe0>
 8008034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0aa      	beq.n	8007f92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800803c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008040:	2b00      	cmp	r3, #0
 8008042:	d103      	bne.n	800804c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2220      	movs	r2, #32
 800804a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	f043 0304 	orr.w	r3, r3, #4
 8008052:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	f043 0301 	orr.w	r3, r3, #1
 8008072:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800807c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f043 0308 	orr.w	r3, r3, #8
 8008094:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800809e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	f043 0302 	orr.w	r3, r3, #2
 80080b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80080c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01c      	beq.n	800810a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7ff fdaf 	bl	8007c34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6859      	ldr	r1, [r3, #4]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <I2C_IsErrorOccurred+0x1bc>)
 80080e2:	400b      	ands	r3, r1
 80080e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800810a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800810e:	4618      	mov	r0, r3
 8008110:	3728      	adds	r7, #40	; 0x28
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	fe00e800 	.word	0xfe00e800

0800811c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	817b      	strh	r3, [r7, #10]
 800812a:	4613      	mov	r3, r2
 800812c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800812e:	897b      	ldrh	r3, [r7, #10]
 8008130:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008134:	7a7b      	ldrb	r3, [r7, #9]
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800813c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	4313      	orrs	r3, r2
 8008146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800814a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	0d5b      	lsrs	r3, r3, #21
 8008156:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800815a:	4b08      	ldr	r3, [pc, #32]	; (800817c <I2C_TransferConfig+0x60>)
 800815c:	430b      	orrs	r3, r1
 800815e:	43db      	mvns	r3, r3
 8008160:	ea02 0103 	and.w	r1, r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	03ff63ff 	.word	0x03ff63ff

08008180 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b20      	cmp	r3, #32
 8008194:	d138      	bne.n	8008208 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e032      	b.n	800820a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2224      	movs	r2, #36	; 0x24
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0201 	bic.w	r2, r2, #1
 80081c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	e000      	b.n	800820a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008208:	2302      	movs	r3, #2
  }
}
 800820a:	4618      	mov	r0, r3
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b20      	cmp	r3, #32
 800822a:	d139      	bne.n	80082a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008236:	2302      	movs	r3, #2
 8008238:	e033      	b.n	80082a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2224      	movs	r2, #36	; 0x24
 8008246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0201 	bic.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008268:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0201 	orr.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2220      	movs	r2, #32
 8008290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	e000      	b.n	80082a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082a0:	2302      	movs	r3, #2
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
	...

080082b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d141      	bne.n	8008342 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80082be:	4b4b      	ldr	r3, [pc, #300]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ca:	d131      	bne.n	8008330 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082cc:	4b47      	ldr	r3, [pc, #284]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d2:	4a46      	ldr	r2, [pc, #280]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082dc:	4b43      	ldr	r3, [pc, #268]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082e4:	4a41      	ldr	r2, [pc, #260]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80082ec:	4b40      	ldr	r3, [pc, #256]	; (80083f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2232      	movs	r2, #50	; 0x32
 80082f2:	fb02 f303 	mul.w	r3, r2, r3
 80082f6:	4a3f      	ldr	r2, [pc, #252]	; (80083f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80082f8:	fba2 2303 	umull	r2, r3, r2, r3
 80082fc:	0c9b      	lsrs	r3, r3, #18
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008302:	e002      	b.n	800830a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3b01      	subs	r3, #1
 8008308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800830a:	4b38      	ldr	r3, [pc, #224]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008316:	d102      	bne.n	800831e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f2      	bne.n	8008304 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800831e:	4b33      	ldr	r3, [pc, #204]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800832a:	d158      	bne.n	80083de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e057      	b.n	80083e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008330:	4b2e      	ldr	r3, [pc, #184]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008336:	4a2d      	ldr	r2, [pc, #180]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800833c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008340:	e04d      	b.n	80083de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008348:	d141      	bne.n	80083ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800834a:	4b28      	ldr	r3, [pc, #160]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008356:	d131      	bne.n	80083bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008358:	4b24      	ldr	r3, [pc, #144]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800835a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800835e:	4a23      	ldr	r2, [pc, #140]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008368:	4b20      	ldr	r3, [pc, #128]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008370:	4a1e      	ldr	r2, [pc, #120]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008378:	4b1d      	ldr	r3, [pc, #116]	; (80083f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2232      	movs	r2, #50	; 0x32
 800837e:	fb02 f303 	mul.w	r3, r2, r3
 8008382:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008384:	fba2 2303 	umull	r2, r3, r2, r3
 8008388:	0c9b      	lsrs	r3, r3, #18
 800838a:	3301      	adds	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800838e:	e002      	b.n	8008396 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3b01      	subs	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008396:	4b15      	ldr	r3, [pc, #84]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800839e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a2:	d102      	bne.n	80083aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f2      	bne.n	8008390 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80083aa:	4b10      	ldr	r3, [pc, #64]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b6:	d112      	bne.n	80083de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e011      	b.n	80083e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80083bc:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083c2:	4a0a      	ldr	r2, [pc, #40]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80083cc:	e007      	b.n	80083de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083ce:	4b07      	ldr	r3, [pc, #28]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80083d6:	4a05      	ldr	r2, [pc, #20]	; (80083ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	40007000 	.word	0x40007000
 80083f0:	20000018 	.word	0x20000018
 80083f4:	431bde83 	.word	0x431bde83

080083f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	4a04      	ldr	r2, [pc, #16]	; (8008414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008406:	6093      	str	r3, [r2, #8]
}
 8008408:	bf00      	nop
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40007000 	.word	0x40007000

08008418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e2fe      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d075      	beq.n	8008522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008436:	4b97      	ldr	r3, [pc, #604]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f003 030c 	and.w	r3, r3, #12
 800843e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008440:	4b94      	ldr	r3, [pc, #592]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b0c      	cmp	r3, #12
 800844e:	d102      	bne.n	8008456 <HAL_RCC_OscConfig+0x3e>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d002      	beq.n	800845c <HAL_RCC_OscConfig+0x44>
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2b08      	cmp	r3, #8
 800845a:	d10b      	bne.n	8008474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800845c:	4b8d      	ldr	r3, [pc, #564]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d05b      	beq.n	8008520 <HAL_RCC_OscConfig+0x108>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d157      	bne.n	8008520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e2d9      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847c:	d106      	bne.n	800848c <HAL_RCC_OscConfig+0x74>
 800847e:	4b85      	ldr	r3, [pc, #532]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a84      	ldr	r2, [pc, #528]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	e01d      	b.n	80084c8 <HAL_RCC_OscConfig+0xb0>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008494:	d10c      	bne.n	80084b0 <HAL_RCC_OscConfig+0x98>
 8008496:	4b7f      	ldr	r3, [pc, #508]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a7e      	ldr	r2, [pc, #504]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800849c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	4b7c      	ldr	r3, [pc, #496]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a7b      	ldr	r2, [pc, #492]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80084a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	e00b      	b.n	80084c8 <HAL_RCC_OscConfig+0xb0>
 80084b0:	4b78      	ldr	r3, [pc, #480]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a77      	ldr	r2, [pc, #476]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80084b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	4b75      	ldr	r3, [pc, #468]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a74      	ldr	r2, [pc, #464]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80084c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d013      	beq.n	80084f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7fb fa42 	bl	8003958 <HAL_GetTick>
 80084d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084d8:	f7fb fa3e 	bl	8003958 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b64      	cmp	r3, #100	; 0x64
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e29e      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084ea:	4b6a      	ldr	r3, [pc, #424]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0f0      	beq.n	80084d8 <HAL_RCC_OscConfig+0xc0>
 80084f6:	e014      	b.n	8008522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f8:	f7fb fa2e 	bl	8003958 <HAL_GetTick>
 80084fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008500:	f7fb fa2a 	bl	8003958 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b64      	cmp	r3, #100	; 0x64
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e28a      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008512:	4b60      	ldr	r3, [pc, #384]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1f0      	bne.n	8008500 <HAL_RCC_OscConfig+0xe8>
 800851e:	e000      	b.n	8008522 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d075      	beq.n	800861a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800852e:	4b59      	ldr	r3, [pc, #356]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f003 030c 	and.w	r3, r3, #12
 8008536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008538:	4b56      	ldr	r3, [pc, #344]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f003 0303 	and.w	r3, r3, #3
 8008540:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b0c      	cmp	r3, #12
 8008546:	d102      	bne.n	800854e <HAL_RCC_OscConfig+0x136>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d002      	beq.n	8008554 <HAL_RCC_OscConfig+0x13c>
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b04      	cmp	r3, #4
 8008552:	d11f      	bne.n	8008594 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008554:	4b4f      	ldr	r3, [pc, #316]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <HAL_RCC_OscConfig+0x154>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e25d      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800856c:	4b49      	ldr	r3, [pc, #292]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	061b      	lsls	r3, r3, #24
 800857a:	4946      	ldr	r1, [pc, #280]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800857c:	4313      	orrs	r3, r2
 800857e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008580:	4b45      	ldr	r3, [pc, #276]	; (8008698 <HAL_RCC_OscConfig+0x280>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7fb f99b 	bl	80038c0 <HAL_InitTick>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d043      	beq.n	8008618 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e249      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d023      	beq.n	80085e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800859c:	4b3d      	ldr	r3, [pc, #244]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a3c      	ldr	r2, [pc, #240]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80085a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a8:	f7fb f9d6 	bl	8003958 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085b0:	f7fb f9d2 	bl	8003958 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e232      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085c2:	4b34      	ldr	r3, [pc, #208]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0f0      	beq.n	80085b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ce:	4b31      	ldr	r3, [pc, #196]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	061b      	lsls	r3, r3, #24
 80085dc:	492d      	ldr	r1, [pc, #180]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	604b      	str	r3, [r1, #4]
 80085e2:	e01a      	b.n	800861a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085e4:	4b2b      	ldr	r3, [pc, #172]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a2a      	ldr	r2, [pc, #168]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 80085ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f0:	f7fb f9b2 	bl	8003958 <HAL_GetTick>
 80085f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085f8:	f7fb f9ae 	bl	8003958 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e20e      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800860a:	4b22      	ldr	r3, [pc, #136]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f0      	bne.n	80085f8 <HAL_RCC_OscConfig+0x1e0>
 8008616:	e000      	b.n	800861a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0308 	and.w	r3, r3, #8
 8008622:	2b00      	cmp	r3, #0
 8008624:	d041      	beq.n	80086aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01c      	beq.n	8008668 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800862e:	4b19      	ldr	r3, [pc, #100]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008634:	4a17      	ldr	r2, [pc, #92]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800863e:	f7fb f98b 	bl	8003958 <HAL_GetTick>
 8008642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008644:	e008      	b.n	8008658 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008646:	f7fb f987 	bl	8003958 <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b02      	cmp	r3, #2
 8008652:	d901      	bls.n	8008658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e1e7      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008658:	4b0e      	ldr	r3, [pc, #56]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800865a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0ef      	beq.n	8008646 <HAL_RCC_OscConfig+0x22e>
 8008666:	e020      	b.n	80086aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008668:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 800866a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800866e:	4a09      	ldr	r2, [pc, #36]	; (8008694 <HAL_RCC_OscConfig+0x27c>)
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008678:	f7fb f96e 	bl	8003958 <HAL_GetTick>
 800867c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800867e:	e00d      	b.n	800869c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008680:	f7fb f96a 	bl	8003958 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d906      	bls.n	800869c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e1ca      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
 8008692:	bf00      	nop
 8008694:	40021000 	.word	0x40021000
 8008698:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800869c:	4b8c      	ldr	r3, [pc, #560]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 800869e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1ea      	bne.n	8008680 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 80a6 	beq.w	8008804 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086b8:	2300      	movs	r3, #0
 80086ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80086bc:	4b84      	ldr	r3, [pc, #528]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80086be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <HAL_RCC_OscConfig+0x2b4>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <HAL_RCC_OscConfig+0x2b6>
 80086cc:	2300      	movs	r3, #0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00d      	beq.n	80086ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086d2:	4b7f      	ldr	r3, [pc, #508]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80086d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d6:	4a7e      	ldr	r2, [pc, #504]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80086d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086dc:	6593      	str	r3, [r2, #88]	; 0x58
 80086de:	4b7c      	ldr	r3, [pc, #496]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80086e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80086ea:	2301      	movs	r3, #1
 80086ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086ee:	4b79      	ldr	r3, [pc, #484]	; (80088d4 <HAL_RCC_OscConfig+0x4bc>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d118      	bne.n	800872c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086fa:	4b76      	ldr	r3, [pc, #472]	; (80088d4 <HAL_RCC_OscConfig+0x4bc>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a75      	ldr	r2, [pc, #468]	; (80088d4 <HAL_RCC_OscConfig+0x4bc>)
 8008700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008706:	f7fb f927 	bl	8003958 <HAL_GetTick>
 800870a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800870c:	e008      	b.n	8008720 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800870e:	f7fb f923 	bl	8003958 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d901      	bls.n	8008720 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e183      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008720:	4b6c      	ldr	r3, [pc, #432]	; (80088d4 <HAL_RCC_OscConfig+0x4bc>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0f0      	beq.n	800870e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d108      	bne.n	8008746 <HAL_RCC_OscConfig+0x32e>
 8008734:	4b66      	ldr	r3, [pc, #408]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873a:	4a65      	ldr	r2, [pc, #404]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 800873c:	f043 0301 	orr.w	r3, r3, #1
 8008740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008744:	e024      	b.n	8008790 <HAL_RCC_OscConfig+0x378>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2b05      	cmp	r3, #5
 800874c:	d110      	bne.n	8008770 <HAL_RCC_OscConfig+0x358>
 800874e:	4b60      	ldr	r3, [pc, #384]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008754:	4a5e      	ldr	r2, [pc, #376]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008756:	f043 0304 	orr.w	r3, r3, #4
 800875a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800875e:	4b5c      	ldr	r3, [pc, #368]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008764:	4a5a      	ldr	r2, [pc, #360]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800876e:	e00f      	b.n	8008790 <HAL_RCC_OscConfig+0x378>
 8008770:	4b57      	ldr	r3, [pc, #348]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008776:	4a56      	ldr	r2, [pc, #344]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008780:	4b53      	ldr	r3, [pc, #332]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008786:	4a52      	ldr	r2, [pc, #328]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008788:	f023 0304 	bic.w	r3, r3, #4
 800878c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d016      	beq.n	80087c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008798:	f7fb f8de 	bl	8003958 <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800879e:	e00a      	b.n	80087b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a0:	f7fb f8da 	bl	8003958 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e138      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087b6:	4b46      	ldr	r3, [pc, #280]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80087b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0ed      	beq.n	80087a0 <HAL_RCC_OscConfig+0x388>
 80087c4:	e015      	b.n	80087f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c6:	f7fb f8c7 	bl	8003958 <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087cc:	e00a      	b.n	80087e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ce:	f7fb f8c3 	bl	8003958 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087dc:	4293      	cmp	r3, r2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e121      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087e4:	4b3a      	ldr	r3, [pc, #232]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1ed      	bne.n	80087ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087f2:	7ffb      	ldrb	r3, [r7, #31]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d105      	bne.n	8008804 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087f8:	4b35      	ldr	r3, [pc, #212]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80087fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fc:	4a34      	ldr	r2, [pc, #208]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80087fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d03c      	beq.n	800888a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01c      	beq.n	8008852 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008818:	4b2d      	ldr	r3, [pc, #180]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 800881a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800881e:	4a2c      	ldr	r2, [pc, #176]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008820:	f043 0301 	orr.w	r3, r3, #1
 8008824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008828:	f7fb f896 	bl	8003958 <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008830:	f7fb f892 	bl	8003958 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e0f2      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008842:	4b23      	ldr	r3, [pc, #140]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0ef      	beq.n	8008830 <HAL_RCC_OscConfig+0x418>
 8008850:	e01b      	b.n	800888a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008852:	4b1f      	ldr	r3, [pc, #124]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008858:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008862:	f7fb f879 	bl	8003958 <HAL_GetTick>
 8008866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800886a:	f7fb f875 	bl	8003958 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e0d5      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800887c:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 800887e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1ef      	bne.n	800886a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 80c9 	beq.w	8008a26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008894:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f003 030c 	and.w	r3, r3, #12
 800889c:	2b0c      	cmp	r3, #12
 800889e:	f000 8083 	beq.w	80089a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d15e      	bne.n	8008968 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a08      	ldr	r2, [pc, #32]	; (80088d0 <HAL_RCC_OscConfig+0x4b8>)
 80088b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b6:	f7fb f84f 	bl	8003958 <HAL_GetTick>
 80088ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088bc:	e00c      	b.n	80088d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088be:	f7fb f84b 	bl	8003958 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d905      	bls.n	80088d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e0ab      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
 80088d0:	40021000 	.word	0x40021000
 80088d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088d8:	4b55      	ldr	r3, [pc, #340]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1ec      	bne.n	80088be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088e4:	4b52      	ldr	r3, [pc, #328]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	4b52      	ldr	r3, [pc, #328]	; (8008a34 <HAL_RCC_OscConfig+0x61c>)
 80088ea:	4013      	ands	r3, r2
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6a11      	ldr	r1, [r2, #32]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088f4:	3a01      	subs	r2, #1
 80088f6:	0112      	lsls	r2, r2, #4
 80088f8:	4311      	orrs	r1, r2
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80088fe:	0212      	lsls	r2, r2, #8
 8008900:	4311      	orrs	r1, r2
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008906:	0852      	lsrs	r2, r2, #1
 8008908:	3a01      	subs	r2, #1
 800890a:	0552      	lsls	r2, r2, #21
 800890c:	4311      	orrs	r1, r2
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008912:	0852      	lsrs	r2, r2, #1
 8008914:	3a01      	subs	r2, #1
 8008916:	0652      	lsls	r2, r2, #25
 8008918:	4311      	orrs	r1, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800891e:	06d2      	lsls	r2, r2, #27
 8008920:	430a      	orrs	r2, r1
 8008922:	4943      	ldr	r1, [pc, #268]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 8008924:	4313      	orrs	r3, r2
 8008926:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008928:	4b41      	ldr	r3, [pc, #260]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a40      	ldr	r2, [pc, #256]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 800892e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008932:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008934:	4b3e      	ldr	r3, [pc, #248]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	4a3d      	ldr	r2, [pc, #244]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 800893a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800893e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008940:	f7fb f80a 	bl	8003958 <HAL_GetTick>
 8008944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008946:	e008      	b.n	800895a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008948:	f7fb f806 	bl	8003958 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e066      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800895a:	4b35      	ldr	r3, [pc, #212]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0f0      	beq.n	8008948 <HAL_RCC_OscConfig+0x530>
 8008966:	e05e      	b.n	8008a26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008968:	4b31      	ldr	r3, [pc, #196]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a30      	ldr	r2, [pc, #192]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 800896e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008974:	f7fa fff0 	bl	8003958 <HAL_GetTick>
 8008978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800897a:	e008      	b.n	800898e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800897c:	f7fa ffec 	bl	8003958 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	2b02      	cmp	r3, #2
 8008988:	d901      	bls.n	800898e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e04c      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800898e:	4b28      	ldr	r3, [pc, #160]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1f0      	bne.n	800897c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800899a:	4b25      	ldr	r3, [pc, #148]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	4924      	ldr	r1, [pc, #144]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 80089a0:	4b25      	ldr	r3, [pc, #148]	; (8008a38 <HAL_RCC_OscConfig+0x620>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	60cb      	str	r3, [r1, #12]
 80089a6:	e03e      	b.n	8008a26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e039      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80089b4:	4b1e      	ldr	r3, [pc, #120]	; (8008a30 <HAL_RCC_OscConfig+0x618>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f003 0203 	and.w	r2, r3, #3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d12c      	bne.n	8008a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	3b01      	subs	r3, #1
 80089d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d123      	bne.n	8008a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d11b      	bne.n	8008a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d113      	bne.n	8008a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	085b      	lsrs	r3, r3, #1
 8008a06:	3b01      	subs	r3, #1
 8008a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d109      	bne.n	8008a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a18:	085b      	lsrs	r3, r3, #1
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d001      	beq.n	8008a26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3720      	adds	r7, #32
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40021000 	.word	0x40021000
 8008a34:	019f800c 	.word	0x019f800c
 8008a38:	feeefffc 	.word	0xfeeefffc

08008a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e11e      	b.n	8008c92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a54:	4b91      	ldr	r3, [pc, #580]	; (8008c9c <HAL_RCC_ClockConfig+0x260>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 030f 	and.w	r3, r3, #15
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d910      	bls.n	8008a84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a62:	4b8e      	ldr	r3, [pc, #568]	; (8008c9c <HAL_RCC_ClockConfig+0x260>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f023 020f 	bic.w	r2, r3, #15
 8008a6a:	498c      	ldr	r1, [pc, #560]	; (8008c9c <HAL_RCC_ClockConfig+0x260>)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a72:	4b8a      	ldr	r3, [pc, #552]	; (8008c9c <HAL_RCC_ClockConfig+0x260>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d001      	beq.n	8008a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e106      	b.n	8008c92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d073      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d129      	bne.n	8008aec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a98:	4b81      	ldr	r3, [pc, #516]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e0f4      	b.n	8008c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008aa8:	f000 f966 	bl	8008d78 <RCC_GetSysClockFreqFromPLLSource>
 8008aac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	4a7c      	ldr	r2, [pc, #496]	; (8008ca4 <HAL_RCC_ClockConfig+0x268>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d93f      	bls.n	8008b36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008ab6:	4b7a      	ldr	r3, [pc, #488]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d033      	beq.n	8008b36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d12f      	bne.n	8008b36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008ad6:	4b72      	ldr	r3, [pc, #456]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ade:	4a70      	ldr	r2, [pc, #448]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008ae6:	2380      	movs	r3, #128	; 0x80
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e024      	b.n	8008b36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d107      	bne.n	8008b04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008af4:	4b6a      	ldr	r3, [pc, #424]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d109      	bne.n	8008b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e0c6      	b.n	8008c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b04:	4b66      	ldr	r3, [pc, #408]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0be      	b.n	8008c92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008b14:	f000 f8ce 	bl	8008cb4 <HAL_RCC_GetSysClockFreq>
 8008b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	4a61      	ldr	r2, [pc, #388]	; (8008ca4 <HAL_RCC_ClockConfig+0x268>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d909      	bls.n	8008b36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008b22:	4b5f      	ldr	r3, [pc, #380]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b2a:	4a5d      	ldr	r2, [pc, #372]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008b32:	2380      	movs	r3, #128	; 0x80
 8008b34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b36:	4b5a      	ldr	r3, [pc, #360]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f023 0203 	bic.w	r2, r3, #3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4957      	ldr	r1, [pc, #348]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b48:	f7fa ff06 	bl	8003958 <HAL_GetTick>
 8008b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b4e:	e00a      	b.n	8008b66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b50:	f7fa ff02 	bl	8003958 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e095      	b.n	8008c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b66:	4b4e      	ldr	r3, [pc, #312]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 020c 	and.w	r2, r3, #12
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d1eb      	bne.n	8008b50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d023      	beq.n	8008bcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b90:	4b43      	ldr	r3, [pc, #268]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	4a42      	ldr	r2, [pc, #264]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008b96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008b9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0308 	and.w	r3, r3, #8
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008ba8:	4b3d      	ldr	r3, [pc, #244]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008bb0:	4a3b      	ldr	r2, [pc, #236]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008bb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bb8:	4b39      	ldr	r3, [pc, #228]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	4936      	ldr	r1, [pc, #216]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	608b      	str	r3, [r1, #8]
 8008bca:	e008      	b.n	8008bde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	2b80      	cmp	r3, #128	; 0x80
 8008bd0:	d105      	bne.n	8008bde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008bd2:	4b33      	ldr	r3, [pc, #204]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	4a32      	ldr	r2, [pc, #200]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bde:	4b2f      	ldr	r3, [pc, #188]	; (8008c9c <HAL_RCC_ClockConfig+0x260>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d21d      	bcs.n	8008c28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bec:	4b2b      	ldr	r3, [pc, #172]	; (8008c9c <HAL_RCC_ClockConfig+0x260>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f023 020f 	bic.w	r2, r3, #15
 8008bf4:	4929      	ldr	r1, [pc, #164]	; (8008c9c <HAL_RCC_ClockConfig+0x260>)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008bfc:	f7fa feac 	bl	8003958 <HAL_GetTick>
 8008c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c02:	e00a      	b.n	8008c1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c04:	f7fa fea8 	bl	8003958 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e03b      	b.n	8008c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c1a:	4b20      	ldr	r3, [pc, #128]	; (8008c9c <HAL_RCC_ClockConfig+0x260>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 030f 	and.w	r3, r3, #15
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d1ed      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d008      	beq.n	8008c46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c34:	4b1a      	ldr	r3, [pc, #104]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	4917      	ldr	r1, [pc, #92]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d009      	beq.n	8008c66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c52:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	490f      	ldr	r1, [pc, #60]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c66:	f000 f825 	bl	8008cb4 <HAL_RCC_GetSysClockFreq>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <HAL_RCC_ClockConfig+0x264>)
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	091b      	lsrs	r3, r3, #4
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	490c      	ldr	r1, [pc, #48]	; (8008ca8 <HAL_RCC_ClockConfig+0x26c>)
 8008c78:	5ccb      	ldrb	r3, [r1, r3]
 8008c7a:	f003 031f 	and.w	r3, r3, #31
 8008c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c82:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008c86:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <HAL_RCC_ClockConfig+0x274>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fa fe18 	bl	80038c0 <HAL_InitTick>
 8008c90:	4603      	mov	r3, r0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	40022000 	.word	0x40022000
 8008ca0:	40021000 	.word	0x40021000
 8008ca4:	04c4b400 	.word	0x04c4b400
 8008ca8:	0800d8a0 	.word	0x0800d8a0
 8008cac:	20000018 	.word	0x20000018
 8008cb0:	20000020 	.word	0x20000020

08008cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008cba:	4b2c      	ldr	r3, [pc, #176]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 030c 	and.w	r3, r3, #12
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d102      	bne.n	8008ccc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008cc6:	4b2a      	ldr	r3, [pc, #168]	; (8008d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008cc8:	613b      	str	r3, [r7, #16]
 8008cca:	e047      	b.n	8008d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008ccc:	4b27      	ldr	r3, [pc, #156]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 030c 	and.w	r3, r3, #12
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d102      	bne.n	8008cde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008cd8:	4b26      	ldr	r3, [pc, #152]	; (8008d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	e03e      	b.n	8008d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008cde:	4b23      	ldr	r3, [pc, #140]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 030c 	and.w	r3, r3, #12
 8008ce6:	2b0c      	cmp	r3, #12
 8008ce8:	d136      	bne.n	8008d58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008cea:	4b20      	ldr	r3, [pc, #128]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008cf4:	4b1d      	ldr	r3, [pc, #116]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	091b      	lsrs	r3, r3, #4
 8008cfa:	f003 030f 	and.w	r3, r3, #15
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d10c      	bne.n	8008d22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d08:	4a1a      	ldr	r2, [pc, #104]	; (8008d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d10:	4a16      	ldr	r2, [pc, #88]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d12:	68d2      	ldr	r2, [r2, #12]
 8008d14:	0a12      	lsrs	r2, r2, #8
 8008d16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d1a:	fb02 f303 	mul.w	r3, r2, r3
 8008d1e:	617b      	str	r3, [r7, #20]
      break;
 8008d20:	e00c      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d22:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d2a:	4a10      	ldr	r2, [pc, #64]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d2c:	68d2      	ldr	r2, [r2, #12]
 8008d2e:	0a12      	lsrs	r2, r2, #8
 8008d30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d34:	fb02 f303 	mul.w	r3, r2, r3
 8008d38:	617b      	str	r3, [r7, #20]
      break;
 8008d3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	0e5b      	lsrs	r3, r3, #25
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	3301      	adds	r3, #1
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	e001      	b.n	8008d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008d5c:	693b      	ldr	r3, [r7, #16]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40021000 	.word	0x40021000
 8008d70:	00f42400 	.word	0x00f42400
 8008d74:	007a1200 	.word	0x007a1200

08008d78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d7e:	4b1e      	ldr	r3, [pc, #120]	; (8008df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f003 0303 	and.w	r3, r3, #3
 8008d86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d88:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	091b      	lsrs	r3, r3, #4
 8008d8e:	f003 030f 	and.w	r3, r3, #15
 8008d92:	3301      	adds	r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d10c      	bne.n	8008db6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d9c:	4a17      	ldr	r2, [pc, #92]	; (8008dfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da4:	4a14      	ldr	r2, [pc, #80]	; (8008df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008da6:	68d2      	ldr	r2, [r2, #12]
 8008da8:	0a12      	lsrs	r2, r2, #8
 8008daa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008dae:	fb02 f303 	mul.w	r3, r2, r3
 8008db2:	617b      	str	r3, [r7, #20]
    break;
 8008db4:	e00c      	b.n	8008dd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008db6:	4a12      	ldr	r2, [pc, #72]	; (8008e00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbe:	4a0e      	ldr	r2, [pc, #56]	; (8008df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008dc0:	68d2      	ldr	r2, [r2, #12]
 8008dc2:	0a12      	lsrs	r2, r2, #8
 8008dc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008dc8:	fb02 f303 	mul.w	r3, r2, r3
 8008dcc:	617b      	str	r3, [r7, #20]
    break;
 8008dce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008dd0:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	0e5b      	lsrs	r3, r3, #25
 8008dd6:	f003 0303 	and.w	r3, r3, #3
 8008dda:	3301      	adds	r3, #1
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008dea:	687b      	ldr	r3, [r7, #4]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	40021000 	.word	0x40021000
 8008dfc:	007a1200 	.word	0x007a1200
 8008e00:	00f42400 	.word	0x00f42400

08008e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e10:	2300      	movs	r3, #0
 8008e12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 8098 	beq.w	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e22:	2300      	movs	r3, #0
 8008e24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e26:	4b43      	ldr	r3, [pc, #268]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10d      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e32:	4b40      	ldr	r3, [pc, #256]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e36:	4a3f      	ldr	r2, [pc, #252]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8008e3e:	4b3d      	ldr	r3, [pc, #244]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e46:	60bb      	str	r3, [r7, #8]
 8008e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e4e:	4b3a      	ldr	r3, [pc, #232]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a39      	ldr	r2, [pc, #228]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e5a:	f7fa fd7d 	bl	8003958 <HAL_GetTick>
 8008e5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e60:	e009      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e62:	f7fa fd79 	bl	8003958 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d902      	bls.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	74fb      	strb	r3, [r7, #19]
        break;
 8008e74:	e005      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e76:	4b30      	ldr	r3, [pc, #192]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0ef      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008e82:	7cfb      	ldrb	r3, [r7, #19]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d159      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e88:	4b2a      	ldr	r3, [pc, #168]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d01e      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d019      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008ea4:	4b23      	ldr	r3, [pc, #140]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008eb0:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb6:	4a1f      	ldr	r2, [pc, #124]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ec0:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec6:	4a1b      	ldr	r2, [pc, #108]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ed0:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d016      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee2:	f7fa fd39 	bl	8003958 <HAL_GetTick>
 8008ee6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ee8:	e00b      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eea:	f7fa fd35 	bl	8003958 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d902      	bls.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	74fb      	strb	r3, [r7, #19]
            break;
 8008f00:	e006      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f02:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d0ec      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008f10:	7cfb      	ldrb	r3, [r7, #19]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10b      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f16:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f24:	4903      	ldr	r1, [pc, #12]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008f2c:	e008      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f2e:	7cfb      	ldrb	r3, [r7, #19]
 8008f30:	74bb      	strb	r3, [r7, #18]
 8008f32:	e005      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f34:	40021000 	.word	0x40021000
 8008f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3c:	7cfb      	ldrb	r3, [r7, #19]
 8008f3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f40:	7c7b      	ldrb	r3, [r7, #17]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d105      	bne.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f46:	4ba7      	ldr	r3, [pc, #668]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4a:	4aa6      	ldr	r2, [pc, #664]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f5e:	4ba1      	ldr	r3, [pc, #644]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f64:	f023 0203 	bic.w	r2, r3, #3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	499d      	ldr	r1, [pc, #628]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0302 	and.w	r3, r3, #2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00a      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f80:	4b98      	ldr	r3, [pc, #608]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f86:	f023 020c 	bic.w	r2, r3, #12
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	4995      	ldr	r1, [pc, #596]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008fa2:	4b90      	ldr	r3, [pc, #576]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	498c      	ldr	r1, [pc, #560]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fc4:	4b87      	ldr	r3, [pc, #540]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	4984      	ldr	r1, [pc, #528]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0310 	and.w	r3, r3, #16
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008fe6:	4b7f      	ldr	r3, [pc, #508]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	497b      	ldr	r1, [pc, #492]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009008:	4b76      	ldr	r3, [pc, #472]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800900a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800900e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	4973      	ldr	r1, [pc, #460]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009018:	4313      	orrs	r3, r2
 800901a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800902a:	4b6e      	ldr	r3, [pc, #440]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800902c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009030:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	496a      	ldr	r1, [pc, #424]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800903a:	4313      	orrs	r3, r2
 800903c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800904c:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009052:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	4962      	ldr	r1, [pc, #392]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800905c:	4313      	orrs	r3, r2
 800905e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800906e:	4b5d      	ldr	r3, [pc, #372]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	4959      	ldr	r1, [pc, #356]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800907e:	4313      	orrs	r3, r2
 8009080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009090:	4b54      	ldr	r3, [pc, #336]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009096:	f023 0203 	bic.w	r2, r3, #3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	4951      	ldr	r1, [pc, #324]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090b2:	4b4c      	ldr	r3, [pc, #304]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	4948      	ldr	r1, [pc, #288]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d015      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090d4:	4b43      	ldr	r3, [pc, #268]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	4940      	ldr	r1, [pc, #256]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090f2:	d105      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090f4:	4b3b      	ldr	r3, [pc, #236]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	4a3a      	ldr	r2, [pc, #232]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009108:	2b00      	cmp	r3, #0
 800910a:	d015      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800910c:	4b35      	ldr	r3, [pc, #212]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800910e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911a:	4932      	ldr	r1, [pc, #200]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800911c:	4313      	orrs	r3, r2
 800911e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800912a:	d105      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800912c:	4b2d      	ldr	r3, [pc, #180]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	4a2c      	ldr	r2, [pc, #176]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009136:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d015      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009144:	4b27      	ldr	r3, [pc, #156]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	4924      	ldr	r1, [pc, #144]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009154:	4313      	orrs	r3, r2
 8009156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009162:	d105      	bne.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009164:	4b1f      	ldr	r3, [pc, #124]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800916a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800916e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d015      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800917c:	4b19      	ldr	r3, [pc, #100]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800917e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	4916      	ldr	r1, [pc, #88]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800918c:	4313      	orrs	r3, r2
 800918e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800919a:	d105      	bne.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800919c:	4b11      	ldr	r3, [pc, #68]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	4a10      	ldr	r2, [pc, #64]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d019      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091b4:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	4908      	ldr	r1, [pc, #32]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091d2:	d109      	bne.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091d4:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	4a02      	ldr	r2, [pc, #8]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091de:	60d3      	str	r3, [r2, #12]
 80091e0:	e002      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80091e2:	bf00      	nop
 80091e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d015      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80091f4:	4b29      	ldr	r3, [pc, #164]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009202:	4926      	ldr	r1, [pc, #152]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009204:	4313      	orrs	r3, r2
 8009206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009212:	d105      	bne.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009214:	4b21      	ldr	r3, [pc, #132]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	4a20      	ldr	r2, [pc, #128]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800921a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800921e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d015      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800922c:	4b1b      	ldr	r3, [pc, #108]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800922e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009232:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800923a:	4918      	ldr	r1, [pc, #96]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800923c:	4313      	orrs	r3, r2
 800923e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800924a:	d105      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800924c:	4b13      	ldr	r3, [pc, #76]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	4a12      	ldr	r2, [pc, #72]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009256:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d015      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800926a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009272:	490a      	ldr	r1, [pc, #40]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009274:	4313      	orrs	r3, r2
 8009276:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009282:	d105      	bne.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	4a04      	ldr	r2, [pc, #16]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800928a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800928e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009290:	7cbb      	ldrb	r3, [r7, #18]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	40021000 	.word	0x40021000

080092a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e049      	b.n	8009346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d106      	bne.n	80092cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7f9 fc26 	bl	8002b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3304      	adds	r3, #4
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f000 fb76 	bl	80099d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b01      	cmp	r3, #1
 8009362:	d001      	beq.n	8009368 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e04c      	b.n	8009402 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a26      	ldr	r2, [pc, #152]	; (8009410 <HAL_TIM_Base_Start+0xc0>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d022      	beq.n	80093c0 <HAL_TIM_Base_Start+0x70>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009382:	d01d      	beq.n	80093c0 <HAL_TIM_Base_Start+0x70>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a22      	ldr	r2, [pc, #136]	; (8009414 <HAL_TIM_Base_Start+0xc4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d018      	beq.n	80093c0 <HAL_TIM_Base_Start+0x70>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a21      	ldr	r2, [pc, #132]	; (8009418 <HAL_TIM_Base_Start+0xc8>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d013      	beq.n	80093c0 <HAL_TIM_Base_Start+0x70>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a1f      	ldr	r2, [pc, #124]	; (800941c <HAL_TIM_Base_Start+0xcc>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00e      	beq.n	80093c0 <HAL_TIM_Base_Start+0x70>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a1e      	ldr	r2, [pc, #120]	; (8009420 <HAL_TIM_Base_Start+0xd0>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d009      	beq.n	80093c0 <HAL_TIM_Base_Start+0x70>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a1c      	ldr	r2, [pc, #112]	; (8009424 <HAL_TIM_Base_Start+0xd4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d004      	beq.n	80093c0 <HAL_TIM_Base_Start+0x70>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a1b      	ldr	r2, [pc, #108]	; (8009428 <HAL_TIM_Base_Start+0xd8>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d115      	bne.n	80093ec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	4b19      	ldr	r3, [pc, #100]	; (800942c <HAL_TIM_Base_Start+0xdc>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b06      	cmp	r3, #6
 80093d0:	d015      	beq.n	80093fe <HAL_TIM_Base_Start+0xae>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093d8:	d011      	beq.n	80093fe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 0201 	orr.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ea:	e008      	b.n	80093fe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0201 	orr.w	r2, r2, #1
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	e000      	b.n	8009400 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40012c00 	.word	0x40012c00
 8009414:	40000400 	.word	0x40000400
 8009418:	40000800 	.word	0x40000800
 800941c:	40000c00 	.word	0x40000c00
 8009420:	40013400 	.word	0x40013400
 8009424:	40014000 	.word	0x40014000
 8009428:	40015000 	.word	0x40015000
 800942c:	00010007 	.word	0x00010007

08009430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d020      	beq.n	8009494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f003 0302 	and.w	r3, r3, #2
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01b      	beq.n	8009494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0202 	mvn.w	r2, #2
 8009464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fa8a 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 8009480:	e005      	b.n	800948e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa7c 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fa8d 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	d020      	beq.n	80094e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01b      	beq.n	80094e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0204 	mvn.w	r2, #4
 80094b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2202      	movs	r2, #2
 80094b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fa64 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 80094cc:	e005      	b.n	80094da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa56 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fa67 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f003 0308 	and.w	r3, r3, #8
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d020      	beq.n	800952c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f003 0308 	and.w	r3, r3, #8
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d01b      	beq.n	800952c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f06f 0208 	mvn.w	r2, #8
 80094fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2204      	movs	r2, #4
 8009502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa3e 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 8009518:	e005      	b.n	8009526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fa30 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fa41 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	f003 0310 	and.w	r3, r3, #16
 8009532:	2b00      	cmp	r3, #0
 8009534:	d020      	beq.n	8009578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01b      	beq.n	8009578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0210 	mvn.w	r2, #16
 8009548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2208      	movs	r2, #8
 800954e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa18 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 8009564:	e005      	b.n	8009572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fa0a 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fa1b 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00c      	beq.n	800959c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d007      	beq.n	800959c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0201 	mvn.w	r2, #1
 8009594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f9e8 	bl	800996c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00c      	beq.n	80095ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d007      	beq.n	80095ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80095c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fcc9 	bl	8009f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00c      	beq.n	80095ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d007      	beq.n	80095ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fcc1 	bl	8009f70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00c      	beq.n	8009612 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800960a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f9d5 	bl	80099bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00c      	beq.n	8009636 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d007      	beq.n	8009636 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f06f 0220 	mvn.w	r2, #32
 800962e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fc89 	bl	8009f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00c      	beq.n	800965a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d007      	beq.n	800965a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fc95 	bl	8009f84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00c      	beq.n	800967e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d007      	beq.n	800967e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fc8d 	bl	8009f98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00c      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d007      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800969a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fc85 	bl	8009fac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00c      	beq.n	80096c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d007      	beq.n	80096c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80096be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fc7d 	bl	8009fc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096c6:	bf00      	nop
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_TIM_ConfigClockSource+0x1c>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e0ee      	b.n	80098ca <HAL_TIM_ConfigClockSource+0x1fa>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800970a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800970e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a6b      	ldr	r2, [pc, #428]	; (80098d4 <HAL_TIM_ConfigClockSource+0x204>)
 8009726:	4293      	cmp	r3, r2
 8009728:	f000 80b9 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800972c:	4a69      	ldr	r2, [pc, #420]	; (80098d4 <HAL_TIM_ConfigClockSource+0x204>)
 800972e:	4293      	cmp	r3, r2
 8009730:	f200 80be 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009734:	4a68      	ldr	r2, [pc, #416]	; (80098d8 <HAL_TIM_ConfigClockSource+0x208>)
 8009736:	4293      	cmp	r3, r2
 8009738:	f000 80b1 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800973c:	4a66      	ldr	r2, [pc, #408]	; (80098d8 <HAL_TIM_ConfigClockSource+0x208>)
 800973e:	4293      	cmp	r3, r2
 8009740:	f200 80b6 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009744:	4a65      	ldr	r2, [pc, #404]	; (80098dc <HAL_TIM_ConfigClockSource+0x20c>)
 8009746:	4293      	cmp	r3, r2
 8009748:	f000 80a9 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800974c:	4a63      	ldr	r2, [pc, #396]	; (80098dc <HAL_TIM_ConfigClockSource+0x20c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	f200 80ae 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009754:	4a62      	ldr	r2, [pc, #392]	; (80098e0 <HAL_TIM_ConfigClockSource+0x210>)
 8009756:	4293      	cmp	r3, r2
 8009758:	f000 80a1 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800975c:	4a60      	ldr	r2, [pc, #384]	; (80098e0 <HAL_TIM_ConfigClockSource+0x210>)
 800975e:	4293      	cmp	r3, r2
 8009760:	f200 80a6 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009764:	4a5f      	ldr	r2, [pc, #380]	; (80098e4 <HAL_TIM_ConfigClockSource+0x214>)
 8009766:	4293      	cmp	r3, r2
 8009768:	f000 8099 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800976c:	4a5d      	ldr	r2, [pc, #372]	; (80098e4 <HAL_TIM_ConfigClockSource+0x214>)
 800976e:	4293      	cmp	r3, r2
 8009770:	f200 809e 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009774:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009778:	f000 8091 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800977c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009780:	f200 8096 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009788:	f000 8089 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800978c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009790:	f200 808e 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009798:	d03e      	beq.n	8009818 <HAL_TIM_ConfigClockSource+0x148>
 800979a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800979e:	f200 8087 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a6:	f000 8086 	beq.w	80098b6 <HAL_TIM_ConfigClockSource+0x1e6>
 80097aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ae:	d87f      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097b0:	2b70      	cmp	r3, #112	; 0x70
 80097b2:	d01a      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0x11a>
 80097b4:	2b70      	cmp	r3, #112	; 0x70
 80097b6:	d87b      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097b8:	2b60      	cmp	r3, #96	; 0x60
 80097ba:	d050      	beq.n	800985e <HAL_TIM_ConfigClockSource+0x18e>
 80097bc:	2b60      	cmp	r3, #96	; 0x60
 80097be:	d877      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097c0:	2b50      	cmp	r3, #80	; 0x50
 80097c2:	d03c      	beq.n	800983e <HAL_TIM_ConfigClockSource+0x16e>
 80097c4:	2b50      	cmp	r3, #80	; 0x50
 80097c6:	d873      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097c8:	2b40      	cmp	r3, #64	; 0x40
 80097ca:	d058      	beq.n	800987e <HAL_TIM_ConfigClockSource+0x1ae>
 80097cc:	2b40      	cmp	r3, #64	; 0x40
 80097ce:	d86f      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097d0:	2b30      	cmp	r3, #48	; 0x30
 80097d2:	d064      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097d4:	2b30      	cmp	r3, #48	; 0x30
 80097d6:	d86b      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d060      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097dc:	2b20      	cmp	r3, #32
 80097de:	d867      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d05c      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	d05a      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097e8:	e062      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097fa:	f000 faef 	bl	8009ddc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800980c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	609a      	str	r2, [r3, #8]
      break;
 8009816:	e04f      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009828:	f000 fad8 	bl	8009ddc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800983a:	609a      	str	r2, [r3, #8]
      break;
 800983c:	e03c      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800984a:	461a      	mov	r2, r3
 800984c:	f000 fa4a 	bl	8009ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2150      	movs	r1, #80	; 0x50
 8009856:	4618      	mov	r0, r3
 8009858:	f000 faa3 	bl	8009da2 <TIM_ITRx_SetConfig>
      break;
 800985c:	e02c      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800986a:	461a      	mov	r2, r3
 800986c:	f000 fa69 	bl	8009d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2160      	movs	r1, #96	; 0x60
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fa93 	bl	8009da2 <TIM_ITRx_SetConfig>
      break;
 800987c:	e01c      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800988a:	461a      	mov	r2, r3
 800988c:	f000 fa2a 	bl	8009ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2140      	movs	r1, #64	; 0x40
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fa83 	bl	8009da2 <TIM_ITRx_SetConfig>
      break;
 800989c:	e00c      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4619      	mov	r1, r3
 80098a8:	4610      	mov	r0, r2
 80098aa:	f000 fa7a 	bl	8009da2 <TIM_ITRx_SetConfig>
      break;
 80098ae:	e003      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	73fb      	strb	r3, [r7, #15]
      break;
 80098b4:	e000      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80098b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	00100070 	.word	0x00100070
 80098d8:	00100050 	.word	0x00100050
 80098dc:	00100040 	.word	0x00100040
 80098e0:	00100030 	.word	0x00100030
 80098e4:	00100020 	.word	0x00100020

080098e8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d101      	bne.n	8009900 <HAL_TIM_SlaveConfigSynchro+0x18>
 80098fc:	2302      	movs	r3, #2
 80098fe:	e031      	b.n	8009964 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f910 	bl	8009b38 <TIM_SlaveTimer_SetConfig>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d009      	beq.n	8009932 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e018      	b.n	8009964 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009940:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009950:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a4c      	ldr	r2, [pc, #304]	; (8009b14 <TIM_Base_SetConfig+0x144>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d017      	beq.n	8009a18 <TIM_Base_SetConfig+0x48>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ee:	d013      	beq.n	8009a18 <TIM_Base_SetConfig+0x48>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a49      	ldr	r2, [pc, #292]	; (8009b18 <TIM_Base_SetConfig+0x148>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00f      	beq.n	8009a18 <TIM_Base_SetConfig+0x48>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a48      	ldr	r2, [pc, #288]	; (8009b1c <TIM_Base_SetConfig+0x14c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00b      	beq.n	8009a18 <TIM_Base_SetConfig+0x48>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a47      	ldr	r2, [pc, #284]	; (8009b20 <TIM_Base_SetConfig+0x150>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d007      	beq.n	8009a18 <TIM_Base_SetConfig+0x48>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a46      	ldr	r2, [pc, #280]	; (8009b24 <TIM_Base_SetConfig+0x154>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d003      	beq.n	8009a18 <TIM_Base_SetConfig+0x48>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a45      	ldr	r2, [pc, #276]	; (8009b28 <TIM_Base_SetConfig+0x158>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d108      	bne.n	8009a2a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a39      	ldr	r2, [pc, #228]	; (8009b14 <TIM_Base_SetConfig+0x144>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d023      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a38:	d01f      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a36      	ldr	r2, [pc, #216]	; (8009b18 <TIM_Base_SetConfig+0x148>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d01b      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a35      	ldr	r2, [pc, #212]	; (8009b1c <TIM_Base_SetConfig+0x14c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d017      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a34      	ldr	r2, [pc, #208]	; (8009b20 <TIM_Base_SetConfig+0x150>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d013      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a33      	ldr	r2, [pc, #204]	; (8009b24 <TIM_Base_SetConfig+0x154>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d00f      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a33      	ldr	r2, [pc, #204]	; (8009b2c <TIM_Base_SetConfig+0x15c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d00b      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a32      	ldr	r2, [pc, #200]	; (8009b30 <TIM_Base_SetConfig+0x160>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d007      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a31      	ldr	r2, [pc, #196]	; (8009b34 <TIM_Base_SetConfig+0x164>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d003      	beq.n	8009a7a <TIM_Base_SetConfig+0xaa>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a2c      	ldr	r2, [pc, #176]	; (8009b28 <TIM_Base_SetConfig+0x158>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d108      	bne.n	8009a8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a18      	ldr	r2, [pc, #96]	; (8009b14 <TIM_Base_SetConfig+0x144>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d013      	beq.n	8009ae0 <TIM_Base_SetConfig+0x110>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a1a      	ldr	r2, [pc, #104]	; (8009b24 <TIM_Base_SetConfig+0x154>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d00f      	beq.n	8009ae0 <TIM_Base_SetConfig+0x110>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a1a      	ldr	r2, [pc, #104]	; (8009b2c <TIM_Base_SetConfig+0x15c>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d00b      	beq.n	8009ae0 <TIM_Base_SetConfig+0x110>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a19      	ldr	r2, [pc, #100]	; (8009b30 <TIM_Base_SetConfig+0x160>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d007      	beq.n	8009ae0 <TIM_Base_SetConfig+0x110>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a18      	ldr	r2, [pc, #96]	; (8009b34 <TIM_Base_SetConfig+0x164>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d003      	beq.n	8009ae0 <TIM_Base_SetConfig+0x110>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a13      	ldr	r2, [pc, #76]	; (8009b28 <TIM_Base_SetConfig+0x158>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d103      	bne.n	8009ae8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	691a      	ldr	r2, [r3, #16]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d105      	bne.n	8009b06 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f023 0201 	bic.w	r2, r3, #1
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	611a      	str	r2, [r3, #16]
  }
}
 8009b06:	bf00      	nop
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	40012c00 	.word	0x40012c00
 8009b18:	40000400 	.word	0x40000400
 8009b1c:	40000800 	.word	0x40000800
 8009b20:	40000c00 	.word	0x40000c00
 8009b24:	40013400 	.word	0x40013400
 8009b28:	40015000 	.word	0x40015000
 8009b2c:	40014000 	.word	0x40014000
 8009b30:	40014400 	.word	0x40014400
 8009b34:	40014800 	.word	0x40014800

08009b38 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b58:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	4a52      	ldr	r2, [pc, #328]	; (8009cd0 <TIM_SlaveTimer_SetConfig+0x198>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	f000 809a 	beq.w	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009b8e:	4a50      	ldr	r2, [pc, #320]	; (8009cd0 <TIM_SlaveTimer_SetConfig+0x198>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	f200 8093 	bhi.w	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009b96:	4a4f      	ldr	r2, [pc, #316]	; (8009cd4 <TIM_SlaveTimer_SetConfig+0x19c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	f000 8092 	beq.w	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009b9e:	4a4d      	ldr	r2, [pc, #308]	; (8009cd4 <TIM_SlaveTimer_SetConfig+0x19c>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	f200 808b 	bhi.w	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009ba6:	4a4c      	ldr	r2, [pc, #304]	; (8009cd8 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	f000 808a 	beq.w	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009bae:	4a4a      	ldr	r2, [pc, #296]	; (8009cd8 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	f200 8083 	bhi.w	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009bb6:	4a49      	ldr	r2, [pc, #292]	; (8009cdc <TIM_SlaveTimer_SetConfig+0x1a4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	f000 8082 	beq.w	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009bbe:	4a47      	ldr	r2, [pc, #284]	; (8009cdc <TIM_SlaveTimer_SetConfig+0x1a4>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d87b      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009bc4:	4a46      	ldr	r2, [pc, #280]	; (8009ce0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d07b      	beq.n	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009bca:	4a45      	ldr	r2, [pc, #276]	; (8009ce0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d875      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009bd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009bd4:	d075      	beq.n	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009bd6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009bda:	d86f      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009be0:	d06f      	beq.n	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009be6:	d869      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009be8:	2b70      	cmp	r3, #112	; 0x70
 8009bea:	d01a      	beq.n	8009c22 <TIM_SlaveTimer_SetConfig+0xea>
 8009bec:	2b70      	cmp	r3, #112	; 0x70
 8009bee:	d865      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009bf0:	2b60      	cmp	r3, #96	; 0x60
 8009bf2:	d059      	beq.n	8009ca8 <TIM_SlaveTimer_SetConfig+0x170>
 8009bf4:	2b60      	cmp	r3, #96	; 0x60
 8009bf6:	d861      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009bf8:	2b50      	cmp	r3, #80	; 0x50
 8009bfa:	d04b      	beq.n	8009c94 <TIM_SlaveTimer_SetConfig+0x15c>
 8009bfc:	2b50      	cmp	r3, #80	; 0x50
 8009bfe:	d85d      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009c00:	2b40      	cmp	r3, #64	; 0x40
 8009c02:	d019      	beq.n	8009c38 <TIM_SlaveTimer_SetConfig+0x100>
 8009c04:	2b40      	cmp	r3, #64	; 0x40
 8009c06:	d859      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009c08:	2b30      	cmp	r3, #48	; 0x30
 8009c0a:	d05a      	beq.n	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009c0c:	2b30      	cmp	r3, #48	; 0x30
 8009c0e:	d855      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009c10:	2b20      	cmp	r3, #32
 8009c12:	d056      	beq.n	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009c14:	2b20      	cmp	r3, #32
 8009c16:	d851      	bhi.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d052      	beq.n	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009c1c:	2b10      	cmp	r3, #16
 8009c1e:	d050      	beq.n	8009cc2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009c20:	e04c      	b.n	8009cbc <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009c32:	f000 f8d3 	bl	8009ddc <TIM_ETR_SetConfig>
      break;
 8009c36:	e045      	b.n	8009cc4 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b05      	cmp	r3, #5
 8009c3e:	d004      	beq.n	8009c4a <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009c44:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009c48:	d101      	bne.n	8009c4e <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e03b      	b.n	8009cc6 <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6a1a      	ldr	r2, [r3, #32]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0201 	bic.w	r2, r2, #1
 8009c64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c74:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	621a      	str	r2, [r3, #32]
      break;
 8009c92:	e017      	b.n	8009cc4 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	f000 f81f 	bl	8009ce4 <TIM_TI1_ConfigInputStage>
      break;
 8009ca6:	e00d      	b.n	8009cc4 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f000 f844 	bl	8009d42 <TIM_TI2_ConfigInputStage>
      break;
 8009cba:	e003      	b.n	8009cc4 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc0:	e000      	b.n	8009cc4 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8009cc2:	bf00      	nop
  }

  return status;
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	00100070 	.word	0x00100070
 8009cd4:	00100050 	.word	0x00100050
 8009cd8:	00100040 	.word	0x00100040
 8009cdc:	00100030 	.word	0x00100030
 8009ce0:	00100020 	.word	0x00100020

08009ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	f023 0201 	bic.w	r2, r3, #1
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f023 030a 	bic.w	r3, r3, #10
 8009d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	621a      	str	r2, [r3, #32]
}
 8009d36:	bf00      	nop
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b087      	sub	sp, #28
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	f023 0210 	bic.w	r2, r3, #16
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	031b      	lsls	r3, r3, #12
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	011b      	lsls	r3, r3, #4
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	621a      	str	r2, [r3, #32]
}
 8009d96:	bf00      	nop
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	f043 0307 	orr.w	r3, r3, #7
 8009dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	609a      	str	r2, [r3, #8]
}
 8009dd0:	bf00      	nop
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b087      	sub	sp, #28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	021a      	lsls	r2, r3, #8
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	609a      	str	r2, [r3, #8]
}
 8009e10:	bf00      	nop
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e074      	b.n	8009f1e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a34      	ldr	r2, [pc, #208]	; (8009f2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d009      	beq.n	8009e72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a33      	ldr	r2, [pc, #204]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d004      	beq.n	8009e72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a31      	ldr	r2, [pc, #196]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d108      	bne.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a21      	ldr	r2, [pc, #132]	; (8009f2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d022      	beq.n	8009ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb4:	d01d      	beq.n	8009ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a1f      	ldr	r2, [pc, #124]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d018      	beq.n	8009ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a1d      	ldr	r2, [pc, #116]	; (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d013      	beq.n	8009ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a1c      	ldr	r2, [pc, #112]	; (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00e      	beq.n	8009ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a15      	ldr	r2, [pc, #84]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d009      	beq.n	8009ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a18      	ldr	r2, [pc, #96]	; (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d004      	beq.n	8009ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a11      	ldr	r2, [pc, #68]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d10c      	bne.n	8009f0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	40012c00 	.word	0x40012c00
 8009f30:	40013400 	.word	0x40013400
 8009f34:	40015000 	.word	0x40015000
 8009f38:	40000400 	.word	0x40000400
 8009f3c:	40000800 	.word	0x40000800
 8009f40:	40000c00 	.word	0x40000c00
 8009f44:	40014000 	.word	0x40014000

08009f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b08b      	sub	sp, #44	; 0x2c
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	fa93 f3a3 	rbit	r3, r3
 8009fee:	613b      	str	r3, [r7, #16]
  return result;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009ffa:	2320      	movs	r3, #32
 8009ffc:	e003      	b.n	800a006 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	fab3 f383 	clz	r3, r3
 800a004:	b2db      	uxtb	r3, r3
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	2103      	movs	r1, #3
 800a00a:	fa01 f303 	lsl.w	r3, r1, r3
 800a00e:	43db      	mvns	r3, r3
 800a010:	401a      	ands	r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	fa93 f3a3 	rbit	r3, r3
 800a01c:	61fb      	str	r3, [r7, #28]
  return result;
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a028:	2320      	movs	r3, #32
 800a02a:	e003      	b.n	800a034 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	fab3 f383 	clz	r3, r3
 800a032:	b2db      	uxtb	r3, r3
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	fa01 f303 	lsl.w	r3, r1, r3
 800a03c:	431a      	orrs	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	601a      	str	r2, [r3, #0]
}
 800a042:	bf00      	nop
 800a044:	372c      	adds	r7, #44	; 0x2c
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a04e:	b480      	push	{r7}
 800a050:	b085      	sub	sp, #20
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	43db      	mvns	r3, r3
 800a062:	401a      	ands	r2, r3
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	fb01 f303 	mul.w	r3, r1, r3
 800a06c:	431a      	orrs	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	605a      	str	r2, [r3, #4]
}
 800a072:	bf00      	nop
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a07e:	b480      	push	{r7}
 800a080:	b08b      	sub	sp, #44	; 0x2c
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	fa93 f3a3 	rbit	r3, r3
 800a098:	613b      	str	r3, [r7, #16]
  return result;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a0a4:	2320      	movs	r3, #32
 800a0a6:	e003      	b.n	800a0b0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	fab3 f383 	clz	r3, r3
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	2103      	movs	r1, #3
 800a0b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	401a      	ands	r2, r3
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	fa93 f3a3 	rbit	r3, r3
 800a0c6:	61fb      	str	r3, [r7, #28]
  return result;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a0d2:	2320      	movs	r3, #32
 800a0d4:	e003      	b.n	800a0de <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	fab3 f383 	clz	r3, r3
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a0ec:	bf00      	nop
 800a0ee:	372c      	adds	r7, #44	; 0x2c
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b08b      	sub	sp, #44	; 0x2c
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	fa93 f3a3 	rbit	r3, r3
 800a112:	613b      	str	r3, [r7, #16]
  return result;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a11e:	2320      	movs	r3, #32
 800a120:	e003      	b.n	800a12a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	fab3 f383 	clz	r3, r3
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	005b      	lsls	r3, r3, #1
 800a12c:	2103      	movs	r1, #3
 800a12e:	fa01 f303 	lsl.w	r3, r1, r3
 800a132:	43db      	mvns	r3, r3
 800a134:	401a      	ands	r2, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	fa93 f3a3 	rbit	r3, r3
 800a140:	61fb      	str	r3, [r7, #28]
  return result;
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a14c:	2320      	movs	r3, #32
 800a14e:	e003      	b.n	800a158 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	fab3 f383 	clz	r3, r3
 800a156:	b2db      	uxtb	r3, r3
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	fa01 f303 	lsl.w	r3, r1, r3
 800a160:	431a      	orrs	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	60da      	str	r2, [r3, #12]
}
 800a166:	bf00      	nop
 800a168:	372c      	adds	r7, #44	; 0x2c
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a172:	b480      	push	{r7}
 800a174:	b08b      	sub	sp, #44	; 0x2c
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6a1a      	ldr	r2, [r3, #32]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	fa93 f3a3 	rbit	r3, r3
 800a18c:	613b      	str	r3, [r7, #16]
  return result;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a198:	2320      	movs	r3, #32
 800a19a:	e003      	b.n	800a1a4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	fab3 f383 	clz	r3, r3
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	210f      	movs	r1, #15
 800a1a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ac:	43db      	mvns	r3, r3
 800a1ae:	401a      	ands	r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	fa93 f3a3 	rbit	r3, r3
 800a1ba:	61fb      	str	r3, [r7, #28]
  return result;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a1c6:	2320      	movs	r3, #32
 800a1c8:	e003      	b.n	800a1d2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	fab3 f383 	clz	r3, r3
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a1e0:	bf00      	nop
 800a1e2:	372c      	adds	r7, #44	; 0x2c
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b08b      	sub	sp, #44	; 0x2c
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	0a1b      	lsrs	r3, r3, #8
 800a200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	fa93 f3a3 	rbit	r3, r3
 800a208:	613b      	str	r3, [r7, #16]
  return result;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a214:	2320      	movs	r3, #32
 800a216:	e003      	b.n	800a220 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	fab3 f383 	clz	r3, r3
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	210f      	movs	r1, #15
 800a224:	fa01 f303 	lsl.w	r3, r1, r3
 800a228:	43db      	mvns	r3, r3
 800a22a:	401a      	ands	r2, r3
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	0a1b      	lsrs	r3, r3, #8
 800a230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	fa93 f3a3 	rbit	r3, r3
 800a238:	61fb      	str	r3, [r7, #28]
  return result;
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a244:	2320      	movs	r3, #32
 800a246:	e003      	b.n	800a250 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	fab3 f383 	clz	r3, r3
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	fa01 f303 	lsl.w	r3, r1, r3
 800a258:	431a      	orrs	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a25e:	bf00      	nop
 800a260:	372c      	adds	r7, #44	; 0x2c
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b088      	sub	sp, #32
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	fa93 f3a3 	rbit	r3, r3
 800a280:	60fb      	str	r3, [r7, #12]
  return result;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <LL_GPIO_Init+0x26>
    return 32U;
 800a28c:	2320      	movs	r3, #32
 800a28e:	e003      	b.n	800a298 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	fab3 f383 	clz	r3, r3
 800a296:	b2db      	uxtb	r3, r3
 800a298:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a29a:	e048      	b.n	800a32e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d03a      	beq.n	800a328 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d003      	beq.n	800a2c2 <LL_GPIO_Init+0x58>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d10e      	bne.n	800a2e0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	69b9      	ldr	r1, [r7, #24]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff fed7 	bl	800a07e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	6819      	ldr	r1, [r3, #0]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff feb7 	bl	800a04e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	69b9      	ldr	r1, [r7, #24]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff ff05 	bl	800a0f8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d111      	bne.n	800a31a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2bff      	cmp	r3, #255	; 0xff
 800a2fa:	d807      	bhi.n	800a30c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	461a      	mov	r2, r3
 800a302:	69b9      	ldr	r1, [r7, #24]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff ff34 	bl	800a172 <LL_GPIO_SetAFPin_0_7>
 800a30a:	e006      	b.n	800a31a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	461a      	mov	r2, r3
 800a312:	69b9      	ldr	r1, [r7, #24]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff ff69 	bl	800a1ec <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	461a      	mov	r2, r3
 800a320:	69b9      	ldr	r1, [r7, #24]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff fe56 	bl	8009fd4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	3301      	adds	r3, #1
 800a32c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	fa22 f303 	lsr.w	r3, r2, r3
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1af      	bne.n	800a29c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3720      	adds	r7, #32
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a34c:	4b07      	ldr	r3, [pc, #28]	; (800a36c <LL_RCC_HSI_IsReady+0x24>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a358:	d101      	bne.n	800a35e <LL_RCC_HSI_IsReady+0x16>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e000      	b.n	800a360 <LL_RCC_HSI_IsReady+0x18>
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	40021000 	.word	0x40021000

0800a370 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a374:	4b07      	ldr	r3, [pc, #28]	; (800a394 <LL_RCC_LSE_IsReady+0x24>)
 800a376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d101      	bne.n	800a386 <LL_RCC_LSE_IsReady+0x16>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <LL_RCC_LSE_IsReady+0x18>
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	40021000 	.word	0x40021000

0800a398 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a398:	b480      	push	{r7}
 800a39a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a39c:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <LL_RCC_GetSysClkSource+0x18>)
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f003 030c 	and.w	r3, r3, #12
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	40021000 	.word	0x40021000

0800a3b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a3b8:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <LL_RCC_GetAHBPrescaler+0x18>)
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	40021000 	.word	0x40021000

0800a3d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a3d4:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	40021000 	.word	0x40021000

0800a3ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <LL_RCC_GetAPB2Prescaler+0x18>)
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40021000 	.word	0x40021000

0800a408 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a410:	4b06      	ldr	r3, [pc, #24]	; (800a42c <LL_RCC_GetUSARTClockSource+0x24>)
 800a412:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	401a      	ands	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	041b      	lsls	r3, r3, #16
 800a41e:	4313      	orrs	r3, r2
}
 800a420:	4618      	mov	r0, r3
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	40021000 	.word	0x40021000

0800a430 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800a438:	4b06      	ldr	r3, [pc, #24]	; (800a454 <LL_RCC_GetUARTClockSource+0x24>)
 800a43a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	401a      	ands	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	041b      	lsls	r3, r3, #16
 800a446:	4313      	orrs	r3, r2
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	40021000 	.word	0x40021000

0800a458 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a458:	b480      	push	{r7}
 800a45a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a45c:	4b04      	ldr	r3, [pc, #16]	; (800a470 <LL_RCC_PLL_GetMainSource+0x18>)
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f003 0303 	and.w	r3, r3, #3
}
 800a464:	4618      	mov	r0, r3
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	40021000 	.word	0x40021000

0800a474 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <LL_RCC_PLL_GetN+0x18>)
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	0a1b      	lsrs	r3, r3, #8
 800a47e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800a482:	4618      	mov	r0, r3
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	40021000 	.word	0x40021000

0800a490 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a494:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <LL_RCC_PLL_GetR+0x18>)
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	40021000 	.word	0x40021000

0800a4ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a4b0:	4b04      	ldr	r3, [pc, #16]	; (800a4c4 <LL_RCC_PLL_GetDivider+0x18>)
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40021000 	.word	0x40021000

0800a4c8 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d132      	bne.n	800a540 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff ff94 	bl	800a408 <LL_RCC_GetUSARTClockSource>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800a4e6:	d016      	beq.n	800a516 <LL_RCC_GetUSARTClockFreq+0x4e>
 800a4e8:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800a4ec:	d81c      	bhi.n	800a528 <LL_RCC_GetUSARTClockFreq+0x60>
 800a4ee:	4a51      	ldr	r2, [pc, #324]	; (800a634 <LL_RCC_GetUSARTClockFreq+0x16c>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d003      	beq.n	800a4fc <LL_RCC_GetUSARTClockFreq+0x34>
 800a4f4:	4a50      	ldr	r2, [pc, #320]	; (800a638 <LL_RCC_GetUSARTClockFreq+0x170>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d004      	beq.n	800a504 <LL_RCC_GetUSARTClockFreq+0x3c>
 800a4fa:	e015      	b.n	800a528 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a4fc:	f000 f92e 	bl	800a75c <RCC_GetSystemClockFreq>
 800a500:	60f8      	str	r0, [r7, #12]
        break;
 800a502:	e092      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a504:	f7ff ff20 	bl	800a348 <LL_RCC_HSI_IsReady>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 8082 	beq.w	800a614 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 800a510:	4b4a      	ldr	r3, [pc, #296]	; (800a63c <LL_RCC_GetUSARTClockFreq+0x174>)
 800a512:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a514:	e07e      	b.n	800a614 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a516:	f7ff ff2b 	bl	800a370 <LL_RCC_LSE_IsReady>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d07b      	beq.n	800a618 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 800a520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a524:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a526:	e077      	b.n	800a618 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a528:	f000 f918 	bl	800a75c <RCC_GetSystemClockFreq>
 800a52c:	4603      	mov	r3, r0
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f93a 	bl	800a7a8 <RCC_GetHCLKClockFreq>
 800a534:	4603      	mov	r3, r0
 800a536:	4618      	mov	r0, r3
 800a538:	f000 f964 	bl	800a804 <RCC_GetPCLK2ClockFreq>
 800a53c:	60f8      	str	r0, [r7, #12]
        break;
 800a53e:	e074      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b0c      	cmp	r3, #12
 800a544:	d131      	bne.n	800a5aa <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff ff5e 	bl	800a408 <LL_RCC_GetUSARTClockSource>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800a552:	d015      	beq.n	800a580 <LL_RCC_GetUSARTClockFreq+0xb8>
 800a554:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800a558:	d81b      	bhi.n	800a592 <LL_RCC_GetUSARTClockFreq+0xca>
 800a55a:	4a39      	ldr	r2, [pc, #228]	; (800a640 <LL_RCC_GetUSARTClockFreq+0x178>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d003      	beq.n	800a568 <LL_RCC_GetUSARTClockFreq+0xa0>
 800a560:	4a38      	ldr	r2, [pc, #224]	; (800a644 <LL_RCC_GetUSARTClockFreq+0x17c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d004      	beq.n	800a570 <LL_RCC_GetUSARTClockFreq+0xa8>
 800a566:	e014      	b.n	800a592 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a568:	f000 f8f8 	bl	800a75c <RCC_GetSystemClockFreq>
 800a56c:	60f8      	str	r0, [r7, #12]
        break;
 800a56e:	e05c      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a570:	f7ff feea 	bl	800a348 <LL_RCC_HSI_IsReady>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d050      	beq.n	800a61c <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 800a57a:	4b30      	ldr	r3, [pc, #192]	; (800a63c <LL_RCC_GetUSARTClockFreq+0x174>)
 800a57c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a57e:	e04d      	b.n	800a61c <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a580:	f7ff fef6 	bl	800a370 <LL_RCC_LSE_IsReady>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d04a      	beq.n	800a620 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 800a58a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a58e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a590:	e046      	b.n	800a620 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a592:	f000 f8e3 	bl	800a75c <RCC_GetSystemClockFreq>
 800a596:	4603      	mov	r3, r0
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 f905 	bl	800a7a8 <RCC_GetHCLKClockFreq>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 f919 	bl	800a7d8 <RCC_GetPCLK1ClockFreq>
 800a5a6:	60f8      	str	r0, [r7, #12]
        break;
 800a5a8:	e03f      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b30      	cmp	r3, #48	; 0x30
 800a5ae:	d13c      	bne.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7ff ff29 	bl	800a408 <LL_RCC_GetUSARTClockSource>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800a5bc:	d015      	beq.n	800a5ea <LL_RCC_GetUSARTClockFreq+0x122>
 800a5be:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800a5c2:	d81b      	bhi.n	800a5fc <LL_RCC_GetUSARTClockFreq+0x134>
 800a5c4:	4a20      	ldr	r2, [pc, #128]	; (800a648 <LL_RCC_GetUSARTClockFreq+0x180>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d003      	beq.n	800a5d2 <LL_RCC_GetUSARTClockFreq+0x10a>
 800a5ca:	4a20      	ldr	r2, [pc, #128]	; (800a64c <LL_RCC_GetUSARTClockFreq+0x184>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d004      	beq.n	800a5da <LL_RCC_GetUSARTClockFreq+0x112>
 800a5d0:	e014      	b.n	800a5fc <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800a5d2:	f000 f8c3 	bl	800a75c <RCC_GetSystemClockFreq>
 800a5d6:	60f8      	str	r0, [r7, #12]
          break;
 800a5d8:	e027      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800a5da:	f7ff feb5 	bl	800a348 <LL_RCC_HSI_IsReady>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01f      	beq.n	800a624 <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 800a5e4:	4b15      	ldr	r3, [pc, #84]	; (800a63c <LL_RCC_GetUSARTClockFreq+0x174>)
 800a5e6:	60fb      	str	r3, [r7, #12]
          }
          break;
 800a5e8:	e01c      	b.n	800a624 <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800a5ea:	f7ff fec1 	bl	800a370 <LL_RCC_LSE_IsReady>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d019      	beq.n	800a628 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 800a5f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5f8:	60fb      	str	r3, [r7, #12]
          }
          break;
 800a5fa:	e015      	b.n	800a628 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a5fc:	f000 f8ae 	bl	800a75c <RCC_GetSystemClockFreq>
 800a600:	4603      	mov	r3, r0
 800a602:	4618      	mov	r0, r3
 800a604:	f000 f8d0 	bl	800a7a8 <RCC_GetHCLKClockFreq>
 800a608:	4603      	mov	r3, r0
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f8e4 	bl	800a7d8 <RCC_GetPCLK1ClockFreq>
 800a610:	60f8      	str	r0, [r7, #12]
          break;
 800a612:	e00a      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800a614:	bf00      	nop
 800a616:	e008      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800a618:	bf00      	nop
 800a61a:	e006      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800a61c:	bf00      	nop
 800a61e:	e004      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800a620:	bf00      	nop
 800a622:	e002      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 800a624:	bf00      	nop
 800a626:	e000      	b.n	800a62a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 800a628:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800a62a:	68fb      	ldr	r3, [r7, #12]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	00030001 	.word	0x00030001
 800a638:	00030002 	.word	0x00030002
 800a63c:	00f42400 	.word	0x00f42400
 800a640:	000c0004 	.word	0x000c0004
 800a644:	000c0008 	.word	0x000c0008
 800a648:	00300010 	.word	0x00300010
 800a64c:	00300020 	.word	0x00300020

0800a650 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2bc0      	cmp	r3, #192	; 0xc0
 800a660:	d134      	bne.n	800a6cc <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7ff fee4 	bl	800a430 <LL_RCC_GetUARTClockSource>
 800a668:	4603      	mov	r3, r0
 800a66a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800a66e:	d015      	beq.n	800a69c <LL_RCC_GetUARTClockFreq+0x4c>
 800a670:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800a674:	d81b      	bhi.n	800a6ae <LL_RCC_GetUARTClockFreq+0x5e>
 800a676:	4a34      	ldr	r2, [pc, #208]	; (800a748 <LL_RCC_GetUARTClockFreq+0xf8>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d003      	beq.n	800a684 <LL_RCC_GetUARTClockFreq+0x34>
 800a67c:	4a33      	ldr	r2, [pc, #204]	; (800a74c <LL_RCC_GetUARTClockFreq+0xfc>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d004      	beq.n	800a68c <LL_RCC_GetUARTClockFreq+0x3c>
 800a682:	e014      	b.n	800a6ae <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800a684:	f000 f86a 	bl	800a75c <RCC_GetSystemClockFreq>
 800a688:	60f8      	str	r0, [r7, #12]
        break;
 800a68a:	e01f      	b.n	800a6cc <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a68c:	f7ff fe5c 	bl	800a348 <LL_RCC_HSI_IsReady>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d017      	beq.n	800a6c6 <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 800a696:	4b2e      	ldr	r3, [pc, #184]	; (800a750 <LL_RCC_GetUARTClockFreq+0x100>)
 800a698:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a69a:	e014      	b.n	800a6c6 <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a69c:	f7ff fe68 	bl	800a370 <LL_RCC_LSE_IsReady>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d011      	beq.n	800a6ca <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 800a6a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a6ac:	e00d      	b.n	800a6ca <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a6ae:	f000 f855 	bl	800a75c <RCC_GetSystemClockFreq>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 f877 	bl	800a7a8 <RCC_GetHCLKClockFreq>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f88b 	bl	800a7d8 <RCC_GetPCLK1ClockFreq>
 800a6c2:	60f8      	str	r0, [r7, #12]
        break;
 800a6c4:	e002      	b.n	800a6cc <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 800a6c6:	bf00      	nop
 800a6c8:	e000      	b.n	800a6cc <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 800a6ca:	bf00      	nop
    }
  }

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6d2:	d134      	bne.n	800a73e <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff feab 	bl	800a430 <LL_RCC_GetUARTClockSource>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800a6e0:	d015      	beq.n	800a70e <LL_RCC_GetUARTClockFreq+0xbe>
 800a6e2:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800a6e6:	d81b      	bhi.n	800a720 <LL_RCC_GetUARTClockFreq+0xd0>
 800a6e8:	4a1a      	ldr	r2, [pc, #104]	; (800a754 <LL_RCC_GetUARTClockFreq+0x104>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d003      	beq.n	800a6f6 <LL_RCC_GetUARTClockFreq+0xa6>
 800a6ee:	4a1a      	ldr	r2, [pc, #104]	; (800a758 <LL_RCC_GetUARTClockFreq+0x108>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d004      	beq.n	800a6fe <LL_RCC_GetUARTClockFreq+0xae>
 800a6f4:	e014      	b.n	800a720 <LL_RCC_GetUARTClockFreq+0xd0>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800a6f6:	f000 f831 	bl	800a75c <RCC_GetSystemClockFreq>
 800a6fa:	60f8      	str	r0, [r7, #12]
        break;
 800a6fc:	e01f      	b.n	800a73e <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a6fe:	f7ff fe23 	bl	800a348 <LL_RCC_HSI_IsReady>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d017      	beq.n	800a738 <LL_RCC_GetUARTClockFreq+0xe8>
        {
          uart_frequency = HSI_VALUE;
 800a708:	4b11      	ldr	r3, [pc, #68]	; (800a750 <LL_RCC_GetUARTClockFreq+0x100>)
 800a70a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a70c:	e014      	b.n	800a738 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a70e:	f7ff fe2f 	bl	800a370 <LL_RCC_LSE_IsReady>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d011      	beq.n	800a73c <LL_RCC_GetUARTClockFreq+0xec>
        {
          uart_frequency = LSE_VALUE;
 800a718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a71c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a71e:	e00d      	b.n	800a73c <LL_RCC_GetUARTClockFreq+0xec>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a720:	f000 f81c 	bl	800a75c <RCC_GetSystemClockFreq>
 800a724:	4603      	mov	r3, r0
 800a726:	4618      	mov	r0, r3
 800a728:	f000 f83e 	bl	800a7a8 <RCC_GetHCLKClockFreq>
 800a72c:	4603      	mov	r3, r0
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f852 	bl	800a7d8 <RCC_GetPCLK1ClockFreq>
 800a734:	60f8      	str	r0, [r7, #12]
        break;
 800a736:	e002      	b.n	800a73e <LL_RCC_GetUARTClockFreq+0xee>
        break;
 800a738:	bf00      	nop
 800a73a:	e000      	b.n	800a73e <LL_RCC_GetUARTClockFreq+0xee>
        break;
 800a73c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800a73e:	68fb      	ldr	r3, [r7, #12]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	00c00040 	.word	0x00c00040
 800a74c:	00c00080 	.word	0x00c00080
 800a750:	00f42400 	.word	0x00f42400
 800a754:	03000100 	.word	0x03000100
 800a758:	03000200 	.word	0x03000200

0800a75c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a762:	f7ff fe19 	bl	800a398 <LL_RCC_GetSysClkSource>
 800a766:	4603      	mov	r3, r0
 800a768:	2b0c      	cmp	r3, #12
 800a76a:	d00c      	beq.n	800a786 <RCC_GetSystemClockFreq+0x2a>
 800a76c:	2b0c      	cmp	r3, #12
 800a76e:	d80e      	bhi.n	800a78e <RCC_GetSystemClockFreq+0x32>
 800a770:	2b04      	cmp	r3, #4
 800a772:	d002      	beq.n	800a77a <RCC_GetSystemClockFreq+0x1e>
 800a774:	2b08      	cmp	r3, #8
 800a776:	d003      	beq.n	800a780 <RCC_GetSystemClockFreq+0x24>
 800a778:	e009      	b.n	800a78e <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <RCC_GetSystemClockFreq+0x44>)
 800a77c:	607b      	str	r3, [r7, #4]
      break;
 800a77e:	e009      	b.n	800a794 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a780:	4b08      	ldr	r3, [pc, #32]	; (800a7a4 <RCC_GetSystemClockFreq+0x48>)
 800a782:	607b      	str	r3, [r7, #4]
      break;
 800a784:	e006      	b.n	800a794 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a786:	f000 f853 	bl	800a830 <RCC_PLL_GetFreqDomain_SYS>
 800a78a:	6078      	str	r0, [r7, #4]
      break;
 800a78c:	e002      	b.n	800a794 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800a78e:	4b04      	ldr	r3, [pc, #16]	; (800a7a0 <RCC_GetSystemClockFreq+0x44>)
 800a790:	607b      	str	r3, [r7, #4]
      break;
 800a792:	bf00      	nop
  }

  return frequency;
 800a794:	687b      	ldr	r3, [r7, #4]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	00f42400 	.word	0x00f42400
 800a7a4:	007a1200 	.word	0x007a1200

0800a7a8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a7b0:	f7ff fe00 	bl	800a3b4 <LL_RCC_GetAHBPrescaler>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	091b      	lsrs	r3, r3, #4
 800a7b8:	f003 030f 	and.w	r3, r3, #15
 800a7bc:	4a05      	ldr	r2, [pc, #20]	; (800a7d4 <RCC_GetHCLKClockFreq+0x2c>)
 800a7be:	5cd3      	ldrb	r3, [r2, r3]
 800a7c0:	f003 031f 	and.w	r3, r3, #31
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800d8a0 	.word	0x0800d8a0

0800a7d8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a7e0:	f7ff fdf6 	bl	800a3d0 <LL_RCC_GetAPB1Prescaler>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	0a1b      	lsrs	r3, r3, #8
 800a7e8:	4a05      	ldr	r2, [pc, #20]	; (800a800 <RCC_GetPCLK1ClockFreq+0x28>)
 800a7ea:	5cd3      	ldrb	r3, [r2, r3]
 800a7ec:	f003 031f 	and.w	r3, r3, #31
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	0800d8b0 	.word	0x0800d8b0

0800a804 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800a80c:	f7ff fdee 	bl	800a3ec <LL_RCC_GetAPB2Prescaler>
 800a810:	4603      	mov	r3, r0
 800a812:	0adb      	lsrs	r3, r3, #11
 800a814:	4a05      	ldr	r2, [pc, #20]	; (800a82c <RCC_GetPCLK2ClockFreq+0x28>)
 800a816:	5cd3      	ldrb	r3, [r2, r3]
 800a818:	f003 031f 	and.w	r3, r3, #31
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	0800d8b0 	.word	0x0800d8b0

0800a830 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a830:	b590      	push	{r4, r7, lr}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a836:	f7ff fe0f 	bl	800a458 <LL_RCC_PLL_GetMainSource>
 800a83a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d003      	beq.n	800a84a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b03      	cmp	r3, #3
 800a846:	d003      	beq.n	800a850 <RCC_PLL_GetFreqDomain_SYS+0x20>
 800a848:	e005      	b.n	800a856 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a84a:	4b11      	ldr	r3, [pc, #68]	; (800a890 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800a84c:	607b      	str	r3, [r7, #4]
      break;
 800a84e:	e005      	b.n	800a85c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a850:	4b10      	ldr	r3, [pc, #64]	; (800a894 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800a852:	607b      	str	r3, [r7, #4]
      break;
 800a854:	e002      	b.n	800a85c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800a856:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800a858:	607b      	str	r3, [r7, #4]
      break;
 800a85a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a85c:	f7ff fe0a 	bl	800a474 <LL_RCC_PLL_GetN>
 800a860:	4602      	mov	r2, r0
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	fb03 f402 	mul.w	r4, r3, r2
 800a868:	f7ff fe20 	bl	800a4ac <LL_RCC_PLL_GetDivider>
 800a86c:	4603      	mov	r3, r0
 800a86e:	091b      	lsrs	r3, r3, #4
 800a870:	3301      	adds	r3, #1
 800a872:	fbb4 f4f3 	udiv	r4, r4, r3
 800a876:	f7ff fe0b 	bl	800a490 <LL_RCC_PLL_GetR>
 800a87a:	4603      	mov	r3, r0
 800a87c:	0e5b      	lsrs	r3, r3, #25
 800a87e:	3301      	adds	r3, #1
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a886:	4618      	mov	r0, r3
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd90      	pop	{r4, r7, pc}
 800a88e:	bf00      	nop
 800a890:	00f42400 	.word	0x00f42400
 800a894:	007a1200 	.word	0x007a1200

0800a898 <LL_USART_IsEnabled>:
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <LL_USART_IsEnabled+0x18>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e000      	b.n	800a8b2 <LL_USART_IsEnabled+0x1a>
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <LL_USART_SetPrescaler>:
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8cc:	f023 030f 	bic.w	r3, r3, #15
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	b292      	uxth	r2, r2
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <LL_USART_SetStopBitsLength>:
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	605a      	str	r2, [r3, #4]
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <LL_USART_SetHWFlowCtrl>:
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	431a      	orrs	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	609a      	str	r2, [r3, #8]
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
	...

0800a934 <LL_USART_SetBaudRate>:
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b0b      	cmp	r3, #11
 800a946:	d83c      	bhi.n	800a9c2 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d039      	beq.n	800a9c2 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a954:	d122      	bne.n	800a99c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	461a      	mov	r2, r3
 800a95c:	4b1c      	ldr	r3, [pc, #112]	; (800a9d0 <LL_USART_SetBaudRate+0x9c>)
 800a95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	fbb2 f3f3 	udiv	r3, r2, r3
 800a968:	005a      	lsls	r2, r3, #1
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	085b      	lsrs	r3, r3, #1
 800a96e:	441a      	add	r2, r3
 800a970:	6a3b      	ldr	r3, [r7, #32]
 800a972:	fbb2 f3f3 	udiv	r3, r2, r3
 800a976:	b29b      	uxth	r3, r3
 800a978:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800a980:	4013      	ands	r3, r2
 800a982:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	085b      	lsrs	r3, r3, #1
 800a988:	b29b      	uxth	r3, r3
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	4313      	orrs	r3, r2
 800a992:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	60da      	str	r2, [r3, #12]
}
 800a99a:	e012      	b.n	800a9c2 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <LL_USART_SetBaudRate+0x9c>)
 800a9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	fbb2 f2f3 	udiv	r2, r2, r3
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	085b      	lsrs	r3, r3, #1
 800a9b2:	441a      	add	r2, r3
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	461a      	mov	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	60da      	str	r2, [r3, #12]
}
 800a9c2:	bf00      	nop
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	0800d8c8 	.word	0x0800d8c8

0800a9d4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af02      	add	r7, sp, #8
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7ff ff56 	bl	800a898 <LL_USART_IsEnabled>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d165      	bne.n	800aabe <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	4b34      	ldr	r3, [pc, #208]	; (800aac8 <LL_USART_Init+0xf4>)
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	6891      	ldr	r1, [r2, #8]
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	6912      	ldr	r2, [r2, #16]
 800aa02:	4311      	orrs	r1, r2
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	6952      	ldr	r2, [r2, #20]
 800aa08:	4311      	orrs	r1, r2
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	69d2      	ldr	r2, [r2, #28]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	431a      	orrs	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff ff62 	bl	800a8e6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ff6f 	bl	800a90c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a26      	ldr	r2, [pc, #152]	; (800aacc <LL_USART_Init+0xf8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d104      	bne.n	800aa40 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800aa36:	2003      	movs	r0, #3
 800aa38:	f7ff fd46 	bl	800a4c8 <LL_RCC_GetUSARTClockFreq>
 800aa3c:	60b8      	str	r0, [r7, #8]
 800aa3e:	e023      	b.n	800aa88 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a23      	ldr	r2, [pc, #140]	; (800aad0 <LL_USART_Init+0xfc>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d104      	bne.n	800aa52 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800aa48:	200c      	movs	r0, #12
 800aa4a:	f7ff fd3d 	bl	800a4c8 <LL_RCC_GetUSARTClockFreq>
 800aa4e:	60b8      	str	r0, [r7, #8]
 800aa50:	e01a      	b.n	800aa88 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a1f      	ldr	r2, [pc, #124]	; (800aad4 <LL_USART_Init+0x100>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d104      	bne.n	800aa64 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800aa5a:	2030      	movs	r0, #48	; 0x30
 800aa5c:	f7ff fd34 	bl	800a4c8 <LL_RCC_GetUSARTClockFreq>
 800aa60:	60b8      	str	r0, [r7, #8]
 800aa62:	e011      	b.n	800aa88 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a1c      	ldr	r2, [pc, #112]	; (800aad8 <LL_USART_Init+0x104>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d104      	bne.n	800aa76 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800aa6c:	20c0      	movs	r0, #192	; 0xc0
 800aa6e:	f7ff fdef 	bl	800a650 <LL_RCC_GetUARTClockFreq>
 800aa72:	60b8      	str	r0, [r7, #8]
 800aa74:	e008      	b.n	800aa88 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a18      	ldr	r2, [pc, #96]	; (800aadc <LL_USART_Init+0x108>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d104      	bne.n	800aa88 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800aa7e:	f44f 7040 	mov.w	r0, #768	; 0x300
 800aa82:	f7ff fde5 	bl	800a650 <LL_RCC_GetUARTClockFreq>
 800aa86:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d011      	beq.n	800aab2 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00d      	beq.n	800aab2 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 800aa96:	2300      	movs	r3, #0
 800aa98:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	68b9      	ldr	r1, [r7, #8]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff ff41 	bl	800a934 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff ff00 	bl	800a8be <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	efff69f3 	.word	0xefff69f3
 800aacc:	40013800 	.word	0x40013800
 800aad0:	40004400 	.word	0x40004400
 800aad4:	40004800 	.word	0x40004800
 800aad8:	40004c00 	.word	0x40004c00
 800aadc:	40005000 	.word	0x40005000

0800aae0 <atof>:
 800aae0:	2100      	movs	r1, #0
 800aae2:	f000 bec9 	b.w	800b878 <strtod>
	...

0800aae8 <malloc>:
 800aae8:	4b02      	ldr	r3, [pc, #8]	; (800aaf4 <malloc+0xc>)
 800aaea:	4601      	mov	r1, r0
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	f000 b82b 	b.w	800ab48 <_malloc_r>
 800aaf2:	bf00      	nop
 800aaf4:	200001ec 	.word	0x200001ec

0800aaf8 <free>:
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <free+0xc>)
 800aafa:	4601      	mov	r1, r0
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	f001 b905 	b.w	800bd0c <_free_r>
 800ab02:	bf00      	nop
 800ab04:	200001ec 	.word	0x200001ec

0800ab08 <sbrk_aligned>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	4e0e      	ldr	r6, [pc, #56]	; (800ab44 <sbrk_aligned+0x3c>)
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	6831      	ldr	r1, [r6, #0]
 800ab10:	4605      	mov	r5, r0
 800ab12:	b911      	cbnz	r1, 800ab1a <sbrk_aligned+0x12>
 800ab14:	f001 f86c 	bl	800bbf0 <_sbrk_r>
 800ab18:	6030      	str	r0, [r6, #0]
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f001 f867 	bl	800bbf0 <_sbrk_r>
 800ab22:	1c43      	adds	r3, r0, #1
 800ab24:	d00a      	beq.n	800ab3c <sbrk_aligned+0x34>
 800ab26:	1cc4      	adds	r4, r0, #3
 800ab28:	f024 0403 	bic.w	r4, r4, #3
 800ab2c:	42a0      	cmp	r0, r4
 800ab2e:	d007      	beq.n	800ab40 <sbrk_aligned+0x38>
 800ab30:	1a21      	subs	r1, r4, r0
 800ab32:	4628      	mov	r0, r5
 800ab34:	f001 f85c 	bl	800bbf0 <_sbrk_r>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d101      	bne.n	800ab40 <sbrk_aligned+0x38>
 800ab3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab40:	4620      	mov	r0, r4
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	20003528 	.word	0x20003528

0800ab48 <_malloc_r>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	1ccd      	adds	r5, r1, #3
 800ab4e:	f025 0503 	bic.w	r5, r5, #3
 800ab52:	3508      	adds	r5, #8
 800ab54:	2d0c      	cmp	r5, #12
 800ab56:	bf38      	it	cc
 800ab58:	250c      	movcc	r5, #12
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	db01      	blt.n	800ab64 <_malloc_r+0x1c>
 800ab60:	42a9      	cmp	r1, r5
 800ab62:	d905      	bls.n	800ab70 <_malloc_r+0x28>
 800ab64:	230c      	movs	r3, #12
 800ab66:	603b      	str	r3, [r7, #0]
 800ab68:	2600      	movs	r6, #0
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac44 <_malloc_r+0xfc>
 800ab74:	f000 f868 	bl	800ac48 <__malloc_lock>
 800ab78:	f8d8 3000 	ldr.w	r3, [r8]
 800ab7c:	461c      	mov	r4, r3
 800ab7e:	bb5c      	cbnz	r4, 800abd8 <_malloc_r+0x90>
 800ab80:	4629      	mov	r1, r5
 800ab82:	4638      	mov	r0, r7
 800ab84:	f7ff ffc0 	bl	800ab08 <sbrk_aligned>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	d155      	bne.n	800ac3a <_malloc_r+0xf2>
 800ab8e:	f8d8 4000 	ldr.w	r4, [r8]
 800ab92:	4626      	mov	r6, r4
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	d145      	bne.n	800ac24 <_malloc_r+0xdc>
 800ab98:	2c00      	cmp	r4, #0
 800ab9a:	d048      	beq.n	800ac2e <_malloc_r+0xe6>
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4638      	mov	r0, r7
 800aba2:	eb04 0903 	add.w	r9, r4, r3
 800aba6:	f001 f823 	bl	800bbf0 <_sbrk_r>
 800abaa:	4581      	cmp	r9, r0
 800abac:	d13f      	bne.n	800ac2e <_malloc_r+0xe6>
 800abae:	6821      	ldr	r1, [r4, #0]
 800abb0:	1a6d      	subs	r5, r5, r1
 800abb2:	4629      	mov	r1, r5
 800abb4:	4638      	mov	r0, r7
 800abb6:	f7ff ffa7 	bl	800ab08 <sbrk_aligned>
 800abba:	3001      	adds	r0, #1
 800abbc:	d037      	beq.n	800ac2e <_malloc_r+0xe6>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	442b      	add	r3, r5
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	f8d8 3000 	ldr.w	r3, [r8]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d038      	beq.n	800ac3e <_malloc_r+0xf6>
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	42a2      	cmp	r2, r4
 800abd0:	d12b      	bne.n	800ac2a <_malloc_r+0xe2>
 800abd2:	2200      	movs	r2, #0
 800abd4:	605a      	str	r2, [r3, #4]
 800abd6:	e00f      	b.n	800abf8 <_malloc_r+0xb0>
 800abd8:	6822      	ldr	r2, [r4, #0]
 800abda:	1b52      	subs	r2, r2, r5
 800abdc:	d41f      	bmi.n	800ac1e <_malloc_r+0xd6>
 800abde:	2a0b      	cmp	r2, #11
 800abe0:	d917      	bls.n	800ac12 <_malloc_r+0xca>
 800abe2:	1961      	adds	r1, r4, r5
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	6025      	str	r5, [r4, #0]
 800abe8:	bf18      	it	ne
 800abea:	6059      	strne	r1, [r3, #4]
 800abec:	6863      	ldr	r3, [r4, #4]
 800abee:	bf08      	it	eq
 800abf0:	f8c8 1000 	streq.w	r1, [r8]
 800abf4:	5162      	str	r2, [r4, r5]
 800abf6:	604b      	str	r3, [r1, #4]
 800abf8:	4638      	mov	r0, r7
 800abfa:	f104 060b 	add.w	r6, r4, #11
 800abfe:	f000 f829 	bl	800ac54 <__malloc_unlock>
 800ac02:	f026 0607 	bic.w	r6, r6, #7
 800ac06:	1d23      	adds	r3, r4, #4
 800ac08:	1af2      	subs	r2, r6, r3
 800ac0a:	d0ae      	beq.n	800ab6a <_malloc_r+0x22>
 800ac0c:	1b9b      	subs	r3, r3, r6
 800ac0e:	50a3      	str	r3, [r4, r2]
 800ac10:	e7ab      	b.n	800ab6a <_malloc_r+0x22>
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	6862      	ldr	r2, [r4, #4]
 800ac16:	d1dd      	bne.n	800abd4 <_malloc_r+0x8c>
 800ac18:	f8c8 2000 	str.w	r2, [r8]
 800ac1c:	e7ec      	b.n	800abf8 <_malloc_r+0xb0>
 800ac1e:	4623      	mov	r3, r4
 800ac20:	6864      	ldr	r4, [r4, #4]
 800ac22:	e7ac      	b.n	800ab7e <_malloc_r+0x36>
 800ac24:	4634      	mov	r4, r6
 800ac26:	6876      	ldr	r6, [r6, #4]
 800ac28:	e7b4      	b.n	800ab94 <_malloc_r+0x4c>
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	e7cc      	b.n	800abc8 <_malloc_r+0x80>
 800ac2e:	230c      	movs	r3, #12
 800ac30:	603b      	str	r3, [r7, #0]
 800ac32:	4638      	mov	r0, r7
 800ac34:	f000 f80e 	bl	800ac54 <__malloc_unlock>
 800ac38:	e797      	b.n	800ab6a <_malloc_r+0x22>
 800ac3a:	6025      	str	r5, [r4, #0]
 800ac3c:	e7dc      	b.n	800abf8 <_malloc_r+0xb0>
 800ac3e:	605b      	str	r3, [r3, #4]
 800ac40:	deff      	udf	#255	; 0xff
 800ac42:	bf00      	nop
 800ac44:	20003524 	.word	0x20003524

0800ac48 <__malloc_lock>:
 800ac48:	4801      	ldr	r0, [pc, #4]	; (800ac50 <__malloc_lock+0x8>)
 800ac4a:	f001 b81e 	b.w	800bc8a <__retarget_lock_acquire_recursive>
 800ac4e:	bf00      	nop
 800ac50:	2000366c 	.word	0x2000366c

0800ac54 <__malloc_unlock>:
 800ac54:	4801      	ldr	r0, [pc, #4]	; (800ac5c <__malloc_unlock+0x8>)
 800ac56:	f001 b819 	b.w	800bc8c <__retarget_lock_release_recursive>
 800ac5a:	bf00      	nop
 800ac5c:	2000366c 	.word	0x2000366c

0800ac60 <sulp>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	4604      	mov	r4, r0
 800ac64:	460d      	mov	r5, r1
 800ac66:	ec45 4b10 	vmov	d0, r4, r5
 800ac6a:	4616      	mov	r6, r2
 800ac6c:	f001 ff70 	bl	800cb50 <__ulp>
 800ac70:	ec51 0b10 	vmov	r0, r1, d0
 800ac74:	b17e      	cbz	r6, 800ac96 <sulp+0x36>
 800ac76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dd09      	ble.n	800ac96 <sulp+0x36>
 800ac82:	051b      	lsls	r3, r3, #20
 800ac84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac88:	2400      	movs	r4, #0
 800ac8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac8e:	4622      	mov	r2, r4
 800ac90:	462b      	mov	r3, r5
 800ac92:	f7f5 fcd1 	bl	8000638 <__aeabi_dmul>
 800ac96:	bd70      	pop	{r4, r5, r6, pc}

0800ac98 <_strtod_l>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	ed2d 8b02 	vpush	{d8}
 800aca0:	b09b      	sub	sp, #108	; 0x6c
 800aca2:	4604      	mov	r4, r0
 800aca4:	9213      	str	r2, [sp, #76]	; 0x4c
 800aca6:	2200      	movs	r2, #0
 800aca8:	9216      	str	r2, [sp, #88]	; 0x58
 800acaa:	460d      	mov	r5, r1
 800acac:	f04f 0800 	mov.w	r8, #0
 800acb0:	f04f 0900 	mov.w	r9, #0
 800acb4:	460a      	mov	r2, r1
 800acb6:	9215      	str	r2, [sp, #84]	; 0x54
 800acb8:	7811      	ldrb	r1, [r2, #0]
 800acba:	292b      	cmp	r1, #43	; 0x2b
 800acbc:	d04c      	beq.n	800ad58 <_strtod_l+0xc0>
 800acbe:	d83a      	bhi.n	800ad36 <_strtod_l+0x9e>
 800acc0:	290d      	cmp	r1, #13
 800acc2:	d834      	bhi.n	800ad2e <_strtod_l+0x96>
 800acc4:	2908      	cmp	r1, #8
 800acc6:	d834      	bhi.n	800ad32 <_strtod_l+0x9a>
 800acc8:	2900      	cmp	r1, #0
 800acca:	d03d      	beq.n	800ad48 <_strtod_l+0xb0>
 800accc:	2200      	movs	r2, #0
 800acce:	920a      	str	r2, [sp, #40]	; 0x28
 800acd0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800acd2:	7832      	ldrb	r2, [r6, #0]
 800acd4:	2a30      	cmp	r2, #48	; 0x30
 800acd6:	f040 80b4 	bne.w	800ae42 <_strtod_l+0x1aa>
 800acda:	7872      	ldrb	r2, [r6, #1]
 800acdc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ace0:	2a58      	cmp	r2, #88	; 0x58
 800ace2:	d170      	bne.n	800adc6 <_strtod_l+0x12e>
 800ace4:	9302      	str	r3, [sp, #8]
 800ace6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	ab16      	add	r3, sp, #88	; 0x58
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	4a8e      	ldr	r2, [pc, #568]	; (800af28 <_strtod_l+0x290>)
 800acf0:	ab17      	add	r3, sp, #92	; 0x5c
 800acf2:	a915      	add	r1, sp, #84	; 0x54
 800acf4:	4620      	mov	r0, r4
 800acf6:	f001 f8bd 	bl	800be74 <__gethex>
 800acfa:	f010 070f 	ands.w	r7, r0, #15
 800acfe:	4605      	mov	r5, r0
 800ad00:	d005      	beq.n	800ad0e <_strtod_l+0x76>
 800ad02:	2f06      	cmp	r7, #6
 800ad04:	d12a      	bne.n	800ad5c <_strtod_l+0xc4>
 800ad06:	3601      	adds	r6, #1
 800ad08:	2300      	movs	r3, #0
 800ad0a:	9615      	str	r6, [sp, #84]	; 0x54
 800ad0c:	930a      	str	r3, [sp, #40]	; 0x28
 800ad0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f040 857f 	bne.w	800b814 <_strtod_l+0xb7c>
 800ad16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad18:	b1db      	cbz	r3, 800ad52 <_strtod_l+0xba>
 800ad1a:	4642      	mov	r2, r8
 800ad1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad20:	ec43 2b10 	vmov	d0, r2, r3
 800ad24:	b01b      	add	sp, #108	; 0x6c
 800ad26:	ecbd 8b02 	vpop	{d8}
 800ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2e:	2920      	cmp	r1, #32
 800ad30:	d1cc      	bne.n	800accc <_strtod_l+0x34>
 800ad32:	3201      	adds	r2, #1
 800ad34:	e7bf      	b.n	800acb6 <_strtod_l+0x1e>
 800ad36:	292d      	cmp	r1, #45	; 0x2d
 800ad38:	d1c8      	bne.n	800accc <_strtod_l+0x34>
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	910a      	str	r1, [sp, #40]	; 0x28
 800ad3e:	1c51      	adds	r1, r2, #1
 800ad40:	9115      	str	r1, [sp, #84]	; 0x54
 800ad42:	7852      	ldrb	r2, [r2, #1]
 800ad44:	2a00      	cmp	r2, #0
 800ad46:	d1c3      	bne.n	800acd0 <_strtod_l+0x38>
 800ad48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad4a:	9515      	str	r5, [sp, #84]	; 0x54
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f040 855f 	bne.w	800b810 <_strtod_l+0xb78>
 800ad52:	4642      	mov	r2, r8
 800ad54:	464b      	mov	r3, r9
 800ad56:	e7e3      	b.n	800ad20 <_strtod_l+0x88>
 800ad58:	2100      	movs	r1, #0
 800ad5a:	e7ef      	b.n	800ad3c <_strtod_l+0xa4>
 800ad5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad5e:	b13a      	cbz	r2, 800ad70 <_strtod_l+0xd8>
 800ad60:	2135      	movs	r1, #53	; 0x35
 800ad62:	a818      	add	r0, sp, #96	; 0x60
 800ad64:	f001 fff1 	bl	800cd4a <__copybits>
 800ad68:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f001 fbc4 	bl	800c4f8 <_Bfree>
 800ad70:	3f01      	subs	r7, #1
 800ad72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad74:	2f04      	cmp	r7, #4
 800ad76:	d806      	bhi.n	800ad86 <_strtod_l+0xee>
 800ad78:	e8df f007 	tbb	[pc, r7]
 800ad7c:	201d0314 	.word	0x201d0314
 800ad80:	14          	.byte	0x14
 800ad81:	00          	.byte	0x00
 800ad82:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ad86:	05e9      	lsls	r1, r5, #23
 800ad88:	bf48      	it	mi
 800ad8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ad8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad92:	0d1b      	lsrs	r3, r3, #20
 800ad94:	051b      	lsls	r3, r3, #20
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1b9      	bne.n	800ad0e <_strtod_l+0x76>
 800ad9a:	f000 ff4b 	bl	800bc34 <__errno>
 800ad9e:	2322      	movs	r3, #34	; 0x22
 800ada0:	6003      	str	r3, [r0, #0]
 800ada2:	e7b4      	b.n	800ad0e <_strtod_l+0x76>
 800ada4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ada8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800adac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800adb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800adb4:	e7e7      	b.n	800ad86 <_strtod_l+0xee>
 800adb6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800af30 <_strtod_l+0x298>
 800adba:	e7e4      	b.n	800ad86 <_strtod_l+0xee>
 800adbc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800adc0:	f04f 38ff 	mov.w	r8, #4294967295
 800adc4:	e7df      	b.n	800ad86 <_strtod_l+0xee>
 800adc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adc8:	1c5a      	adds	r2, r3, #1
 800adca:	9215      	str	r2, [sp, #84]	; 0x54
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	2b30      	cmp	r3, #48	; 0x30
 800add0:	d0f9      	beq.n	800adc6 <_strtod_l+0x12e>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d09b      	beq.n	800ad0e <_strtod_l+0x76>
 800add6:	2301      	movs	r3, #1
 800add8:	f04f 0a00 	mov.w	sl, #0
 800addc:	9304      	str	r3, [sp, #16]
 800adde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ade0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ade2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ade6:	46d3      	mov	fp, sl
 800ade8:	220a      	movs	r2, #10
 800adea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800adec:	7806      	ldrb	r6, [r0, #0]
 800adee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800adf2:	b2d9      	uxtb	r1, r3
 800adf4:	2909      	cmp	r1, #9
 800adf6:	d926      	bls.n	800ae46 <_strtod_l+0x1ae>
 800adf8:	494c      	ldr	r1, [pc, #304]	; (800af2c <_strtod_l+0x294>)
 800adfa:	2201      	movs	r2, #1
 800adfc:	f000 fe55 	bl	800baaa <strncmp>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d030      	beq.n	800ae66 <_strtod_l+0x1ce>
 800ae04:	2000      	movs	r0, #0
 800ae06:	4632      	mov	r2, r6
 800ae08:	9005      	str	r0, [sp, #20]
 800ae0a:	465e      	mov	r6, fp
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2a65      	cmp	r2, #101	; 0x65
 800ae10:	d001      	beq.n	800ae16 <_strtod_l+0x17e>
 800ae12:	2a45      	cmp	r2, #69	; 0x45
 800ae14:	d113      	bne.n	800ae3e <_strtod_l+0x1a6>
 800ae16:	b91e      	cbnz	r6, 800ae20 <_strtod_l+0x188>
 800ae18:	9a04      	ldr	r2, [sp, #16]
 800ae1a:	4302      	orrs	r2, r0
 800ae1c:	d094      	beq.n	800ad48 <_strtod_l+0xb0>
 800ae1e:	2600      	movs	r6, #0
 800ae20:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ae22:	1c6a      	adds	r2, r5, #1
 800ae24:	9215      	str	r2, [sp, #84]	; 0x54
 800ae26:	786a      	ldrb	r2, [r5, #1]
 800ae28:	2a2b      	cmp	r2, #43	; 0x2b
 800ae2a:	d074      	beq.n	800af16 <_strtod_l+0x27e>
 800ae2c:	2a2d      	cmp	r2, #45	; 0x2d
 800ae2e:	d078      	beq.n	800af22 <_strtod_l+0x28a>
 800ae30:	f04f 0c00 	mov.w	ip, #0
 800ae34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ae38:	2909      	cmp	r1, #9
 800ae3a:	d97f      	bls.n	800af3c <_strtod_l+0x2a4>
 800ae3c:	9515      	str	r5, [sp, #84]	; 0x54
 800ae3e:	2700      	movs	r7, #0
 800ae40:	e09e      	b.n	800af80 <_strtod_l+0x2e8>
 800ae42:	2300      	movs	r3, #0
 800ae44:	e7c8      	b.n	800add8 <_strtod_l+0x140>
 800ae46:	f1bb 0f08 	cmp.w	fp, #8
 800ae4a:	bfd8      	it	le
 800ae4c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ae4e:	f100 0001 	add.w	r0, r0, #1
 800ae52:	bfda      	itte	le
 800ae54:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae58:	9309      	strle	r3, [sp, #36]	; 0x24
 800ae5a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ae5e:	f10b 0b01 	add.w	fp, fp, #1
 800ae62:	9015      	str	r0, [sp, #84]	; 0x54
 800ae64:	e7c1      	b.n	800adea <_strtod_l+0x152>
 800ae66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	9215      	str	r2, [sp, #84]	; 0x54
 800ae6c:	785a      	ldrb	r2, [r3, #1]
 800ae6e:	f1bb 0f00 	cmp.w	fp, #0
 800ae72:	d037      	beq.n	800aee4 <_strtod_l+0x24c>
 800ae74:	9005      	str	r0, [sp, #20]
 800ae76:	465e      	mov	r6, fp
 800ae78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ae7c:	2b09      	cmp	r3, #9
 800ae7e:	d912      	bls.n	800aea6 <_strtod_l+0x20e>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e7c4      	b.n	800ae0e <_strtod_l+0x176>
 800ae84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	9215      	str	r2, [sp, #84]	; 0x54
 800ae8a:	785a      	ldrb	r2, [r3, #1]
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	2a30      	cmp	r2, #48	; 0x30
 800ae90:	d0f8      	beq.n	800ae84 <_strtod_l+0x1ec>
 800ae92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ae96:	2b08      	cmp	r3, #8
 800ae98:	f200 84c1 	bhi.w	800b81e <_strtod_l+0xb86>
 800ae9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae9e:	9005      	str	r0, [sp, #20]
 800aea0:	2000      	movs	r0, #0
 800aea2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea4:	4606      	mov	r6, r0
 800aea6:	3a30      	subs	r2, #48	; 0x30
 800aea8:	f100 0301 	add.w	r3, r0, #1
 800aeac:	d014      	beq.n	800aed8 <_strtod_l+0x240>
 800aeae:	9905      	ldr	r1, [sp, #20]
 800aeb0:	4419      	add	r1, r3
 800aeb2:	9105      	str	r1, [sp, #20]
 800aeb4:	4633      	mov	r3, r6
 800aeb6:	eb00 0c06 	add.w	ip, r0, r6
 800aeba:	210a      	movs	r1, #10
 800aebc:	4563      	cmp	r3, ip
 800aebe:	d113      	bne.n	800aee8 <_strtod_l+0x250>
 800aec0:	1833      	adds	r3, r6, r0
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	f106 0601 	add.w	r6, r6, #1
 800aec8:	4406      	add	r6, r0
 800aeca:	dc1a      	bgt.n	800af02 <_strtod_l+0x26a>
 800aecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aece:	230a      	movs	r3, #10
 800aed0:	fb03 2301 	mla	r3, r3, r1, r2
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	2300      	movs	r3, #0
 800aed8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aeda:	1c51      	adds	r1, r2, #1
 800aedc:	9115      	str	r1, [sp, #84]	; 0x54
 800aede:	7852      	ldrb	r2, [r2, #1]
 800aee0:	4618      	mov	r0, r3
 800aee2:	e7c9      	b.n	800ae78 <_strtod_l+0x1e0>
 800aee4:	4658      	mov	r0, fp
 800aee6:	e7d2      	b.n	800ae8e <_strtod_l+0x1f6>
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	f103 0301 	add.w	r3, r3, #1
 800aeee:	dc03      	bgt.n	800aef8 <_strtod_l+0x260>
 800aef0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aef2:	434f      	muls	r7, r1
 800aef4:	9709      	str	r7, [sp, #36]	; 0x24
 800aef6:	e7e1      	b.n	800aebc <_strtod_l+0x224>
 800aef8:	2b10      	cmp	r3, #16
 800aefa:	bfd8      	it	le
 800aefc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800af00:	e7dc      	b.n	800aebc <_strtod_l+0x224>
 800af02:	2e10      	cmp	r6, #16
 800af04:	bfdc      	itt	le
 800af06:	230a      	movle	r3, #10
 800af08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800af0c:	e7e3      	b.n	800aed6 <_strtod_l+0x23e>
 800af0e:	2300      	movs	r3, #0
 800af10:	9305      	str	r3, [sp, #20]
 800af12:	2301      	movs	r3, #1
 800af14:	e780      	b.n	800ae18 <_strtod_l+0x180>
 800af16:	f04f 0c00 	mov.w	ip, #0
 800af1a:	1caa      	adds	r2, r5, #2
 800af1c:	9215      	str	r2, [sp, #84]	; 0x54
 800af1e:	78aa      	ldrb	r2, [r5, #2]
 800af20:	e788      	b.n	800ae34 <_strtod_l+0x19c>
 800af22:	f04f 0c01 	mov.w	ip, #1
 800af26:	e7f8      	b.n	800af1a <_strtod_l+0x282>
 800af28:	0800d908 	.word	0x0800d908
 800af2c:	0800d8f8 	.word	0x0800d8f8
 800af30:	7ff00000 	.word	0x7ff00000
 800af34:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af36:	1c51      	adds	r1, r2, #1
 800af38:	9115      	str	r1, [sp, #84]	; 0x54
 800af3a:	7852      	ldrb	r2, [r2, #1]
 800af3c:	2a30      	cmp	r2, #48	; 0x30
 800af3e:	d0f9      	beq.n	800af34 <_strtod_l+0x29c>
 800af40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800af44:	2908      	cmp	r1, #8
 800af46:	f63f af7a 	bhi.w	800ae3e <_strtod_l+0x1a6>
 800af4a:	3a30      	subs	r2, #48	; 0x30
 800af4c:	9208      	str	r2, [sp, #32]
 800af4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af50:	920c      	str	r2, [sp, #48]	; 0x30
 800af52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af54:	1c57      	adds	r7, r2, #1
 800af56:	9715      	str	r7, [sp, #84]	; 0x54
 800af58:	7852      	ldrb	r2, [r2, #1]
 800af5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800af5e:	f1be 0f09 	cmp.w	lr, #9
 800af62:	d938      	bls.n	800afd6 <_strtod_l+0x33e>
 800af64:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af66:	1a7f      	subs	r7, r7, r1
 800af68:	2f08      	cmp	r7, #8
 800af6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800af6e:	dc03      	bgt.n	800af78 <_strtod_l+0x2e0>
 800af70:	9908      	ldr	r1, [sp, #32]
 800af72:	428f      	cmp	r7, r1
 800af74:	bfa8      	it	ge
 800af76:	460f      	movge	r7, r1
 800af78:	f1bc 0f00 	cmp.w	ip, #0
 800af7c:	d000      	beq.n	800af80 <_strtod_l+0x2e8>
 800af7e:	427f      	negs	r7, r7
 800af80:	2e00      	cmp	r6, #0
 800af82:	d14f      	bne.n	800b024 <_strtod_l+0x38c>
 800af84:	9904      	ldr	r1, [sp, #16]
 800af86:	4301      	orrs	r1, r0
 800af88:	f47f aec1 	bne.w	800ad0e <_strtod_l+0x76>
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f47f aedb 	bne.w	800ad48 <_strtod_l+0xb0>
 800af92:	2a69      	cmp	r2, #105	; 0x69
 800af94:	d029      	beq.n	800afea <_strtod_l+0x352>
 800af96:	dc26      	bgt.n	800afe6 <_strtod_l+0x34e>
 800af98:	2a49      	cmp	r2, #73	; 0x49
 800af9a:	d026      	beq.n	800afea <_strtod_l+0x352>
 800af9c:	2a4e      	cmp	r2, #78	; 0x4e
 800af9e:	f47f aed3 	bne.w	800ad48 <_strtod_l+0xb0>
 800afa2:	499b      	ldr	r1, [pc, #620]	; (800b210 <_strtod_l+0x578>)
 800afa4:	a815      	add	r0, sp, #84	; 0x54
 800afa6:	f001 f9a5 	bl	800c2f4 <__match>
 800afaa:	2800      	cmp	r0, #0
 800afac:	f43f aecc 	beq.w	800ad48 <_strtod_l+0xb0>
 800afb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b28      	cmp	r3, #40	; 0x28
 800afb6:	d12f      	bne.n	800b018 <_strtod_l+0x380>
 800afb8:	4996      	ldr	r1, [pc, #600]	; (800b214 <_strtod_l+0x57c>)
 800afba:	aa18      	add	r2, sp, #96	; 0x60
 800afbc:	a815      	add	r0, sp, #84	; 0x54
 800afbe:	f001 f9ad 	bl	800c31c <__hexnan>
 800afc2:	2805      	cmp	r0, #5
 800afc4:	d128      	bne.n	800b018 <_strtod_l+0x380>
 800afc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800afcc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800afd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800afd4:	e69b      	b.n	800ad0e <_strtod_l+0x76>
 800afd6:	9f08      	ldr	r7, [sp, #32]
 800afd8:	210a      	movs	r1, #10
 800afda:	fb01 2107 	mla	r1, r1, r7, r2
 800afde:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800afe2:	9208      	str	r2, [sp, #32]
 800afe4:	e7b5      	b.n	800af52 <_strtod_l+0x2ba>
 800afe6:	2a6e      	cmp	r2, #110	; 0x6e
 800afe8:	e7d9      	b.n	800af9e <_strtod_l+0x306>
 800afea:	498b      	ldr	r1, [pc, #556]	; (800b218 <_strtod_l+0x580>)
 800afec:	a815      	add	r0, sp, #84	; 0x54
 800afee:	f001 f981 	bl	800c2f4 <__match>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	f43f aea8 	beq.w	800ad48 <_strtod_l+0xb0>
 800aff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800affa:	4988      	ldr	r1, [pc, #544]	; (800b21c <_strtod_l+0x584>)
 800affc:	3b01      	subs	r3, #1
 800affe:	a815      	add	r0, sp, #84	; 0x54
 800b000:	9315      	str	r3, [sp, #84]	; 0x54
 800b002:	f001 f977 	bl	800c2f4 <__match>
 800b006:	b910      	cbnz	r0, 800b00e <_strtod_l+0x376>
 800b008:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b00a:	3301      	adds	r3, #1
 800b00c:	9315      	str	r3, [sp, #84]	; 0x54
 800b00e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b22c <_strtod_l+0x594>
 800b012:	f04f 0800 	mov.w	r8, #0
 800b016:	e67a      	b.n	800ad0e <_strtod_l+0x76>
 800b018:	4881      	ldr	r0, [pc, #516]	; (800b220 <_strtod_l+0x588>)
 800b01a:	f000 fe51 	bl	800bcc0 <nan>
 800b01e:	ec59 8b10 	vmov	r8, r9, d0
 800b022:	e674      	b.n	800ad0e <_strtod_l+0x76>
 800b024:	9b05      	ldr	r3, [sp, #20]
 800b026:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b028:	1afb      	subs	r3, r7, r3
 800b02a:	f1bb 0f00 	cmp.w	fp, #0
 800b02e:	bf08      	it	eq
 800b030:	46b3      	moveq	fp, r6
 800b032:	2e10      	cmp	r6, #16
 800b034:	9308      	str	r3, [sp, #32]
 800b036:	4635      	mov	r5, r6
 800b038:	bfa8      	it	ge
 800b03a:	2510      	movge	r5, #16
 800b03c:	f7f5 fa82 	bl	8000544 <__aeabi_ui2d>
 800b040:	2e09      	cmp	r6, #9
 800b042:	4680      	mov	r8, r0
 800b044:	4689      	mov	r9, r1
 800b046:	dd13      	ble.n	800b070 <_strtod_l+0x3d8>
 800b048:	4b76      	ldr	r3, [pc, #472]	; (800b224 <_strtod_l+0x58c>)
 800b04a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b04e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b052:	f7f5 faf1 	bl	8000638 <__aeabi_dmul>
 800b056:	4680      	mov	r8, r0
 800b058:	4650      	mov	r0, sl
 800b05a:	4689      	mov	r9, r1
 800b05c:	f7f5 fa72 	bl	8000544 <__aeabi_ui2d>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	4640      	mov	r0, r8
 800b066:	4649      	mov	r1, r9
 800b068:	f7f5 f930 	bl	80002cc <__adddf3>
 800b06c:	4680      	mov	r8, r0
 800b06e:	4689      	mov	r9, r1
 800b070:	2e0f      	cmp	r6, #15
 800b072:	dc38      	bgt.n	800b0e6 <_strtod_l+0x44e>
 800b074:	9b08      	ldr	r3, [sp, #32]
 800b076:	2b00      	cmp	r3, #0
 800b078:	f43f ae49 	beq.w	800ad0e <_strtod_l+0x76>
 800b07c:	dd24      	ble.n	800b0c8 <_strtod_l+0x430>
 800b07e:	2b16      	cmp	r3, #22
 800b080:	dc0b      	bgt.n	800b09a <_strtod_l+0x402>
 800b082:	4968      	ldr	r1, [pc, #416]	; (800b224 <_strtod_l+0x58c>)
 800b084:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08c:	4642      	mov	r2, r8
 800b08e:	464b      	mov	r3, r9
 800b090:	f7f5 fad2 	bl	8000638 <__aeabi_dmul>
 800b094:	4680      	mov	r8, r0
 800b096:	4689      	mov	r9, r1
 800b098:	e639      	b.n	800ad0e <_strtod_l+0x76>
 800b09a:	9a08      	ldr	r2, [sp, #32]
 800b09c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	db20      	blt.n	800b0e6 <_strtod_l+0x44e>
 800b0a4:	4c5f      	ldr	r4, [pc, #380]	; (800b224 <_strtod_l+0x58c>)
 800b0a6:	f1c6 060f 	rsb	r6, r6, #15
 800b0aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b0ae:	4642      	mov	r2, r8
 800b0b0:	464b      	mov	r3, r9
 800b0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b6:	f7f5 fabf 	bl	8000638 <__aeabi_dmul>
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	1b9e      	subs	r6, r3, r6
 800b0be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b0c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b0c6:	e7e3      	b.n	800b090 <_strtod_l+0x3f8>
 800b0c8:	9b08      	ldr	r3, [sp, #32]
 800b0ca:	3316      	adds	r3, #22
 800b0cc:	db0b      	blt.n	800b0e6 <_strtod_l+0x44e>
 800b0ce:	9b05      	ldr	r3, [sp, #20]
 800b0d0:	1bdf      	subs	r7, r3, r7
 800b0d2:	4b54      	ldr	r3, [pc, #336]	; (800b224 <_strtod_l+0x58c>)
 800b0d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0dc:	4640      	mov	r0, r8
 800b0de:	4649      	mov	r1, r9
 800b0e0:	f7f5 fbd4 	bl	800088c <__aeabi_ddiv>
 800b0e4:	e7d6      	b.n	800b094 <_strtod_l+0x3fc>
 800b0e6:	9b08      	ldr	r3, [sp, #32]
 800b0e8:	1b75      	subs	r5, r6, r5
 800b0ea:	441d      	add	r5, r3
 800b0ec:	2d00      	cmp	r5, #0
 800b0ee:	dd70      	ble.n	800b1d2 <_strtod_l+0x53a>
 800b0f0:	f015 030f 	ands.w	r3, r5, #15
 800b0f4:	d00a      	beq.n	800b10c <_strtod_l+0x474>
 800b0f6:	494b      	ldr	r1, [pc, #300]	; (800b224 <_strtod_l+0x58c>)
 800b0f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0fc:	4642      	mov	r2, r8
 800b0fe:	464b      	mov	r3, r9
 800b100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b104:	f7f5 fa98 	bl	8000638 <__aeabi_dmul>
 800b108:	4680      	mov	r8, r0
 800b10a:	4689      	mov	r9, r1
 800b10c:	f035 050f 	bics.w	r5, r5, #15
 800b110:	d04d      	beq.n	800b1ae <_strtod_l+0x516>
 800b112:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b116:	dd22      	ble.n	800b15e <_strtod_l+0x4c6>
 800b118:	2500      	movs	r5, #0
 800b11a:	46ab      	mov	fp, r5
 800b11c:	9509      	str	r5, [sp, #36]	; 0x24
 800b11e:	9505      	str	r5, [sp, #20]
 800b120:	2322      	movs	r3, #34	; 0x22
 800b122:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b22c <_strtod_l+0x594>
 800b126:	6023      	str	r3, [r4, #0]
 800b128:	f04f 0800 	mov.w	r8, #0
 800b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f43f aded 	beq.w	800ad0e <_strtod_l+0x76>
 800b134:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b136:	4620      	mov	r0, r4
 800b138:	f001 f9de 	bl	800c4f8 <_Bfree>
 800b13c:	9905      	ldr	r1, [sp, #20]
 800b13e:	4620      	mov	r0, r4
 800b140:	f001 f9da 	bl	800c4f8 <_Bfree>
 800b144:	4659      	mov	r1, fp
 800b146:	4620      	mov	r0, r4
 800b148:	f001 f9d6 	bl	800c4f8 <_Bfree>
 800b14c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b14e:	4620      	mov	r0, r4
 800b150:	f001 f9d2 	bl	800c4f8 <_Bfree>
 800b154:	4629      	mov	r1, r5
 800b156:	4620      	mov	r0, r4
 800b158:	f001 f9ce 	bl	800c4f8 <_Bfree>
 800b15c:	e5d7      	b.n	800ad0e <_strtod_l+0x76>
 800b15e:	4b32      	ldr	r3, [pc, #200]	; (800b228 <_strtod_l+0x590>)
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	2300      	movs	r3, #0
 800b164:	112d      	asrs	r5, r5, #4
 800b166:	4640      	mov	r0, r8
 800b168:	4649      	mov	r1, r9
 800b16a:	469a      	mov	sl, r3
 800b16c:	2d01      	cmp	r5, #1
 800b16e:	dc21      	bgt.n	800b1b4 <_strtod_l+0x51c>
 800b170:	b10b      	cbz	r3, 800b176 <_strtod_l+0x4de>
 800b172:	4680      	mov	r8, r0
 800b174:	4689      	mov	r9, r1
 800b176:	492c      	ldr	r1, [pc, #176]	; (800b228 <_strtod_l+0x590>)
 800b178:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b17c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b180:	4642      	mov	r2, r8
 800b182:	464b      	mov	r3, r9
 800b184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b188:	f7f5 fa56 	bl	8000638 <__aeabi_dmul>
 800b18c:	4b27      	ldr	r3, [pc, #156]	; (800b22c <_strtod_l+0x594>)
 800b18e:	460a      	mov	r2, r1
 800b190:	400b      	ands	r3, r1
 800b192:	4927      	ldr	r1, [pc, #156]	; (800b230 <_strtod_l+0x598>)
 800b194:	428b      	cmp	r3, r1
 800b196:	4680      	mov	r8, r0
 800b198:	d8be      	bhi.n	800b118 <_strtod_l+0x480>
 800b19a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b19e:	428b      	cmp	r3, r1
 800b1a0:	bf86      	itte	hi
 800b1a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b234 <_strtod_l+0x59c>
 800b1a6:	f04f 38ff 	movhi.w	r8, #4294967295
 800b1aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9304      	str	r3, [sp, #16]
 800b1b2:	e07b      	b.n	800b2ac <_strtod_l+0x614>
 800b1b4:	07ea      	lsls	r2, r5, #31
 800b1b6:	d505      	bpl.n	800b1c4 <_strtod_l+0x52c>
 800b1b8:	9b04      	ldr	r3, [sp, #16]
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	f7f5 fa3b 	bl	8000638 <__aeabi_dmul>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	9a04      	ldr	r2, [sp, #16]
 800b1c6:	3208      	adds	r2, #8
 800b1c8:	f10a 0a01 	add.w	sl, sl, #1
 800b1cc:	106d      	asrs	r5, r5, #1
 800b1ce:	9204      	str	r2, [sp, #16]
 800b1d0:	e7cc      	b.n	800b16c <_strtod_l+0x4d4>
 800b1d2:	d0ec      	beq.n	800b1ae <_strtod_l+0x516>
 800b1d4:	426d      	negs	r5, r5
 800b1d6:	f015 020f 	ands.w	r2, r5, #15
 800b1da:	d00a      	beq.n	800b1f2 <_strtod_l+0x55a>
 800b1dc:	4b11      	ldr	r3, [pc, #68]	; (800b224 <_strtod_l+0x58c>)
 800b1de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1e2:	4640      	mov	r0, r8
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f7f5 fb4f 	bl	800088c <__aeabi_ddiv>
 800b1ee:	4680      	mov	r8, r0
 800b1f0:	4689      	mov	r9, r1
 800b1f2:	112d      	asrs	r5, r5, #4
 800b1f4:	d0db      	beq.n	800b1ae <_strtod_l+0x516>
 800b1f6:	2d1f      	cmp	r5, #31
 800b1f8:	dd1e      	ble.n	800b238 <_strtod_l+0x5a0>
 800b1fa:	2500      	movs	r5, #0
 800b1fc:	46ab      	mov	fp, r5
 800b1fe:	9509      	str	r5, [sp, #36]	; 0x24
 800b200:	9505      	str	r5, [sp, #20]
 800b202:	2322      	movs	r3, #34	; 0x22
 800b204:	f04f 0800 	mov.w	r8, #0
 800b208:	f04f 0900 	mov.w	r9, #0
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	e78d      	b.n	800b12c <_strtod_l+0x494>
 800b210:	0800d903 	.word	0x0800d903
 800b214:	0800d91c 	.word	0x0800d91c
 800b218:	0800d8fa 	.word	0x0800d8fa
 800b21c:	0800d8fd 	.word	0x0800d8fd
 800b220:	0800da0c 	.word	0x0800da0c
 800b224:	0800db00 	.word	0x0800db00
 800b228:	0800dad8 	.word	0x0800dad8
 800b22c:	7ff00000 	.word	0x7ff00000
 800b230:	7ca00000 	.word	0x7ca00000
 800b234:	7fefffff 	.word	0x7fefffff
 800b238:	f015 0310 	ands.w	r3, r5, #16
 800b23c:	bf18      	it	ne
 800b23e:	236a      	movne	r3, #106	; 0x6a
 800b240:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b5e4 <_strtod_l+0x94c>
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	4640      	mov	r0, r8
 800b248:	4649      	mov	r1, r9
 800b24a:	2300      	movs	r3, #0
 800b24c:	07ea      	lsls	r2, r5, #31
 800b24e:	d504      	bpl.n	800b25a <_strtod_l+0x5c2>
 800b250:	e9da 2300 	ldrd	r2, r3, [sl]
 800b254:	f7f5 f9f0 	bl	8000638 <__aeabi_dmul>
 800b258:	2301      	movs	r3, #1
 800b25a:	106d      	asrs	r5, r5, #1
 800b25c:	f10a 0a08 	add.w	sl, sl, #8
 800b260:	d1f4      	bne.n	800b24c <_strtod_l+0x5b4>
 800b262:	b10b      	cbz	r3, 800b268 <_strtod_l+0x5d0>
 800b264:	4680      	mov	r8, r0
 800b266:	4689      	mov	r9, r1
 800b268:	9b04      	ldr	r3, [sp, #16]
 800b26a:	b1bb      	cbz	r3, 800b29c <_strtod_l+0x604>
 800b26c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b270:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b274:	2b00      	cmp	r3, #0
 800b276:	4649      	mov	r1, r9
 800b278:	dd10      	ble.n	800b29c <_strtod_l+0x604>
 800b27a:	2b1f      	cmp	r3, #31
 800b27c:	f340 811e 	ble.w	800b4bc <_strtod_l+0x824>
 800b280:	2b34      	cmp	r3, #52	; 0x34
 800b282:	bfde      	ittt	le
 800b284:	f04f 33ff 	movle.w	r3, #4294967295
 800b288:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b28c:	4093      	lslle	r3, r2
 800b28e:	f04f 0800 	mov.w	r8, #0
 800b292:	bfcc      	ite	gt
 800b294:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b298:	ea03 0901 	andle.w	r9, r3, r1
 800b29c:	2200      	movs	r2, #0
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	4649      	mov	r1, r9
 800b2a4:	f7f5 fc30 	bl	8000b08 <__aeabi_dcmpeq>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d1a6      	bne.n	800b1fa <_strtod_l+0x562>
 800b2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2b2:	4633      	mov	r3, r6
 800b2b4:	465a      	mov	r2, fp
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f001 f986 	bl	800c5c8 <__s2b>
 800b2bc:	9009      	str	r0, [sp, #36]	; 0x24
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f43f af2a 	beq.w	800b118 <_strtod_l+0x480>
 800b2c4:	9a08      	ldr	r2, [sp, #32]
 800b2c6:	9b05      	ldr	r3, [sp, #20]
 800b2c8:	2a00      	cmp	r2, #0
 800b2ca:	eba3 0307 	sub.w	r3, r3, r7
 800b2ce:	bfa8      	it	ge
 800b2d0:	2300      	movge	r3, #0
 800b2d2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2d4:	2500      	movs	r5, #0
 800b2d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2da:	9312      	str	r3, [sp, #72]	; 0x48
 800b2dc:	46ab      	mov	fp, r5
 800b2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	6859      	ldr	r1, [r3, #4]
 800b2e4:	f001 f8c8 	bl	800c478 <_Balloc>
 800b2e8:	9005      	str	r0, [sp, #20]
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	f43f af18 	beq.w	800b120 <_strtod_l+0x488>
 800b2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f2:	691a      	ldr	r2, [r3, #16]
 800b2f4:	3202      	adds	r2, #2
 800b2f6:	f103 010c 	add.w	r1, r3, #12
 800b2fa:	0092      	lsls	r2, r2, #2
 800b2fc:	300c      	adds	r0, #12
 800b2fe:	f000 fcce 	bl	800bc9e <memcpy>
 800b302:	ec49 8b10 	vmov	d0, r8, r9
 800b306:	aa18      	add	r2, sp, #96	; 0x60
 800b308:	a917      	add	r1, sp, #92	; 0x5c
 800b30a:	4620      	mov	r0, r4
 800b30c:	f001 fc90 	bl	800cc30 <__d2b>
 800b310:	ec49 8b18 	vmov	d8, r8, r9
 800b314:	9016      	str	r0, [sp, #88]	; 0x58
 800b316:	2800      	cmp	r0, #0
 800b318:	f43f af02 	beq.w	800b120 <_strtod_l+0x488>
 800b31c:	2101      	movs	r1, #1
 800b31e:	4620      	mov	r0, r4
 800b320:	f001 f9ea 	bl	800c6f8 <__i2b>
 800b324:	4683      	mov	fp, r0
 800b326:	2800      	cmp	r0, #0
 800b328:	f43f aefa 	beq.w	800b120 <_strtod_l+0x488>
 800b32c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b32e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b330:	2e00      	cmp	r6, #0
 800b332:	bfab      	itete	ge
 800b334:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b336:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b338:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b33a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b33e:	bfac      	ite	ge
 800b340:	eb06 0a03 	addge.w	sl, r6, r3
 800b344:	1b9f      	sublt	r7, r3, r6
 800b346:	9b04      	ldr	r3, [sp, #16]
 800b348:	1af6      	subs	r6, r6, r3
 800b34a:	4416      	add	r6, r2
 800b34c:	4ba0      	ldr	r3, [pc, #640]	; (800b5d0 <_strtod_l+0x938>)
 800b34e:	3e01      	subs	r6, #1
 800b350:	429e      	cmp	r6, r3
 800b352:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b356:	f280 80c4 	bge.w	800b4e2 <_strtod_l+0x84a>
 800b35a:	1b9b      	subs	r3, r3, r6
 800b35c:	2b1f      	cmp	r3, #31
 800b35e:	eba2 0203 	sub.w	r2, r2, r3
 800b362:	f04f 0101 	mov.w	r1, #1
 800b366:	f300 80b0 	bgt.w	800b4ca <_strtod_l+0x832>
 800b36a:	fa01 f303 	lsl.w	r3, r1, r3
 800b36e:	930e      	str	r3, [sp, #56]	; 0x38
 800b370:	2300      	movs	r3, #0
 800b372:	930d      	str	r3, [sp, #52]	; 0x34
 800b374:	eb0a 0602 	add.w	r6, sl, r2
 800b378:	9b04      	ldr	r3, [sp, #16]
 800b37a:	45b2      	cmp	sl, r6
 800b37c:	4417      	add	r7, r2
 800b37e:	441f      	add	r7, r3
 800b380:	4653      	mov	r3, sl
 800b382:	bfa8      	it	ge
 800b384:	4633      	movge	r3, r6
 800b386:	42bb      	cmp	r3, r7
 800b388:	bfa8      	it	ge
 800b38a:	463b      	movge	r3, r7
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bfc2      	ittt	gt
 800b390:	1af6      	subgt	r6, r6, r3
 800b392:	1aff      	subgt	r7, r7, r3
 800b394:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	dd17      	ble.n	800b3ce <_strtod_l+0x736>
 800b39e:	4659      	mov	r1, fp
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f001 fa68 	bl	800c878 <__pow5mult>
 800b3a8:	4683      	mov	fp, r0
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f43f aeb8 	beq.w	800b120 <_strtod_l+0x488>
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f001 f9b5 	bl	800c724 <__multiply>
 800b3ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	f43f aeaf 	beq.w	800b120 <_strtod_l+0x488>
 800b3c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f001 f897 	bl	800c4f8 <_Bfree>
 800b3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3cc:	9316      	str	r3, [sp, #88]	; 0x58
 800b3ce:	2e00      	cmp	r6, #0
 800b3d0:	f300 808c 	bgt.w	800b4ec <_strtod_l+0x854>
 800b3d4:	9b08      	ldr	r3, [sp, #32]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	dd08      	ble.n	800b3ec <_strtod_l+0x754>
 800b3da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3dc:	9905      	ldr	r1, [sp, #20]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f001 fa4a 	bl	800c878 <__pow5mult>
 800b3e4:	9005      	str	r0, [sp, #20]
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f43f ae9a 	beq.w	800b120 <_strtod_l+0x488>
 800b3ec:	2f00      	cmp	r7, #0
 800b3ee:	dd08      	ble.n	800b402 <_strtod_l+0x76a>
 800b3f0:	9905      	ldr	r1, [sp, #20]
 800b3f2:	463a      	mov	r2, r7
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f001 fa99 	bl	800c92c <__lshift>
 800b3fa:	9005      	str	r0, [sp, #20]
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f43f ae8f 	beq.w	800b120 <_strtod_l+0x488>
 800b402:	f1ba 0f00 	cmp.w	sl, #0
 800b406:	dd08      	ble.n	800b41a <_strtod_l+0x782>
 800b408:	4659      	mov	r1, fp
 800b40a:	4652      	mov	r2, sl
 800b40c:	4620      	mov	r0, r4
 800b40e:	f001 fa8d 	bl	800c92c <__lshift>
 800b412:	4683      	mov	fp, r0
 800b414:	2800      	cmp	r0, #0
 800b416:	f43f ae83 	beq.w	800b120 <_strtod_l+0x488>
 800b41a:	9a05      	ldr	r2, [sp, #20]
 800b41c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b41e:	4620      	mov	r0, r4
 800b420:	f001 fb0c 	bl	800ca3c <__mdiff>
 800b424:	4605      	mov	r5, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	f43f ae7a 	beq.w	800b120 <_strtod_l+0x488>
 800b42c:	68c3      	ldr	r3, [r0, #12]
 800b42e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b430:	2300      	movs	r3, #0
 800b432:	60c3      	str	r3, [r0, #12]
 800b434:	4659      	mov	r1, fp
 800b436:	f001 fae5 	bl	800ca04 <__mcmp>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	da60      	bge.n	800b500 <_strtod_l+0x868>
 800b43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b440:	ea53 0308 	orrs.w	r3, r3, r8
 800b444:	f040 8084 	bne.w	800b550 <_strtod_l+0x8b8>
 800b448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d17f      	bne.n	800b550 <_strtod_l+0x8b8>
 800b450:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b454:	0d1b      	lsrs	r3, r3, #20
 800b456:	051b      	lsls	r3, r3, #20
 800b458:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b45c:	d978      	bls.n	800b550 <_strtod_l+0x8b8>
 800b45e:	696b      	ldr	r3, [r5, #20]
 800b460:	b913      	cbnz	r3, 800b468 <_strtod_l+0x7d0>
 800b462:	692b      	ldr	r3, [r5, #16]
 800b464:	2b01      	cmp	r3, #1
 800b466:	dd73      	ble.n	800b550 <_strtod_l+0x8b8>
 800b468:	4629      	mov	r1, r5
 800b46a:	2201      	movs	r2, #1
 800b46c:	4620      	mov	r0, r4
 800b46e:	f001 fa5d 	bl	800c92c <__lshift>
 800b472:	4659      	mov	r1, fp
 800b474:	4605      	mov	r5, r0
 800b476:	f001 fac5 	bl	800ca04 <__mcmp>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	dd68      	ble.n	800b550 <_strtod_l+0x8b8>
 800b47e:	9904      	ldr	r1, [sp, #16]
 800b480:	4a54      	ldr	r2, [pc, #336]	; (800b5d4 <_strtod_l+0x93c>)
 800b482:	464b      	mov	r3, r9
 800b484:	2900      	cmp	r1, #0
 800b486:	f000 8084 	beq.w	800b592 <_strtod_l+0x8fa>
 800b48a:	ea02 0109 	and.w	r1, r2, r9
 800b48e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b492:	dc7e      	bgt.n	800b592 <_strtod_l+0x8fa>
 800b494:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b498:	f77f aeb3 	ble.w	800b202 <_strtod_l+0x56a>
 800b49c:	4b4e      	ldr	r3, [pc, #312]	; (800b5d8 <_strtod_l+0x940>)
 800b49e:	4640      	mov	r0, r8
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f7f5 f8c8 	bl	8000638 <__aeabi_dmul>
 800b4a8:	4b4a      	ldr	r3, [pc, #296]	; (800b5d4 <_strtod_l+0x93c>)
 800b4aa:	400b      	ands	r3, r1
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	4689      	mov	r9, r1
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f47f ae3f 	bne.w	800b134 <_strtod_l+0x49c>
 800b4b6:	2322      	movs	r3, #34	; 0x22
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	e63b      	b.n	800b134 <_strtod_l+0x49c>
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c4:	ea03 0808 	and.w	r8, r3, r8
 800b4c8:	e6e8      	b.n	800b29c <_strtod_l+0x604>
 800b4ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b4ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b4d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b4d6:	36e2      	adds	r6, #226	; 0xe2
 800b4d8:	fa01 f306 	lsl.w	r3, r1, r6
 800b4dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b4e0:	e748      	b.n	800b374 <_strtod_l+0x6dc>
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b4ea:	e743      	b.n	800b374 <_strtod_l+0x6dc>
 800b4ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4ee:	4632      	mov	r2, r6
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f001 fa1b 	bl	800c92c <__lshift>
 800b4f6:	9016      	str	r0, [sp, #88]	; 0x58
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	f47f af6b 	bne.w	800b3d4 <_strtod_l+0x73c>
 800b4fe:	e60f      	b.n	800b120 <_strtod_l+0x488>
 800b500:	46ca      	mov	sl, r9
 800b502:	d171      	bne.n	800b5e8 <_strtod_l+0x950>
 800b504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b506:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b50a:	b352      	cbz	r2, 800b562 <_strtod_l+0x8ca>
 800b50c:	4a33      	ldr	r2, [pc, #204]	; (800b5dc <_strtod_l+0x944>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d12a      	bne.n	800b568 <_strtod_l+0x8d0>
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	4641      	mov	r1, r8
 800b516:	b1fb      	cbz	r3, 800b558 <_strtod_l+0x8c0>
 800b518:	4b2e      	ldr	r3, [pc, #184]	; (800b5d4 <_strtod_l+0x93c>)
 800b51a:	ea09 0303 	and.w	r3, r9, r3
 800b51e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b522:	f04f 32ff 	mov.w	r2, #4294967295
 800b526:	d81a      	bhi.n	800b55e <_strtod_l+0x8c6>
 800b528:	0d1b      	lsrs	r3, r3, #20
 800b52a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b52e:	fa02 f303 	lsl.w	r3, r2, r3
 800b532:	4299      	cmp	r1, r3
 800b534:	d118      	bne.n	800b568 <_strtod_l+0x8d0>
 800b536:	4b2a      	ldr	r3, [pc, #168]	; (800b5e0 <_strtod_l+0x948>)
 800b538:	459a      	cmp	sl, r3
 800b53a:	d102      	bne.n	800b542 <_strtod_l+0x8aa>
 800b53c:	3101      	adds	r1, #1
 800b53e:	f43f adef 	beq.w	800b120 <_strtod_l+0x488>
 800b542:	4b24      	ldr	r3, [pc, #144]	; (800b5d4 <_strtod_l+0x93c>)
 800b544:	ea0a 0303 	and.w	r3, sl, r3
 800b548:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b54c:	f04f 0800 	mov.w	r8, #0
 800b550:	9b04      	ldr	r3, [sp, #16]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1a2      	bne.n	800b49c <_strtod_l+0x804>
 800b556:	e5ed      	b.n	800b134 <_strtod_l+0x49c>
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	e7e9      	b.n	800b532 <_strtod_l+0x89a>
 800b55e:	4613      	mov	r3, r2
 800b560:	e7e7      	b.n	800b532 <_strtod_l+0x89a>
 800b562:	ea53 0308 	orrs.w	r3, r3, r8
 800b566:	d08a      	beq.n	800b47e <_strtod_l+0x7e6>
 800b568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b56a:	b1e3      	cbz	r3, 800b5a6 <_strtod_l+0x90e>
 800b56c:	ea13 0f0a 	tst.w	r3, sl
 800b570:	d0ee      	beq.n	800b550 <_strtod_l+0x8b8>
 800b572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b574:	9a04      	ldr	r2, [sp, #16]
 800b576:	4640      	mov	r0, r8
 800b578:	4649      	mov	r1, r9
 800b57a:	b1c3      	cbz	r3, 800b5ae <_strtod_l+0x916>
 800b57c:	f7ff fb70 	bl	800ac60 <sulp>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	ec51 0b18 	vmov	r0, r1, d8
 800b588:	f7f4 fea0 	bl	80002cc <__adddf3>
 800b58c:	4680      	mov	r8, r0
 800b58e:	4689      	mov	r9, r1
 800b590:	e7de      	b.n	800b550 <_strtod_l+0x8b8>
 800b592:	4013      	ands	r3, r2
 800b594:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b598:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b59c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b5a0:	f04f 38ff 	mov.w	r8, #4294967295
 800b5a4:	e7d4      	b.n	800b550 <_strtod_l+0x8b8>
 800b5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5a8:	ea13 0f08 	tst.w	r3, r8
 800b5ac:	e7e0      	b.n	800b570 <_strtod_l+0x8d8>
 800b5ae:	f7ff fb57 	bl	800ac60 <sulp>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	ec51 0b18 	vmov	r0, r1, d8
 800b5ba:	f7f4 fe85 	bl	80002c8 <__aeabi_dsub>
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	4689      	mov	r9, r1
 800b5c6:	f7f5 fa9f 	bl	8000b08 <__aeabi_dcmpeq>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d0c0      	beq.n	800b550 <_strtod_l+0x8b8>
 800b5ce:	e618      	b.n	800b202 <_strtod_l+0x56a>
 800b5d0:	fffffc02 	.word	0xfffffc02
 800b5d4:	7ff00000 	.word	0x7ff00000
 800b5d8:	39500000 	.word	0x39500000
 800b5dc:	000fffff 	.word	0x000fffff
 800b5e0:	7fefffff 	.word	0x7fefffff
 800b5e4:	0800d930 	.word	0x0800d930
 800b5e8:	4659      	mov	r1, fp
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f001 fb7a 	bl	800cce4 <__ratio>
 800b5f0:	ec57 6b10 	vmov	r6, r7, d0
 800b5f4:	ee10 0a10 	vmov	r0, s0
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5fe:	4639      	mov	r1, r7
 800b600:	f7f5 fa96 	bl	8000b30 <__aeabi_dcmple>
 800b604:	2800      	cmp	r0, #0
 800b606:	d071      	beq.n	800b6ec <_strtod_l+0xa54>
 800b608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d17c      	bne.n	800b708 <_strtod_l+0xa70>
 800b60e:	f1b8 0f00 	cmp.w	r8, #0
 800b612:	d15a      	bne.n	800b6ca <_strtod_l+0xa32>
 800b614:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d15d      	bne.n	800b6d8 <_strtod_l+0xa40>
 800b61c:	4b90      	ldr	r3, [pc, #576]	; (800b860 <_strtod_l+0xbc8>)
 800b61e:	2200      	movs	r2, #0
 800b620:	4630      	mov	r0, r6
 800b622:	4639      	mov	r1, r7
 800b624:	f7f5 fa7a 	bl	8000b1c <__aeabi_dcmplt>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d15c      	bne.n	800b6e6 <_strtod_l+0xa4e>
 800b62c:	4630      	mov	r0, r6
 800b62e:	4639      	mov	r1, r7
 800b630:	4b8c      	ldr	r3, [pc, #560]	; (800b864 <_strtod_l+0xbcc>)
 800b632:	2200      	movs	r2, #0
 800b634:	f7f5 f800 	bl	8000638 <__aeabi_dmul>
 800b638:	4606      	mov	r6, r0
 800b63a:	460f      	mov	r7, r1
 800b63c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b640:	9606      	str	r6, [sp, #24]
 800b642:	9307      	str	r3, [sp, #28]
 800b644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b648:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b64c:	4b86      	ldr	r3, [pc, #536]	; (800b868 <_strtod_l+0xbd0>)
 800b64e:	ea0a 0303 	and.w	r3, sl, r3
 800b652:	930d      	str	r3, [sp, #52]	; 0x34
 800b654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b656:	4b85      	ldr	r3, [pc, #532]	; (800b86c <_strtod_l+0xbd4>)
 800b658:	429a      	cmp	r2, r3
 800b65a:	f040 8090 	bne.w	800b77e <_strtod_l+0xae6>
 800b65e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b662:	ec49 8b10 	vmov	d0, r8, r9
 800b666:	f001 fa73 	bl	800cb50 <__ulp>
 800b66a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b66e:	ec51 0b10 	vmov	r0, r1, d0
 800b672:	f7f4 ffe1 	bl	8000638 <__aeabi_dmul>
 800b676:	4642      	mov	r2, r8
 800b678:	464b      	mov	r3, r9
 800b67a:	f7f4 fe27 	bl	80002cc <__adddf3>
 800b67e:	460b      	mov	r3, r1
 800b680:	4979      	ldr	r1, [pc, #484]	; (800b868 <_strtod_l+0xbd0>)
 800b682:	4a7b      	ldr	r2, [pc, #492]	; (800b870 <_strtod_l+0xbd8>)
 800b684:	4019      	ands	r1, r3
 800b686:	4291      	cmp	r1, r2
 800b688:	4680      	mov	r8, r0
 800b68a:	d944      	bls.n	800b716 <_strtod_l+0xa7e>
 800b68c:	ee18 2a90 	vmov	r2, s17
 800b690:	4b78      	ldr	r3, [pc, #480]	; (800b874 <_strtod_l+0xbdc>)
 800b692:	429a      	cmp	r2, r3
 800b694:	d104      	bne.n	800b6a0 <_strtod_l+0xa08>
 800b696:	ee18 3a10 	vmov	r3, s16
 800b69a:	3301      	adds	r3, #1
 800b69c:	f43f ad40 	beq.w	800b120 <_strtod_l+0x488>
 800b6a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b874 <_strtod_l+0xbdc>
 800b6a4:	f04f 38ff 	mov.w	r8, #4294967295
 800b6a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 ff24 	bl	800c4f8 <_Bfree>
 800b6b0:	9905      	ldr	r1, [sp, #20]
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 ff20 	bl	800c4f8 <_Bfree>
 800b6b8:	4659      	mov	r1, fp
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 ff1c 	bl	800c4f8 <_Bfree>
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 ff18 	bl	800c4f8 <_Bfree>
 800b6c8:	e609      	b.n	800b2de <_strtod_l+0x646>
 800b6ca:	f1b8 0f01 	cmp.w	r8, #1
 800b6ce:	d103      	bne.n	800b6d8 <_strtod_l+0xa40>
 800b6d0:	f1b9 0f00 	cmp.w	r9, #0
 800b6d4:	f43f ad95 	beq.w	800b202 <_strtod_l+0x56a>
 800b6d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b830 <_strtod_l+0xb98>
 800b6dc:	4f60      	ldr	r7, [pc, #384]	; (800b860 <_strtod_l+0xbc8>)
 800b6de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	e7ae      	b.n	800b644 <_strtod_l+0x9ac>
 800b6e6:	4f5f      	ldr	r7, [pc, #380]	; (800b864 <_strtod_l+0xbcc>)
 800b6e8:	2600      	movs	r6, #0
 800b6ea:	e7a7      	b.n	800b63c <_strtod_l+0x9a4>
 800b6ec:	4b5d      	ldr	r3, [pc, #372]	; (800b864 <_strtod_l+0xbcc>)
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f7f4 ffa0 	bl	8000638 <__aeabi_dmul>
 800b6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460f      	mov	r7, r1
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d09c      	beq.n	800b63c <_strtod_l+0x9a4>
 800b702:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b706:	e79d      	b.n	800b644 <_strtod_l+0x9ac>
 800b708:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b838 <_strtod_l+0xba0>
 800b70c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b710:	ec57 6b17 	vmov	r6, r7, d7
 800b714:	e796      	b.n	800b644 <_strtod_l+0x9ac>
 800b716:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b71a:	9b04      	ldr	r3, [sp, #16]
 800b71c:	46ca      	mov	sl, r9
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1c2      	bne.n	800b6a8 <_strtod_l+0xa10>
 800b722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b728:	0d1b      	lsrs	r3, r3, #20
 800b72a:	051b      	lsls	r3, r3, #20
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d1bb      	bne.n	800b6a8 <_strtod_l+0xa10>
 800b730:	4630      	mov	r0, r6
 800b732:	4639      	mov	r1, r7
 800b734:	f7f5 fa8a 	bl	8000c4c <__aeabi_d2lz>
 800b738:	f7f4 ff50 	bl	80005dc <__aeabi_l2d>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4630      	mov	r0, r6
 800b742:	4639      	mov	r1, r7
 800b744:	f7f4 fdc0 	bl	80002c8 <__aeabi_dsub>
 800b748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b74a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b74e:	ea43 0308 	orr.w	r3, r3, r8
 800b752:	4313      	orrs	r3, r2
 800b754:	4606      	mov	r6, r0
 800b756:	460f      	mov	r7, r1
 800b758:	d054      	beq.n	800b804 <_strtod_l+0xb6c>
 800b75a:	a339      	add	r3, pc, #228	; (adr r3, 800b840 <_strtod_l+0xba8>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7f5 f9dc 	bl	8000b1c <__aeabi_dcmplt>
 800b764:	2800      	cmp	r0, #0
 800b766:	f47f ace5 	bne.w	800b134 <_strtod_l+0x49c>
 800b76a:	a337      	add	r3, pc, #220	; (adr r3, 800b848 <_strtod_l+0xbb0>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f5 f9f0 	bl	8000b58 <__aeabi_dcmpgt>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d095      	beq.n	800b6a8 <_strtod_l+0xa10>
 800b77c:	e4da      	b.n	800b134 <_strtod_l+0x49c>
 800b77e:	9b04      	ldr	r3, [sp, #16]
 800b780:	b333      	cbz	r3, 800b7d0 <_strtod_l+0xb38>
 800b782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b784:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b788:	d822      	bhi.n	800b7d0 <_strtod_l+0xb38>
 800b78a:	a331      	add	r3, pc, #196	; (adr r3, 800b850 <_strtod_l+0xbb8>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	4630      	mov	r0, r6
 800b792:	4639      	mov	r1, r7
 800b794:	f7f5 f9cc 	bl	8000b30 <__aeabi_dcmple>
 800b798:	b1a0      	cbz	r0, 800b7c4 <_strtod_l+0xb2c>
 800b79a:	4639      	mov	r1, r7
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7f5 f9e5 	bl	8000b6c <__aeabi_d2uiz>
 800b7a2:	2801      	cmp	r0, #1
 800b7a4:	bf38      	it	cc
 800b7a6:	2001      	movcc	r0, #1
 800b7a8:	f7f4 fecc 	bl	8000544 <__aeabi_ui2d>
 800b7ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	460f      	mov	r7, r1
 800b7b2:	bb23      	cbnz	r3, 800b7fe <_strtod_l+0xb66>
 800b7b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7b8:	9010      	str	r0, [sp, #64]	; 0x40
 800b7ba:	9311      	str	r3, [sp, #68]	; 0x44
 800b7bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b7c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b7c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b7cc:	1a9b      	subs	r3, r3, r2
 800b7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b7d4:	eeb0 0a48 	vmov.f32	s0, s16
 800b7d8:	eef0 0a68 	vmov.f32	s1, s17
 800b7dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b7e0:	f001 f9b6 	bl	800cb50 <__ulp>
 800b7e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b7e8:	ec53 2b10 	vmov	r2, r3, d0
 800b7ec:	f7f4 ff24 	bl	8000638 <__aeabi_dmul>
 800b7f0:	ec53 2b18 	vmov	r2, r3, d8
 800b7f4:	f7f4 fd6a 	bl	80002cc <__adddf3>
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	4689      	mov	r9, r1
 800b7fc:	e78d      	b.n	800b71a <_strtod_l+0xa82>
 800b7fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b802:	e7db      	b.n	800b7bc <_strtod_l+0xb24>
 800b804:	a314      	add	r3, pc, #80	; (adr r3, 800b858 <_strtod_l+0xbc0>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f7f5 f987 	bl	8000b1c <__aeabi_dcmplt>
 800b80e:	e7b3      	b.n	800b778 <_strtod_l+0xae0>
 800b810:	2300      	movs	r3, #0
 800b812:	930a      	str	r3, [sp, #40]	; 0x28
 800b814:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b818:	6013      	str	r3, [r2, #0]
 800b81a:	f7ff ba7c 	b.w	800ad16 <_strtod_l+0x7e>
 800b81e:	2a65      	cmp	r2, #101	; 0x65
 800b820:	f43f ab75 	beq.w	800af0e <_strtod_l+0x276>
 800b824:	2a45      	cmp	r2, #69	; 0x45
 800b826:	f43f ab72 	beq.w	800af0e <_strtod_l+0x276>
 800b82a:	2301      	movs	r3, #1
 800b82c:	f7ff bbaa 	b.w	800af84 <_strtod_l+0x2ec>
 800b830:	00000000 	.word	0x00000000
 800b834:	bff00000 	.word	0xbff00000
 800b838:	00000000 	.word	0x00000000
 800b83c:	3ff00000 	.word	0x3ff00000
 800b840:	94a03595 	.word	0x94a03595
 800b844:	3fdfffff 	.word	0x3fdfffff
 800b848:	35afe535 	.word	0x35afe535
 800b84c:	3fe00000 	.word	0x3fe00000
 800b850:	ffc00000 	.word	0xffc00000
 800b854:	41dfffff 	.word	0x41dfffff
 800b858:	94a03595 	.word	0x94a03595
 800b85c:	3fcfffff 	.word	0x3fcfffff
 800b860:	3ff00000 	.word	0x3ff00000
 800b864:	3fe00000 	.word	0x3fe00000
 800b868:	7ff00000 	.word	0x7ff00000
 800b86c:	7fe00000 	.word	0x7fe00000
 800b870:	7c9fffff 	.word	0x7c9fffff
 800b874:	7fefffff 	.word	0x7fefffff

0800b878 <strtod>:
 800b878:	460a      	mov	r2, r1
 800b87a:	4601      	mov	r1, r0
 800b87c:	4802      	ldr	r0, [pc, #8]	; (800b888 <strtod+0x10>)
 800b87e:	4b03      	ldr	r3, [pc, #12]	; (800b88c <strtod+0x14>)
 800b880:	6800      	ldr	r0, [r0, #0]
 800b882:	f7ff ba09 	b.w	800ac98 <_strtod_l>
 800b886:	bf00      	nop
 800b888:	200001ec 	.word	0x200001ec
 800b88c:	20000034 	.word	0x20000034

0800b890 <std>:
 800b890:	2300      	movs	r3, #0
 800b892:	b510      	push	{r4, lr}
 800b894:	4604      	mov	r4, r0
 800b896:	e9c0 3300 	strd	r3, r3, [r0]
 800b89a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b89e:	6083      	str	r3, [r0, #8]
 800b8a0:	8181      	strh	r1, [r0, #12]
 800b8a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b8a4:	81c2      	strh	r2, [r0, #14]
 800b8a6:	6183      	str	r3, [r0, #24]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	2208      	movs	r2, #8
 800b8ac:	305c      	adds	r0, #92	; 0x5c
 800b8ae:	f000 f8f4 	bl	800ba9a <memset>
 800b8b2:	4b0d      	ldr	r3, [pc, #52]	; (800b8e8 <std+0x58>)
 800b8b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b8b6:	4b0d      	ldr	r3, [pc, #52]	; (800b8ec <std+0x5c>)
 800b8b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8ba:	4b0d      	ldr	r3, [pc, #52]	; (800b8f0 <std+0x60>)
 800b8bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8be:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <std+0x64>)
 800b8c0:	6323      	str	r3, [r4, #48]	; 0x30
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <std+0x68>)
 800b8c4:	6224      	str	r4, [r4, #32]
 800b8c6:	429c      	cmp	r4, r3
 800b8c8:	d006      	beq.n	800b8d8 <std+0x48>
 800b8ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b8ce:	4294      	cmp	r4, r2
 800b8d0:	d002      	beq.n	800b8d8 <std+0x48>
 800b8d2:	33d0      	adds	r3, #208	; 0xd0
 800b8d4:	429c      	cmp	r4, r3
 800b8d6:	d105      	bne.n	800b8e4 <std+0x54>
 800b8d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e0:	f000 b9d2 	b.w	800bc88 <__retarget_lock_init_recursive>
 800b8e4:	bd10      	pop	{r4, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800ba15 	.word	0x0800ba15
 800b8ec:	0800ba37 	.word	0x0800ba37
 800b8f0:	0800ba6f 	.word	0x0800ba6f
 800b8f4:	0800ba93 	.word	0x0800ba93
 800b8f8:	2000352c 	.word	0x2000352c

0800b8fc <stdio_exit_handler>:
 800b8fc:	4a02      	ldr	r2, [pc, #8]	; (800b908 <stdio_exit_handler+0xc>)
 800b8fe:	4903      	ldr	r1, [pc, #12]	; (800b90c <stdio_exit_handler+0x10>)
 800b900:	4803      	ldr	r0, [pc, #12]	; (800b910 <stdio_exit_handler+0x14>)
 800b902:	f000 b869 	b.w	800b9d8 <_fwalk_sglue>
 800b906:	bf00      	nop
 800b908:	20000028 	.word	0x20000028
 800b90c:	0800cef9 	.word	0x0800cef9
 800b910:	200001a0 	.word	0x200001a0

0800b914 <cleanup_stdio>:
 800b914:	6841      	ldr	r1, [r0, #4]
 800b916:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <cleanup_stdio+0x34>)
 800b918:	4299      	cmp	r1, r3
 800b91a:	b510      	push	{r4, lr}
 800b91c:	4604      	mov	r4, r0
 800b91e:	d001      	beq.n	800b924 <cleanup_stdio+0x10>
 800b920:	f001 faea 	bl	800cef8 <_fflush_r>
 800b924:	68a1      	ldr	r1, [r4, #8]
 800b926:	4b09      	ldr	r3, [pc, #36]	; (800b94c <cleanup_stdio+0x38>)
 800b928:	4299      	cmp	r1, r3
 800b92a:	d002      	beq.n	800b932 <cleanup_stdio+0x1e>
 800b92c:	4620      	mov	r0, r4
 800b92e:	f001 fae3 	bl	800cef8 <_fflush_r>
 800b932:	68e1      	ldr	r1, [r4, #12]
 800b934:	4b06      	ldr	r3, [pc, #24]	; (800b950 <cleanup_stdio+0x3c>)
 800b936:	4299      	cmp	r1, r3
 800b938:	d004      	beq.n	800b944 <cleanup_stdio+0x30>
 800b93a:	4620      	mov	r0, r4
 800b93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b940:	f001 bada 	b.w	800cef8 <_fflush_r>
 800b944:	bd10      	pop	{r4, pc}
 800b946:	bf00      	nop
 800b948:	2000352c 	.word	0x2000352c
 800b94c:	20003594 	.word	0x20003594
 800b950:	200035fc 	.word	0x200035fc

0800b954 <global_stdio_init.part.0>:
 800b954:	b510      	push	{r4, lr}
 800b956:	4b0b      	ldr	r3, [pc, #44]	; (800b984 <global_stdio_init.part.0+0x30>)
 800b958:	4c0b      	ldr	r4, [pc, #44]	; (800b988 <global_stdio_init.part.0+0x34>)
 800b95a:	4a0c      	ldr	r2, [pc, #48]	; (800b98c <global_stdio_init.part.0+0x38>)
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	4620      	mov	r0, r4
 800b960:	2200      	movs	r2, #0
 800b962:	2104      	movs	r1, #4
 800b964:	f7ff ff94 	bl	800b890 <std>
 800b968:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b96c:	2201      	movs	r2, #1
 800b96e:	2109      	movs	r1, #9
 800b970:	f7ff ff8e 	bl	800b890 <std>
 800b974:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b978:	2202      	movs	r2, #2
 800b97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b97e:	2112      	movs	r1, #18
 800b980:	f7ff bf86 	b.w	800b890 <std>
 800b984:	20003664 	.word	0x20003664
 800b988:	2000352c 	.word	0x2000352c
 800b98c:	0800b8fd 	.word	0x0800b8fd

0800b990 <__sfp_lock_acquire>:
 800b990:	4801      	ldr	r0, [pc, #4]	; (800b998 <__sfp_lock_acquire+0x8>)
 800b992:	f000 b97a 	b.w	800bc8a <__retarget_lock_acquire_recursive>
 800b996:	bf00      	nop
 800b998:	2000366d 	.word	0x2000366d

0800b99c <__sfp_lock_release>:
 800b99c:	4801      	ldr	r0, [pc, #4]	; (800b9a4 <__sfp_lock_release+0x8>)
 800b99e:	f000 b975 	b.w	800bc8c <__retarget_lock_release_recursive>
 800b9a2:	bf00      	nop
 800b9a4:	2000366d 	.word	0x2000366d

0800b9a8 <__sinit>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	f7ff fff0 	bl	800b990 <__sfp_lock_acquire>
 800b9b0:	6a23      	ldr	r3, [r4, #32]
 800b9b2:	b11b      	cbz	r3, 800b9bc <__sinit+0x14>
 800b9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b8:	f7ff bff0 	b.w	800b99c <__sfp_lock_release>
 800b9bc:	4b04      	ldr	r3, [pc, #16]	; (800b9d0 <__sinit+0x28>)
 800b9be:	6223      	str	r3, [r4, #32]
 800b9c0:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <__sinit+0x2c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1f5      	bne.n	800b9b4 <__sinit+0xc>
 800b9c8:	f7ff ffc4 	bl	800b954 <global_stdio_init.part.0>
 800b9cc:	e7f2      	b.n	800b9b4 <__sinit+0xc>
 800b9ce:	bf00      	nop
 800b9d0:	0800b915 	.word	0x0800b915
 800b9d4:	20003664 	.word	0x20003664

0800b9d8 <_fwalk_sglue>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	4607      	mov	r7, r0
 800b9de:	4688      	mov	r8, r1
 800b9e0:	4614      	mov	r4, r2
 800b9e2:	2600      	movs	r6, #0
 800b9e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9e8:	f1b9 0901 	subs.w	r9, r9, #1
 800b9ec:	d505      	bpl.n	800b9fa <_fwalk_sglue+0x22>
 800b9ee:	6824      	ldr	r4, [r4, #0]
 800b9f0:	2c00      	cmp	r4, #0
 800b9f2:	d1f7      	bne.n	800b9e4 <_fwalk_sglue+0xc>
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9fa:	89ab      	ldrh	r3, [r5, #12]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d907      	bls.n	800ba10 <_fwalk_sglue+0x38>
 800ba00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba04:	3301      	adds	r3, #1
 800ba06:	d003      	beq.n	800ba10 <_fwalk_sglue+0x38>
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	47c0      	blx	r8
 800ba0e:	4306      	orrs	r6, r0
 800ba10:	3568      	adds	r5, #104	; 0x68
 800ba12:	e7e9      	b.n	800b9e8 <_fwalk_sglue+0x10>

0800ba14 <__sread>:
 800ba14:	b510      	push	{r4, lr}
 800ba16:	460c      	mov	r4, r1
 800ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1c:	f000 f8d6 	bl	800bbcc <_read_r>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	bfab      	itete	ge
 800ba24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba26:	89a3      	ldrhlt	r3, [r4, #12]
 800ba28:	181b      	addge	r3, r3, r0
 800ba2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba2e:	bfac      	ite	ge
 800ba30:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba32:	81a3      	strhlt	r3, [r4, #12]
 800ba34:	bd10      	pop	{r4, pc}

0800ba36 <__swrite>:
 800ba36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3a:	461f      	mov	r7, r3
 800ba3c:	898b      	ldrh	r3, [r1, #12]
 800ba3e:	05db      	lsls	r3, r3, #23
 800ba40:	4605      	mov	r5, r0
 800ba42:	460c      	mov	r4, r1
 800ba44:	4616      	mov	r6, r2
 800ba46:	d505      	bpl.n	800ba54 <__swrite+0x1e>
 800ba48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f000 f8aa 	bl	800bba8 <_lseek_r>
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba5e:	81a3      	strh	r3, [r4, #12]
 800ba60:	4632      	mov	r2, r6
 800ba62:	463b      	mov	r3, r7
 800ba64:	4628      	mov	r0, r5
 800ba66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6a:	f000 b8d1 	b.w	800bc10 <_write_r>

0800ba6e <__sseek>:
 800ba6e:	b510      	push	{r4, lr}
 800ba70:	460c      	mov	r4, r1
 800ba72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba76:	f000 f897 	bl	800bba8 <_lseek_r>
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	bf15      	itete	ne
 800ba80:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba8a:	81a3      	strheq	r3, [r4, #12]
 800ba8c:	bf18      	it	ne
 800ba8e:	81a3      	strhne	r3, [r4, #12]
 800ba90:	bd10      	pop	{r4, pc}

0800ba92 <__sclose>:
 800ba92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba96:	f000 b877 	b.w	800bb88 <_close_r>

0800ba9a <memset>:
 800ba9a:	4402      	add	r2, r0
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d100      	bne.n	800baa4 <memset+0xa>
 800baa2:	4770      	bx	lr
 800baa4:	f803 1b01 	strb.w	r1, [r3], #1
 800baa8:	e7f9      	b.n	800ba9e <memset+0x4>

0800baaa <strncmp>:
 800baaa:	b510      	push	{r4, lr}
 800baac:	b16a      	cbz	r2, 800baca <strncmp+0x20>
 800baae:	3901      	subs	r1, #1
 800bab0:	1884      	adds	r4, r0, r2
 800bab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bab6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800baba:	429a      	cmp	r2, r3
 800babc:	d103      	bne.n	800bac6 <strncmp+0x1c>
 800babe:	42a0      	cmp	r0, r4
 800bac0:	d001      	beq.n	800bac6 <strncmp+0x1c>
 800bac2:	2a00      	cmp	r2, #0
 800bac4:	d1f5      	bne.n	800bab2 <strncmp+0x8>
 800bac6:	1ad0      	subs	r0, r2, r3
 800bac8:	bd10      	pop	{r4, pc}
 800baca:	4610      	mov	r0, r2
 800bacc:	e7fc      	b.n	800bac8 <strncmp+0x1e>
	...

0800bad0 <strtok>:
 800bad0:	4b16      	ldr	r3, [pc, #88]	; (800bb2c <strtok+0x5c>)
 800bad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bad4:	681e      	ldr	r6, [r3, #0]
 800bad6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800bad8:	4605      	mov	r5, r0
 800bada:	b9fc      	cbnz	r4, 800bb1c <strtok+0x4c>
 800badc:	2050      	movs	r0, #80	; 0x50
 800bade:	9101      	str	r1, [sp, #4]
 800bae0:	f7ff f802 	bl	800aae8 <malloc>
 800bae4:	9901      	ldr	r1, [sp, #4]
 800bae6:	6470      	str	r0, [r6, #68]	; 0x44
 800bae8:	4602      	mov	r2, r0
 800baea:	b920      	cbnz	r0, 800baf6 <strtok+0x26>
 800baec:	4b10      	ldr	r3, [pc, #64]	; (800bb30 <strtok+0x60>)
 800baee:	4811      	ldr	r0, [pc, #68]	; (800bb34 <strtok+0x64>)
 800baf0:	215b      	movs	r1, #91	; 0x5b
 800baf2:	f000 f8ed 	bl	800bcd0 <__assert_func>
 800baf6:	e9c0 4400 	strd	r4, r4, [r0]
 800bafa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bafe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bb02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bb06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bb0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bb0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bb12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bb16:	6184      	str	r4, [r0, #24]
 800bb18:	7704      	strb	r4, [r0, #28]
 800bb1a:	6244      	str	r4, [r0, #36]	; 0x24
 800bb1c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4628      	mov	r0, r5
 800bb22:	b002      	add	sp, #8
 800bb24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb28:	f000 b806 	b.w	800bb38 <__strtok_r>
 800bb2c:	200001ec 	.word	0x200001ec
 800bb30:	0800d958 	.word	0x0800d958
 800bb34:	0800d96f 	.word	0x0800d96f

0800bb38 <__strtok_r>:
 800bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3a:	b908      	cbnz	r0, 800bb40 <__strtok_r+0x8>
 800bb3c:	6810      	ldr	r0, [r2, #0]
 800bb3e:	b188      	cbz	r0, 800bb64 <__strtok_r+0x2c>
 800bb40:	4604      	mov	r4, r0
 800bb42:	4620      	mov	r0, r4
 800bb44:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bb48:	460f      	mov	r7, r1
 800bb4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb4e:	b91e      	cbnz	r6, 800bb58 <__strtok_r+0x20>
 800bb50:	b965      	cbnz	r5, 800bb6c <__strtok_r+0x34>
 800bb52:	6015      	str	r5, [r2, #0]
 800bb54:	4628      	mov	r0, r5
 800bb56:	e005      	b.n	800bb64 <__strtok_r+0x2c>
 800bb58:	42b5      	cmp	r5, r6
 800bb5a:	d1f6      	bne.n	800bb4a <__strtok_r+0x12>
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1f0      	bne.n	800bb42 <__strtok_r+0xa>
 800bb60:	6014      	str	r4, [r2, #0]
 800bb62:	7003      	strb	r3, [r0, #0]
 800bb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb66:	461c      	mov	r4, r3
 800bb68:	e00c      	b.n	800bb84 <__strtok_r+0x4c>
 800bb6a:	b915      	cbnz	r5, 800bb72 <__strtok_r+0x3a>
 800bb6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb70:	460e      	mov	r6, r1
 800bb72:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bb76:	42ab      	cmp	r3, r5
 800bb78:	d1f7      	bne.n	800bb6a <__strtok_r+0x32>
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0f3      	beq.n	800bb66 <__strtok_r+0x2e>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bb84:	6014      	str	r4, [r2, #0]
 800bb86:	e7ed      	b.n	800bb64 <__strtok_r+0x2c>

0800bb88 <_close_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d06      	ldr	r5, [pc, #24]	; (800bba4 <_close_r+0x1c>)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	4608      	mov	r0, r1
 800bb92:	602b      	str	r3, [r5, #0]
 800bb94:	f7f6 fe89 	bl	80028aa <_close>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_close_r+0x1a>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_close_r+0x1a>
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	20003668 	.word	0x20003668

0800bba8 <_lseek_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4d07      	ldr	r5, [pc, #28]	; (800bbc8 <_lseek_r+0x20>)
 800bbac:	4604      	mov	r4, r0
 800bbae:	4608      	mov	r0, r1
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	602a      	str	r2, [r5, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f7f6 fe9e 	bl	80028f8 <_lseek>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_lseek_r+0x1e>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_lseek_r+0x1e>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	20003668 	.word	0x20003668

0800bbcc <_read_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4d07      	ldr	r5, [pc, #28]	; (800bbec <_read_r+0x20>)
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	4608      	mov	r0, r1
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	602a      	str	r2, [r5, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	f7f6 fe2c 	bl	8002838 <_read>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d102      	bne.n	800bbea <_read_r+0x1e>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	b103      	cbz	r3, 800bbea <_read_r+0x1e>
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	20003668 	.word	0x20003668

0800bbf0 <_sbrk_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4d06      	ldr	r5, [pc, #24]	; (800bc0c <_sbrk_r+0x1c>)
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	4608      	mov	r0, r1
 800bbfa:	602b      	str	r3, [r5, #0]
 800bbfc:	f7f6 fe8a 	bl	8002914 <_sbrk>
 800bc00:	1c43      	adds	r3, r0, #1
 800bc02:	d102      	bne.n	800bc0a <_sbrk_r+0x1a>
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	b103      	cbz	r3, 800bc0a <_sbrk_r+0x1a>
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	bd38      	pop	{r3, r4, r5, pc}
 800bc0c:	20003668 	.word	0x20003668

0800bc10 <_write_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	4d07      	ldr	r5, [pc, #28]	; (800bc30 <_write_r+0x20>)
 800bc14:	4604      	mov	r4, r0
 800bc16:	4608      	mov	r0, r1
 800bc18:	4611      	mov	r1, r2
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	602a      	str	r2, [r5, #0]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	f7f6 fe27 	bl	8002872 <_write>
 800bc24:	1c43      	adds	r3, r0, #1
 800bc26:	d102      	bne.n	800bc2e <_write_r+0x1e>
 800bc28:	682b      	ldr	r3, [r5, #0]
 800bc2a:	b103      	cbz	r3, 800bc2e <_write_r+0x1e>
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	bd38      	pop	{r3, r4, r5, pc}
 800bc30:	20003668 	.word	0x20003668

0800bc34 <__errno>:
 800bc34:	4b01      	ldr	r3, [pc, #4]	; (800bc3c <__errno+0x8>)
 800bc36:	6818      	ldr	r0, [r3, #0]
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	200001ec 	.word	0x200001ec

0800bc40 <__libc_init_array>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	4d0d      	ldr	r5, [pc, #52]	; (800bc78 <__libc_init_array+0x38>)
 800bc44:	4c0d      	ldr	r4, [pc, #52]	; (800bc7c <__libc_init_array+0x3c>)
 800bc46:	1b64      	subs	r4, r4, r5
 800bc48:	10a4      	asrs	r4, r4, #2
 800bc4a:	2600      	movs	r6, #0
 800bc4c:	42a6      	cmp	r6, r4
 800bc4e:	d109      	bne.n	800bc64 <__libc_init_array+0x24>
 800bc50:	4d0b      	ldr	r5, [pc, #44]	; (800bc80 <__libc_init_array+0x40>)
 800bc52:	4c0c      	ldr	r4, [pc, #48]	; (800bc84 <__libc_init_array+0x44>)
 800bc54:	f001 fdd8 	bl	800d808 <_init>
 800bc58:	1b64      	subs	r4, r4, r5
 800bc5a:	10a4      	asrs	r4, r4, #2
 800bc5c:	2600      	movs	r6, #0
 800bc5e:	42a6      	cmp	r6, r4
 800bc60:	d105      	bne.n	800bc6e <__libc_init_array+0x2e>
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc68:	4798      	blx	r3
 800bc6a:	3601      	adds	r6, #1
 800bc6c:	e7ee      	b.n	800bc4c <__libc_init_array+0xc>
 800bc6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc72:	4798      	blx	r3
 800bc74:	3601      	adds	r6, #1
 800bc76:	e7f2      	b.n	800bc5e <__libc_init_array+0x1e>
 800bc78:	0800dd08 	.word	0x0800dd08
 800bc7c:	0800dd08 	.word	0x0800dd08
 800bc80:	0800dd08 	.word	0x0800dd08
 800bc84:	0800dd0c 	.word	0x0800dd0c

0800bc88 <__retarget_lock_init_recursive>:
 800bc88:	4770      	bx	lr

0800bc8a <__retarget_lock_acquire_recursive>:
 800bc8a:	4770      	bx	lr

0800bc8c <__retarget_lock_release_recursive>:
 800bc8c:	4770      	bx	lr

0800bc8e <strcpy>:
 800bc8e:	4603      	mov	r3, r0
 800bc90:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc94:	f803 2b01 	strb.w	r2, [r3], #1
 800bc98:	2a00      	cmp	r2, #0
 800bc9a:	d1f9      	bne.n	800bc90 <strcpy+0x2>
 800bc9c:	4770      	bx	lr

0800bc9e <memcpy>:
 800bc9e:	440a      	add	r2, r1
 800bca0:	4291      	cmp	r1, r2
 800bca2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bca6:	d100      	bne.n	800bcaa <memcpy+0xc>
 800bca8:	4770      	bx	lr
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb4:	4291      	cmp	r1, r2
 800bcb6:	d1f9      	bne.n	800bcac <memcpy+0xe>
 800bcb8:	bd10      	pop	{r4, pc}
 800bcba:	0000      	movs	r0, r0
 800bcbc:	0000      	movs	r0, r0
	...

0800bcc0 <nan>:
 800bcc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bcc8 <nan+0x8>
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	00000000 	.word	0x00000000
 800bccc:	7ff80000 	.word	0x7ff80000

0800bcd0 <__assert_func>:
 800bcd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <__assert_func+0x2c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4605      	mov	r5, r0
 800bcdc:	68d8      	ldr	r0, [r3, #12]
 800bcde:	b14c      	cbz	r4, 800bcf4 <__assert_func+0x24>
 800bce0:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <__assert_func+0x30>)
 800bce2:	9100      	str	r1, [sp, #0]
 800bce4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bce8:	4906      	ldr	r1, [pc, #24]	; (800bd04 <__assert_func+0x34>)
 800bcea:	462b      	mov	r3, r5
 800bcec:	f001 f92c 	bl	800cf48 <fiprintf>
 800bcf0:	f001 f93c 	bl	800cf6c <abort>
 800bcf4:	4b04      	ldr	r3, [pc, #16]	; (800bd08 <__assert_func+0x38>)
 800bcf6:	461c      	mov	r4, r3
 800bcf8:	e7f3      	b.n	800bce2 <__assert_func+0x12>
 800bcfa:	bf00      	nop
 800bcfc:	200001ec 	.word	0x200001ec
 800bd00:	0800d9d1 	.word	0x0800d9d1
 800bd04:	0800d9de 	.word	0x0800d9de
 800bd08:	0800da0c 	.word	0x0800da0c

0800bd0c <_free_r>:
 800bd0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd0e:	2900      	cmp	r1, #0
 800bd10:	d044      	beq.n	800bd9c <_free_r+0x90>
 800bd12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd16:	9001      	str	r0, [sp, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f1a1 0404 	sub.w	r4, r1, #4
 800bd1e:	bfb8      	it	lt
 800bd20:	18e4      	addlt	r4, r4, r3
 800bd22:	f7fe ff91 	bl	800ac48 <__malloc_lock>
 800bd26:	4a1e      	ldr	r2, [pc, #120]	; (800bda0 <_free_r+0x94>)
 800bd28:	9801      	ldr	r0, [sp, #4]
 800bd2a:	6813      	ldr	r3, [r2, #0]
 800bd2c:	b933      	cbnz	r3, 800bd3c <_free_r+0x30>
 800bd2e:	6063      	str	r3, [r4, #4]
 800bd30:	6014      	str	r4, [r2, #0]
 800bd32:	b003      	add	sp, #12
 800bd34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd38:	f7fe bf8c 	b.w	800ac54 <__malloc_unlock>
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	d908      	bls.n	800bd52 <_free_r+0x46>
 800bd40:	6825      	ldr	r5, [r4, #0]
 800bd42:	1961      	adds	r1, r4, r5
 800bd44:	428b      	cmp	r3, r1
 800bd46:	bf01      	itttt	eq
 800bd48:	6819      	ldreq	r1, [r3, #0]
 800bd4a:	685b      	ldreq	r3, [r3, #4]
 800bd4c:	1949      	addeq	r1, r1, r5
 800bd4e:	6021      	streq	r1, [r4, #0]
 800bd50:	e7ed      	b.n	800bd2e <_free_r+0x22>
 800bd52:	461a      	mov	r2, r3
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	b10b      	cbz	r3, 800bd5c <_free_r+0x50>
 800bd58:	42a3      	cmp	r3, r4
 800bd5a:	d9fa      	bls.n	800bd52 <_free_r+0x46>
 800bd5c:	6811      	ldr	r1, [r2, #0]
 800bd5e:	1855      	adds	r5, r2, r1
 800bd60:	42a5      	cmp	r5, r4
 800bd62:	d10b      	bne.n	800bd7c <_free_r+0x70>
 800bd64:	6824      	ldr	r4, [r4, #0]
 800bd66:	4421      	add	r1, r4
 800bd68:	1854      	adds	r4, r2, r1
 800bd6a:	42a3      	cmp	r3, r4
 800bd6c:	6011      	str	r1, [r2, #0]
 800bd6e:	d1e0      	bne.n	800bd32 <_free_r+0x26>
 800bd70:	681c      	ldr	r4, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	6053      	str	r3, [r2, #4]
 800bd76:	440c      	add	r4, r1
 800bd78:	6014      	str	r4, [r2, #0]
 800bd7a:	e7da      	b.n	800bd32 <_free_r+0x26>
 800bd7c:	d902      	bls.n	800bd84 <_free_r+0x78>
 800bd7e:	230c      	movs	r3, #12
 800bd80:	6003      	str	r3, [r0, #0]
 800bd82:	e7d6      	b.n	800bd32 <_free_r+0x26>
 800bd84:	6825      	ldr	r5, [r4, #0]
 800bd86:	1961      	adds	r1, r4, r5
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	bf04      	itt	eq
 800bd8c:	6819      	ldreq	r1, [r3, #0]
 800bd8e:	685b      	ldreq	r3, [r3, #4]
 800bd90:	6063      	str	r3, [r4, #4]
 800bd92:	bf04      	itt	eq
 800bd94:	1949      	addeq	r1, r1, r5
 800bd96:	6021      	streq	r1, [r4, #0]
 800bd98:	6054      	str	r4, [r2, #4]
 800bd9a:	e7ca      	b.n	800bd32 <_free_r+0x26>
 800bd9c:	b003      	add	sp, #12
 800bd9e:	bd30      	pop	{r4, r5, pc}
 800bda0:	20003524 	.word	0x20003524

0800bda4 <rshift>:
 800bda4:	6903      	ldr	r3, [r0, #16]
 800bda6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bdaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bdb2:	f100 0414 	add.w	r4, r0, #20
 800bdb6:	dd45      	ble.n	800be44 <rshift+0xa0>
 800bdb8:	f011 011f 	ands.w	r1, r1, #31
 800bdbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bdc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bdc4:	d10c      	bne.n	800bde0 <rshift+0x3c>
 800bdc6:	f100 0710 	add.w	r7, r0, #16
 800bdca:	4629      	mov	r1, r5
 800bdcc:	42b1      	cmp	r1, r6
 800bdce:	d334      	bcc.n	800be3a <rshift+0x96>
 800bdd0:	1a9b      	subs	r3, r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	1eea      	subs	r2, r5, #3
 800bdd6:	4296      	cmp	r6, r2
 800bdd8:	bf38      	it	cc
 800bdda:	2300      	movcc	r3, #0
 800bddc:	4423      	add	r3, r4
 800bdde:	e015      	b.n	800be0c <rshift+0x68>
 800bde0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bde4:	f1c1 0820 	rsb	r8, r1, #32
 800bde8:	40cf      	lsrs	r7, r1
 800bdea:	f105 0e04 	add.w	lr, r5, #4
 800bdee:	46a1      	mov	r9, r4
 800bdf0:	4576      	cmp	r6, lr
 800bdf2:	46f4      	mov	ip, lr
 800bdf4:	d815      	bhi.n	800be22 <rshift+0x7e>
 800bdf6:	1a9a      	subs	r2, r3, r2
 800bdf8:	0092      	lsls	r2, r2, #2
 800bdfa:	3a04      	subs	r2, #4
 800bdfc:	3501      	adds	r5, #1
 800bdfe:	42ae      	cmp	r6, r5
 800be00:	bf38      	it	cc
 800be02:	2200      	movcc	r2, #0
 800be04:	18a3      	adds	r3, r4, r2
 800be06:	50a7      	str	r7, [r4, r2]
 800be08:	b107      	cbz	r7, 800be0c <rshift+0x68>
 800be0a:	3304      	adds	r3, #4
 800be0c:	1b1a      	subs	r2, r3, r4
 800be0e:	42a3      	cmp	r3, r4
 800be10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be14:	bf08      	it	eq
 800be16:	2300      	moveq	r3, #0
 800be18:	6102      	str	r2, [r0, #16]
 800be1a:	bf08      	it	eq
 800be1c:	6143      	streq	r3, [r0, #20]
 800be1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be22:	f8dc c000 	ldr.w	ip, [ip]
 800be26:	fa0c fc08 	lsl.w	ip, ip, r8
 800be2a:	ea4c 0707 	orr.w	r7, ip, r7
 800be2e:	f849 7b04 	str.w	r7, [r9], #4
 800be32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be36:	40cf      	lsrs	r7, r1
 800be38:	e7da      	b.n	800bdf0 <rshift+0x4c>
 800be3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800be3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800be42:	e7c3      	b.n	800bdcc <rshift+0x28>
 800be44:	4623      	mov	r3, r4
 800be46:	e7e1      	b.n	800be0c <rshift+0x68>

0800be48 <__hexdig_fun>:
 800be48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800be4c:	2b09      	cmp	r3, #9
 800be4e:	d802      	bhi.n	800be56 <__hexdig_fun+0xe>
 800be50:	3820      	subs	r0, #32
 800be52:	b2c0      	uxtb	r0, r0
 800be54:	4770      	bx	lr
 800be56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800be5a:	2b05      	cmp	r3, #5
 800be5c:	d801      	bhi.n	800be62 <__hexdig_fun+0x1a>
 800be5e:	3847      	subs	r0, #71	; 0x47
 800be60:	e7f7      	b.n	800be52 <__hexdig_fun+0xa>
 800be62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800be66:	2b05      	cmp	r3, #5
 800be68:	d801      	bhi.n	800be6e <__hexdig_fun+0x26>
 800be6a:	3827      	subs	r0, #39	; 0x27
 800be6c:	e7f1      	b.n	800be52 <__hexdig_fun+0xa>
 800be6e:	2000      	movs	r0, #0
 800be70:	4770      	bx	lr
	...

0800be74 <__gethex>:
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	4617      	mov	r7, r2
 800be7a:	680a      	ldr	r2, [r1, #0]
 800be7c:	b085      	sub	sp, #20
 800be7e:	f102 0b02 	add.w	fp, r2, #2
 800be82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800be86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800be8a:	4681      	mov	r9, r0
 800be8c:	468a      	mov	sl, r1
 800be8e:	9302      	str	r3, [sp, #8]
 800be90:	32fe      	adds	r2, #254	; 0xfe
 800be92:	eb02 030b 	add.w	r3, r2, fp
 800be96:	46d8      	mov	r8, fp
 800be98:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800be9c:	9301      	str	r3, [sp, #4]
 800be9e:	2830      	cmp	r0, #48	; 0x30
 800bea0:	d0f7      	beq.n	800be92 <__gethex+0x1e>
 800bea2:	f7ff ffd1 	bl	800be48 <__hexdig_fun>
 800bea6:	4604      	mov	r4, r0
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d138      	bne.n	800bf1e <__gethex+0xaa>
 800beac:	49a7      	ldr	r1, [pc, #668]	; (800c14c <__gethex+0x2d8>)
 800beae:	2201      	movs	r2, #1
 800beb0:	4640      	mov	r0, r8
 800beb2:	f7ff fdfa 	bl	800baaa <strncmp>
 800beb6:	4606      	mov	r6, r0
 800beb8:	2800      	cmp	r0, #0
 800beba:	d169      	bne.n	800bf90 <__gethex+0x11c>
 800bebc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bec0:	465d      	mov	r5, fp
 800bec2:	f7ff ffc1 	bl	800be48 <__hexdig_fun>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d064      	beq.n	800bf94 <__gethex+0x120>
 800beca:	465a      	mov	r2, fp
 800becc:	7810      	ldrb	r0, [r2, #0]
 800bece:	2830      	cmp	r0, #48	; 0x30
 800bed0:	4690      	mov	r8, r2
 800bed2:	f102 0201 	add.w	r2, r2, #1
 800bed6:	d0f9      	beq.n	800becc <__gethex+0x58>
 800bed8:	f7ff ffb6 	bl	800be48 <__hexdig_fun>
 800bedc:	2301      	movs	r3, #1
 800bede:	fab0 f480 	clz	r4, r0
 800bee2:	0964      	lsrs	r4, r4, #5
 800bee4:	465e      	mov	r6, fp
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	4642      	mov	r2, r8
 800beea:	4615      	mov	r5, r2
 800beec:	3201      	adds	r2, #1
 800beee:	7828      	ldrb	r0, [r5, #0]
 800bef0:	f7ff ffaa 	bl	800be48 <__hexdig_fun>
 800bef4:	2800      	cmp	r0, #0
 800bef6:	d1f8      	bne.n	800beea <__gethex+0x76>
 800bef8:	4994      	ldr	r1, [pc, #592]	; (800c14c <__gethex+0x2d8>)
 800befa:	2201      	movs	r2, #1
 800befc:	4628      	mov	r0, r5
 800befe:	f7ff fdd4 	bl	800baaa <strncmp>
 800bf02:	b978      	cbnz	r0, 800bf24 <__gethex+0xb0>
 800bf04:	b946      	cbnz	r6, 800bf18 <__gethex+0xa4>
 800bf06:	1c6e      	adds	r6, r5, #1
 800bf08:	4632      	mov	r2, r6
 800bf0a:	4615      	mov	r5, r2
 800bf0c:	3201      	adds	r2, #1
 800bf0e:	7828      	ldrb	r0, [r5, #0]
 800bf10:	f7ff ff9a 	bl	800be48 <__hexdig_fun>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d1f8      	bne.n	800bf0a <__gethex+0x96>
 800bf18:	1b73      	subs	r3, r6, r5
 800bf1a:	009e      	lsls	r6, r3, #2
 800bf1c:	e004      	b.n	800bf28 <__gethex+0xb4>
 800bf1e:	2400      	movs	r4, #0
 800bf20:	4626      	mov	r6, r4
 800bf22:	e7e1      	b.n	800bee8 <__gethex+0x74>
 800bf24:	2e00      	cmp	r6, #0
 800bf26:	d1f7      	bne.n	800bf18 <__gethex+0xa4>
 800bf28:	782b      	ldrb	r3, [r5, #0]
 800bf2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf2e:	2b50      	cmp	r3, #80	; 0x50
 800bf30:	d13d      	bne.n	800bfae <__gethex+0x13a>
 800bf32:	786b      	ldrb	r3, [r5, #1]
 800bf34:	2b2b      	cmp	r3, #43	; 0x2b
 800bf36:	d02f      	beq.n	800bf98 <__gethex+0x124>
 800bf38:	2b2d      	cmp	r3, #45	; 0x2d
 800bf3a:	d031      	beq.n	800bfa0 <__gethex+0x12c>
 800bf3c:	1c69      	adds	r1, r5, #1
 800bf3e:	f04f 0b00 	mov.w	fp, #0
 800bf42:	7808      	ldrb	r0, [r1, #0]
 800bf44:	f7ff ff80 	bl	800be48 <__hexdig_fun>
 800bf48:	1e42      	subs	r2, r0, #1
 800bf4a:	b2d2      	uxtb	r2, r2
 800bf4c:	2a18      	cmp	r2, #24
 800bf4e:	d82e      	bhi.n	800bfae <__gethex+0x13a>
 800bf50:	f1a0 0210 	sub.w	r2, r0, #16
 800bf54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf58:	f7ff ff76 	bl	800be48 <__hexdig_fun>
 800bf5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bf60:	fa5f fc8c 	uxtb.w	ip, ip
 800bf64:	f1bc 0f18 	cmp.w	ip, #24
 800bf68:	d91d      	bls.n	800bfa6 <__gethex+0x132>
 800bf6a:	f1bb 0f00 	cmp.w	fp, #0
 800bf6e:	d000      	beq.n	800bf72 <__gethex+0xfe>
 800bf70:	4252      	negs	r2, r2
 800bf72:	4416      	add	r6, r2
 800bf74:	f8ca 1000 	str.w	r1, [sl]
 800bf78:	b1dc      	cbz	r4, 800bfb2 <__gethex+0x13e>
 800bf7a:	9b01      	ldr	r3, [sp, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	bf14      	ite	ne
 800bf80:	f04f 0800 	movne.w	r8, #0
 800bf84:	f04f 0806 	moveq.w	r8, #6
 800bf88:	4640      	mov	r0, r8
 800bf8a:	b005      	add	sp, #20
 800bf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf90:	4645      	mov	r5, r8
 800bf92:	4626      	mov	r6, r4
 800bf94:	2401      	movs	r4, #1
 800bf96:	e7c7      	b.n	800bf28 <__gethex+0xb4>
 800bf98:	f04f 0b00 	mov.w	fp, #0
 800bf9c:	1ca9      	adds	r1, r5, #2
 800bf9e:	e7d0      	b.n	800bf42 <__gethex+0xce>
 800bfa0:	f04f 0b01 	mov.w	fp, #1
 800bfa4:	e7fa      	b.n	800bf9c <__gethex+0x128>
 800bfa6:	230a      	movs	r3, #10
 800bfa8:	fb03 0002 	mla	r0, r3, r2, r0
 800bfac:	e7d0      	b.n	800bf50 <__gethex+0xdc>
 800bfae:	4629      	mov	r1, r5
 800bfb0:	e7e0      	b.n	800bf74 <__gethex+0x100>
 800bfb2:	eba5 0308 	sub.w	r3, r5, r8
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	4621      	mov	r1, r4
 800bfba:	2b07      	cmp	r3, #7
 800bfbc:	dc0a      	bgt.n	800bfd4 <__gethex+0x160>
 800bfbe:	4648      	mov	r0, r9
 800bfc0:	f000 fa5a 	bl	800c478 <_Balloc>
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	b940      	cbnz	r0, 800bfda <__gethex+0x166>
 800bfc8:	4b61      	ldr	r3, [pc, #388]	; (800c150 <__gethex+0x2dc>)
 800bfca:	4602      	mov	r2, r0
 800bfcc:	21e4      	movs	r1, #228	; 0xe4
 800bfce:	4861      	ldr	r0, [pc, #388]	; (800c154 <__gethex+0x2e0>)
 800bfd0:	f7ff fe7e 	bl	800bcd0 <__assert_func>
 800bfd4:	3101      	adds	r1, #1
 800bfd6:	105b      	asrs	r3, r3, #1
 800bfd8:	e7ef      	b.n	800bfba <__gethex+0x146>
 800bfda:	f100 0a14 	add.w	sl, r0, #20
 800bfde:	2300      	movs	r3, #0
 800bfe0:	495a      	ldr	r1, [pc, #360]	; (800c14c <__gethex+0x2d8>)
 800bfe2:	f8cd a004 	str.w	sl, [sp, #4]
 800bfe6:	469b      	mov	fp, r3
 800bfe8:	45a8      	cmp	r8, r5
 800bfea:	d342      	bcc.n	800c072 <__gethex+0x1fe>
 800bfec:	9801      	ldr	r0, [sp, #4]
 800bfee:	f840 bb04 	str.w	fp, [r0], #4
 800bff2:	eba0 000a 	sub.w	r0, r0, sl
 800bff6:	1080      	asrs	r0, r0, #2
 800bff8:	6120      	str	r0, [r4, #16]
 800bffa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bffe:	4658      	mov	r0, fp
 800c000:	f000 fb2c 	bl	800c65c <__hi0bits>
 800c004:	683d      	ldr	r5, [r7, #0]
 800c006:	eba8 0000 	sub.w	r0, r8, r0
 800c00a:	42a8      	cmp	r0, r5
 800c00c:	dd59      	ble.n	800c0c2 <__gethex+0x24e>
 800c00e:	eba0 0805 	sub.w	r8, r0, r5
 800c012:	4641      	mov	r1, r8
 800c014:	4620      	mov	r0, r4
 800c016:	f000 febb 	bl	800cd90 <__any_on>
 800c01a:	4683      	mov	fp, r0
 800c01c:	b1b8      	cbz	r0, 800c04e <__gethex+0x1da>
 800c01e:	f108 33ff 	add.w	r3, r8, #4294967295
 800c022:	1159      	asrs	r1, r3, #5
 800c024:	f003 021f 	and.w	r2, r3, #31
 800c028:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c02c:	f04f 0b01 	mov.w	fp, #1
 800c030:	fa0b f202 	lsl.w	r2, fp, r2
 800c034:	420a      	tst	r2, r1
 800c036:	d00a      	beq.n	800c04e <__gethex+0x1da>
 800c038:	455b      	cmp	r3, fp
 800c03a:	dd06      	ble.n	800c04a <__gethex+0x1d6>
 800c03c:	f1a8 0102 	sub.w	r1, r8, #2
 800c040:	4620      	mov	r0, r4
 800c042:	f000 fea5 	bl	800cd90 <__any_on>
 800c046:	2800      	cmp	r0, #0
 800c048:	d138      	bne.n	800c0bc <__gethex+0x248>
 800c04a:	f04f 0b02 	mov.w	fp, #2
 800c04e:	4641      	mov	r1, r8
 800c050:	4620      	mov	r0, r4
 800c052:	f7ff fea7 	bl	800bda4 <rshift>
 800c056:	4446      	add	r6, r8
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	42b3      	cmp	r3, r6
 800c05c:	da41      	bge.n	800c0e2 <__gethex+0x26e>
 800c05e:	4621      	mov	r1, r4
 800c060:	4648      	mov	r0, r9
 800c062:	f000 fa49 	bl	800c4f8 <_Bfree>
 800c066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c068:	2300      	movs	r3, #0
 800c06a:	6013      	str	r3, [r2, #0]
 800c06c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c070:	e78a      	b.n	800bf88 <__gethex+0x114>
 800c072:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c076:	2a2e      	cmp	r2, #46	; 0x2e
 800c078:	d014      	beq.n	800c0a4 <__gethex+0x230>
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	d106      	bne.n	800c08c <__gethex+0x218>
 800c07e:	9b01      	ldr	r3, [sp, #4]
 800c080:	f843 bb04 	str.w	fp, [r3], #4
 800c084:	f04f 0b00 	mov.w	fp, #0
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	465b      	mov	r3, fp
 800c08c:	7828      	ldrb	r0, [r5, #0]
 800c08e:	9303      	str	r3, [sp, #12]
 800c090:	f7ff feda 	bl	800be48 <__hexdig_fun>
 800c094:	9b03      	ldr	r3, [sp, #12]
 800c096:	f000 000f 	and.w	r0, r0, #15
 800c09a:	4098      	lsls	r0, r3
 800c09c:	ea4b 0b00 	orr.w	fp, fp, r0
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	e7a1      	b.n	800bfe8 <__gethex+0x174>
 800c0a4:	45a8      	cmp	r8, r5
 800c0a6:	d8e8      	bhi.n	800c07a <__gethex+0x206>
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	9303      	str	r3, [sp, #12]
 800c0ae:	f7ff fcfc 	bl	800baaa <strncmp>
 800c0b2:	4926      	ldr	r1, [pc, #152]	; (800c14c <__gethex+0x2d8>)
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d1df      	bne.n	800c07a <__gethex+0x206>
 800c0ba:	e795      	b.n	800bfe8 <__gethex+0x174>
 800c0bc:	f04f 0b03 	mov.w	fp, #3
 800c0c0:	e7c5      	b.n	800c04e <__gethex+0x1da>
 800c0c2:	da0b      	bge.n	800c0dc <__gethex+0x268>
 800c0c4:	eba5 0800 	sub.w	r8, r5, r0
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4642      	mov	r2, r8
 800c0cc:	4648      	mov	r0, r9
 800c0ce:	f000 fc2d 	bl	800c92c <__lshift>
 800c0d2:	eba6 0608 	sub.w	r6, r6, r8
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	f100 0a14 	add.w	sl, r0, #20
 800c0dc:	f04f 0b00 	mov.w	fp, #0
 800c0e0:	e7ba      	b.n	800c058 <__gethex+0x1e4>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	42b3      	cmp	r3, r6
 800c0e6:	dd73      	ble.n	800c1d0 <__gethex+0x35c>
 800c0e8:	1b9e      	subs	r6, r3, r6
 800c0ea:	42b5      	cmp	r5, r6
 800c0ec:	dc34      	bgt.n	800c158 <__gethex+0x2e4>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d023      	beq.n	800c13c <__gethex+0x2c8>
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d025      	beq.n	800c144 <__gethex+0x2d0>
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d115      	bne.n	800c128 <__gethex+0x2b4>
 800c0fc:	42b5      	cmp	r5, r6
 800c0fe:	d113      	bne.n	800c128 <__gethex+0x2b4>
 800c100:	2d01      	cmp	r5, #1
 800c102:	d10b      	bne.n	800c11c <__gethex+0x2a8>
 800c104:	9a02      	ldr	r2, [sp, #8]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	2301      	movs	r3, #1
 800c10c:	6123      	str	r3, [r4, #16]
 800c10e:	f8ca 3000 	str.w	r3, [sl]
 800c112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c114:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c118:	601c      	str	r4, [r3, #0]
 800c11a:	e735      	b.n	800bf88 <__gethex+0x114>
 800c11c:	1e69      	subs	r1, r5, #1
 800c11e:	4620      	mov	r0, r4
 800c120:	f000 fe36 	bl	800cd90 <__any_on>
 800c124:	2800      	cmp	r0, #0
 800c126:	d1ed      	bne.n	800c104 <__gethex+0x290>
 800c128:	4621      	mov	r1, r4
 800c12a:	4648      	mov	r0, r9
 800c12c:	f000 f9e4 	bl	800c4f8 <_Bfree>
 800c130:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c132:	2300      	movs	r3, #0
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c13a:	e725      	b.n	800bf88 <__gethex+0x114>
 800c13c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1f2      	bne.n	800c128 <__gethex+0x2b4>
 800c142:	e7df      	b.n	800c104 <__gethex+0x290>
 800c144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1dc      	bne.n	800c104 <__gethex+0x290>
 800c14a:	e7ed      	b.n	800c128 <__gethex+0x2b4>
 800c14c:	0800d8f8 	.word	0x0800d8f8
 800c150:	0800da0d 	.word	0x0800da0d
 800c154:	0800da1e 	.word	0x0800da1e
 800c158:	f106 38ff 	add.w	r8, r6, #4294967295
 800c15c:	f1bb 0f00 	cmp.w	fp, #0
 800c160:	d133      	bne.n	800c1ca <__gethex+0x356>
 800c162:	f1b8 0f00 	cmp.w	r8, #0
 800c166:	d004      	beq.n	800c172 <__gethex+0x2fe>
 800c168:	4641      	mov	r1, r8
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 fe10 	bl	800cd90 <__any_on>
 800c170:	4683      	mov	fp, r0
 800c172:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c176:	2301      	movs	r3, #1
 800c178:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c17c:	f008 081f 	and.w	r8, r8, #31
 800c180:	fa03 f308 	lsl.w	r3, r3, r8
 800c184:	4213      	tst	r3, r2
 800c186:	4631      	mov	r1, r6
 800c188:	4620      	mov	r0, r4
 800c18a:	bf18      	it	ne
 800c18c:	f04b 0b02 	orrne.w	fp, fp, #2
 800c190:	1bad      	subs	r5, r5, r6
 800c192:	f7ff fe07 	bl	800bda4 <rshift>
 800c196:	687e      	ldr	r6, [r7, #4]
 800c198:	f04f 0802 	mov.w	r8, #2
 800c19c:	f1bb 0f00 	cmp.w	fp, #0
 800c1a0:	d04a      	beq.n	800c238 <__gethex+0x3c4>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d016      	beq.n	800c1d6 <__gethex+0x362>
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d018      	beq.n	800c1de <__gethex+0x36a>
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d109      	bne.n	800c1c4 <__gethex+0x350>
 800c1b0:	f01b 0f02 	tst.w	fp, #2
 800c1b4:	d006      	beq.n	800c1c4 <__gethex+0x350>
 800c1b6:	f8da 3000 	ldr.w	r3, [sl]
 800c1ba:	ea4b 0b03 	orr.w	fp, fp, r3
 800c1be:	f01b 0f01 	tst.w	fp, #1
 800c1c2:	d10f      	bne.n	800c1e4 <__gethex+0x370>
 800c1c4:	f048 0810 	orr.w	r8, r8, #16
 800c1c8:	e036      	b.n	800c238 <__gethex+0x3c4>
 800c1ca:	f04f 0b01 	mov.w	fp, #1
 800c1ce:	e7d0      	b.n	800c172 <__gethex+0x2fe>
 800c1d0:	f04f 0801 	mov.w	r8, #1
 800c1d4:	e7e2      	b.n	800c19c <__gethex+0x328>
 800c1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1d8:	f1c3 0301 	rsb	r3, r3, #1
 800c1dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d0ef      	beq.n	800c1c4 <__gethex+0x350>
 800c1e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c1e8:	f104 0214 	add.w	r2, r4, #20
 800c1ec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	4694      	mov	ip, r2
 800c1fa:	f852 1b04 	ldr.w	r1, [r2], #4
 800c1fe:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c202:	d01e      	beq.n	800c242 <__gethex+0x3ce>
 800c204:	3101      	adds	r1, #1
 800c206:	f8cc 1000 	str.w	r1, [ip]
 800c20a:	f1b8 0f02 	cmp.w	r8, #2
 800c20e:	f104 0214 	add.w	r2, r4, #20
 800c212:	d13d      	bne.n	800c290 <__gethex+0x41c>
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	3b01      	subs	r3, #1
 800c218:	42ab      	cmp	r3, r5
 800c21a:	d10b      	bne.n	800c234 <__gethex+0x3c0>
 800c21c:	1169      	asrs	r1, r5, #5
 800c21e:	2301      	movs	r3, #1
 800c220:	f005 051f 	and.w	r5, r5, #31
 800c224:	fa03 f505 	lsl.w	r5, r3, r5
 800c228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c22c:	421d      	tst	r5, r3
 800c22e:	bf18      	it	ne
 800c230:	f04f 0801 	movne.w	r8, #1
 800c234:	f048 0820 	orr.w	r8, r8, #32
 800c238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c23a:	601c      	str	r4, [r3, #0]
 800c23c:	9b02      	ldr	r3, [sp, #8]
 800c23e:	601e      	str	r6, [r3, #0]
 800c240:	e6a2      	b.n	800bf88 <__gethex+0x114>
 800c242:	4290      	cmp	r0, r2
 800c244:	f842 3c04 	str.w	r3, [r2, #-4]
 800c248:	d8d6      	bhi.n	800c1f8 <__gethex+0x384>
 800c24a:	68a2      	ldr	r2, [r4, #8]
 800c24c:	4593      	cmp	fp, r2
 800c24e:	db17      	blt.n	800c280 <__gethex+0x40c>
 800c250:	6861      	ldr	r1, [r4, #4]
 800c252:	4648      	mov	r0, r9
 800c254:	3101      	adds	r1, #1
 800c256:	f000 f90f 	bl	800c478 <_Balloc>
 800c25a:	4682      	mov	sl, r0
 800c25c:	b918      	cbnz	r0, 800c266 <__gethex+0x3f2>
 800c25e:	4b1b      	ldr	r3, [pc, #108]	; (800c2cc <__gethex+0x458>)
 800c260:	4602      	mov	r2, r0
 800c262:	2184      	movs	r1, #132	; 0x84
 800c264:	e6b3      	b.n	800bfce <__gethex+0x15a>
 800c266:	6922      	ldr	r2, [r4, #16]
 800c268:	3202      	adds	r2, #2
 800c26a:	f104 010c 	add.w	r1, r4, #12
 800c26e:	0092      	lsls	r2, r2, #2
 800c270:	300c      	adds	r0, #12
 800c272:	f7ff fd14 	bl	800bc9e <memcpy>
 800c276:	4621      	mov	r1, r4
 800c278:	4648      	mov	r0, r9
 800c27a:	f000 f93d 	bl	800c4f8 <_Bfree>
 800c27e:	4654      	mov	r4, sl
 800c280:	6922      	ldr	r2, [r4, #16]
 800c282:	1c51      	adds	r1, r2, #1
 800c284:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c288:	6121      	str	r1, [r4, #16]
 800c28a:	2101      	movs	r1, #1
 800c28c:	6151      	str	r1, [r2, #20]
 800c28e:	e7bc      	b.n	800c20a <__gethex+0x396>
 800c290:	6921      	ldr	r1, [r4, #16]
 800c292:	4559      	cmp	r1, fp
 800c294:	dd0b      	ble.n	800c2ae <__gethex+0x43a>
 800c296:	2101      	movs	r1, #1
 800c298:	4620      	mov	r0, r4
 800c29a:	f7ff fd83 	bl	800bda4 <rshift>
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	3601      	adds	r6, #1
 800c2a2:	42b3      	cmp	r3, r6
 800c2a4:	f6ff aedb 	blt.w	800c05e <__gethex+0x1ea>
 800c2a8:	f04f 0801 	mov.w	r8, #1
 800c2ac:	e7c2      	b.n	800c234 <__gethex+0x3c0>
 800c2ae:	f015 051f 	ands.w	r5, r5, #31
 800c2b2:	d0f9      	beq.n	800c2a8 <__gethex+0x434>
 800c2b4:	9b01      	ldr	r3, [sp, #4]
 800c2b6:	441a      	add	r2, r3
 800c2b8:	f1c5 0520 	rsb	r5, r5, #32
 800c2bc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c2c0:	f000 f9cc 	bl	800c65c <__hi0bits>
 800c2c4:	42a8      	cmp	r0, r5
 800c2c6:	dbe6      	blt.n	800c296 <__gethex+0x422>
 800c2c8:	e7ee      	b.n	800c2a8 <__gethex+0x434>
 800c2ca:	bf00      	nop
 800c2cc:	0800da0d 	.word	0x0800da0d

0800c2d0 <L_shift>:
 800c2d0:	f1c2 0208 	rsb	r2, r2, #8
 800c2d4:	0092      	lsls	r2, r2, #2
 800c2d6:	b570      	push	{r4, r5, r6, lr}
 800c2d8:	f1c2 0620 	rsb	r6, r2, #32
 800c2dc:	6843      	ldr	r3, [r0, #4]
 800c2de:	6804      	ldr	r4, [r0, #0]
 800c2e0:	fa03 f506 	lsl.w	r5, r3, r6
 800c2e4:	432c      	orrs	r4, r5
 800c2e6:	40d3      	lsrs	r3, r2
 800c2e8:	6004      	str	r4, [r0, #0]
 800c2ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800c2ee:	4288      	cmp	r0, r1
 800c2f0:	d3f4      	bcc.n	800c2dc <L_shift+0xc>
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}

0800c2f4 <__match>:
 800c2f4:	b530      	push	{r4, r5, lr}
 800c2f6:	6803      	ldr	r3, [r0, #0]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2fe:	b914      	cbnz	r4, 800c306 <__match+0x12>
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	2001      	movs	r0, #1
 800c304:	bd30      	pop	{r4, r5, pc}
 800c306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c30a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c30e:	2d19      	cmp	r5, #25
 800c310:	bf98      	it	ls
 800c312:	3220      	addls	r2, #32
 800c314:	42a2      	cmp	r2, r4
 800c316:	d0f0      	beq.n	800c2fa <__match+0x6>
 800c318:	2000      	movs	r0, #0
 800c31a:	e7f3      	b.n	800c304 <__match+0x10>

0800c31c <__hexnan>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	680b      	ldr	r3, [r1, #0]
 800c322:	6801      	ldr	r1, [r0, #0]
 800c324:	115e      	asrs	r6, r3, #5
 800c326:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c32a:	f013 031f 	ands.w	r3, r3, #31
 800c32e:	b087      	sub	sp, #28
 800c330:	bf18      	it	ne
 800c332:	3604      	addne	r6, #4
 800c334:	2500      	movs	r5, #0
 800c336:	1f37      	subs	r7, r6, #4
 800c338:	4682      	mov	sl, r0
 800c33a:	4690      	mov	r8, r2
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c342:	46b9      	mov	r9, r7
 800c344:	463c      	mov	r4, r7
 800c346:	9502      	str	r5, [sp, #8]
 800c348:	46ab      	mov	fp, r5
 800c34a:	784a      	ldrb	r2, [r1, #1]
 800c34c:	1c4b      	adds	r3, r1, #1
 800c34e:	9303      	str	r3, [sp, #12]
 800c350:	b342      	cbz	r2, 800c3a4 <__hexnan+0x88>
 800c352:	4610      	mov	r0, r2
 800c354:	9105      	str	r1, [sp, #20]
 800c356:	9204      	str	r2, [sp, #16]
 800c358:	f7ff fd76 	bl	800be48 <__hexdig_fun>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d14f      	bne.n	800c400 <__hexnan+0xe4>
 800c360:	9a04      	ldr	r2, [sp, #16]
 800c362:	9905      	ldr	r1, [sp, #20]
 800c364:	2a20      	cmp	r2, #32
 800c366:	d818      	bhi.n	800c39a <__hexnan+0x7e>
 800c368:	9b02      	ldr	r3, [sp, #8]
 800c36a:	459b      	cmp	fp, r3
 800c36c:	dd13      	ble.n	800c396 <__hexnan+0x7a>
 800c36e:	454c      	cmp	r4, r9
 800c370:	d206      	bcs.n	800c380 <__hexnan+0x64>
 800c372:	2d07      	cmp	r5, #7
 800c374:	dc04      	bgt.n	800c380 <__hexnan+0x64>
 800c376:	462a      	mov	r2, r5
 800c378:	4649      	mov	r1, r9
 800c37a:	4620      	mov	r0, r4
 800c37c:	f7ff ffa8 	bl	800c2d0 <L_shift>
 800c380:	4544      	cmp	r4, r8
 800c382:	d950      	bls.n	800c426 <__hexnan+0x10a>
 800c384:	2300      	movs	r3, #0
 800c386:	f1a4 0904 	sub.w	r9, r4, #4
 800c38a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c38e:	f8cd b008 	str.w	fp, [sp, #8]
 800c392:	464c      	mov	r4, r9
 800c394:	461d      	mov	r5, r3
 800c396:	9903      	ldr	r1, [sp, #12]
 800c398:	e7d7      	b.n	800c34a <__hexnan+0x2e>
 800c39a:	2a29      	cmp	r2, #41	; 0x29
 800c39c:	d155      	bne.n	800c44a <__hexnan+0x12e>
 800c39e:	3102      	adds	r1, #2
 800c3a0:	f8ca 1000 	str.w	r1, [sl]
 800c3a4:	f1bb 0f00 	cmp.w	fp, #0
 800c3a8:	d04f      	beq.n	800c44a <__hexnan+0x12e>
 800c3aa:	454c      	cmp	r4, r9
 800c3ac:	d206      	bcs.n	800c3bc <__hexnan+0xa0>
 800c3ae:	2d07      	cmp	r5, #7
 800c3b0:	dc04      	bgt.n	800c3bc <__hexnan+0xa0>
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	4649      	mov	r1, r9
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f7ff ff8a 	bl	800c2d0 <L_shift>
 800c3bc:	4544      	cmp	r4, r8
 800c3be:	d934      	bls.n	800c42a <__hexnan+0x10e>
 800c3c0:	f1a8 0204 	sub.w	r2, r8, #4
 800c3c4:	4623      	mov	r3, r4
 800c3c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c3ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800c3ce:	429f      	cmp	r7, r3
 800c3d0:	d2f9      	bcs.n	800c3c6 <__hexnan+0xaa>
 800c3d2:	1b3b      	subs	r3, r7, r4
 800c3d4:	f023 0303 	bic.w	r3, r3, #3
 800c3d8:	3304      	adds	r3, #4
 800c3da:	3e03      	subs	r6, #3
 800c3dc:	3401      	adds	r4, #1
 800c3de:	42a6      	cmp	r6, r4
 800c3e0:	bf38      	it	cc
 800c3e2:	2304      	movcc	r3, #4
 800c3e4:	4443      	add	r3, r8
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f843 2b04 	str.w	r2, [r3], #4
 800c3ec:	429f      	cmp	r7, r3
 800c3ee:	d2fb      	bcs.n	800c3e8 <__hexnan+0xcc>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	b91b      	cbnz	r3, 800c3fc <__hexnan+0xe0>
 800c3f4:	4547      	cmp	r7, r8
 800c3f6:	d126      	bne.n	800c446 <__hexnan+0x12a>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	603b      	str	r3, [r7, #0]
 800c3fc:	2005      	movs	r0, #5
 800c3fe:	e025      	b.n	800c44c <__hexnan+0x130>
 800c400:	3501      	adds	r5, #1
 800c402:	2d08      	cmp	r5, #8
 800c404:	f10b 0b01 	add.w	fp, fp, #1
 800c408:	dd06      	ble.n	800c418 <__hexnan+0xfc>
 800c40a:	4544      	cmp	r4, r8
 800c40c:	d9c3      	bls.n	800c396 <__hexnan+0x7a>
 800c40e:	2300      	movs	r3, #0
 800c410:	f844 3c04 	str.w	r3, [r4, #-4]
 800c414:	2501      	movs	r5, #1
 800c416:	3c04      	subs	r4, #4
 800c418:	6822      	ldr	r2, [r4, #0]
 800c41a:	f000 000f 	and.w	r0, r0, #15
 800c41e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c422:	6020      	str	r0, [r4, #0]
 800c424:	e7b7      	b.n	800c396 <__hexnan+0x7a>
 800c426:	2508      	movs	r5, #8
 800c428:	e7b5      	b.n	800c396 <__hexnan+0x7a>
 800c42a:	9b01      	ldr	r3, [sp, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0df      	beq.n	800c3f0 <__hexnan+0xd4>
 800c430:	f1c3 0320 	rsb	r3, r3, #32
 800c434:	f04f 32ff 	mov.w	r2, #4294967295
 800c438:	40da      	lsrs	r2, r3
 800c43a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c43e:	4013      	ands	r3, r2
 800c440:	f846 3c04 	str.w	r3, [r6, #-4]
 800c444:	e7d4      	b.n	800c3f0 <__hexnan+0xd4>
 800c446:	3f04      	subs	r7, #4
 800c448:	e7d2      	b.n	800c3f0 <__hexnan+0xd4>
 800c44a:	2004      	movs	r0, #4
 800c44c:	b007      	add	sp, #28
 800c44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c452 <__ascii_mbtowc>:
 800c452:	b082      	sub	sp, #8
 800c454:	b901      	cbnz	r1, 800c458 <__ascii_mbtowc+0x6>
 800c456:	a901      	add	r1, sp, #4
 800c458:	b142      	cbz	r2, 800c46c <__ascii_mbtowc+0x1a>
 800c45a:	b14b      	cbz	r3, 800c470 <__ascii_mbtowc+0x1e>
 800c45c:	7813      	ldrb	r3, [r2, #0]
 800c45e:	600b      	str	r3, [r1, #0]
 800c460:	7812      	ldrb	r2, [r2, #0]
 800c462:	1e10      	subs	r0, r2, #0
 800c464:	bf18      	it	ne
 800c466:	2001      	movne	r0, #1
 800c468:	b002      	add	sp, #8
 800c46a:	4770      	bx	lr
 800c46c:	4610      	mov	r0, r2
 800c46e:	e7fb      	b.n	800c468 <__ascii_mbtowc+0x16>
 800c470:	f06f 0001 	mvn.w	r0, #1
 800c474:	e7f8      	b.n	800c468 <__ascii_mbtowc+0x16>
	...

0800c478 <_Balloc>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	69c6      	ldr	r6, [r0, #28]
 800c47c:	4604      	mov	r4, r0
 800c47e:	460d      	mov	r5, r1
 800c480:	b976      	cbnz	r6, 800c4a0 <_Balloc+0x28>
 800c482:	2010      	movs	r0, #16
 800c484:	f7fe fb30 	bl	800aae8 <malloc>
 800c488:	4602      	mov	r2, r0
 800c48a:	61e0      	str	r0, [r4, #28]
 800c48c:	b920      	cbnz	r0, 800c498 <_Balloc+0x20>
 800c48e:	4b18      	ldr	r3, [pc, #96]	; (800c4f0 <_Balloc+0x78>)
 800c490:	4818      	ldr	r0, [pc, #96]	; (800c4f4 <_Balloc+0x7c>)
 800c492:	216b      	movs	r1, #107	; 0x6b
 800c494:	f7ff fc1c 	bl	800bcd0 <__assert_func>
 800c498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c49c:	6006      	str	r6, [r0, #0]
 800c49e:	60c6      	str	r6, [r0, #12]
 800c4a0:	69e6      	ldr	r6, [r4, #28]
 800c4a2:	68f3      	ldr	r3, [r6, #12]
 800c4a4:	b183      	cbz	r3, 800c4c8 <_Balloc+0x50>
 800c4a6:	69e3      	ldr	r3, [r4, #28]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ae:	b9b8      	cbnz	r0, 800c4e0 <_Balloc+0x68>
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c4b6:	1d72      	adds	r2, r6, #5
 800c4b8:	0092      	lsls	r2, r2, #2
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f000 fd5d 	bl	800cf7a <_calloc_r>
 800c4c0:	b160      	cbz	r0, 800c4dc <_Balloc+0x64>
 800c4c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4c6:	e00e      	b.n	800c4e6 <_Balloc+0x6e>
 800c4c8:	2221      	movs	r2, #33	; 0x21
 800c4ca:	2104      	movs	r1, #4
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f000 fd54 	bl	800cf7a <_calloc_r>
 800c4d2:	69e3      	ldr	r3, [r4, #28]
 800c4d4:	60f0      	str	r0, [r6, #12]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1e4      	bne.n	800c4a6 <_Balloc+0x2e>
 800c4dc:	2000      	movs	r0, #0
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	6802      	ldr	r2, [r0, #0]
 800c4e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4ec:	e7f7      	b.n	800c4de <_Balloc+0x66>
 800c4ee:	bf00      	nop
 800c4f0:	0800d958 	.word	0x0800d958
 800c4f4:	0800da7e 	.word	0x0800da7e

0800c4f8 <_Bfree>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	69c6      	ldr	r6, [r0, #28]
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	460c      	mov	r4, r1
 800c500:	b976      	cbnz	r6, 800c520 <_Bfree+0x28>
 800c502:	2010      	movs	r0, #16
 800c504:	f7fe faf0 	bl	800aae8 <malloc>
 800c508:	4602      	mov	r2, r0
 800c50a:	61e8      	str	r0, [r5, #28]
 800c50c:	b920      	cbnz	r0, 800c518 <_Bfree+0x20>
 800c50e:	4b09      	ldr	r3, [pc, #36]	; (800c534 <_Bfree+0x3c>)
 800c510:	4809      	ldr	r0, [pc, #36]	; (800c538 <_Bfree+0x40>)
 800c512:	218f      	movs	r1, #143	; 0x8f
 800c514:	f7ff fbdc 	bl	800bcd0 <__assert_func>
 800c518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c51c:	6006      	str	r6, [r0, #0]
 800c51e:	60c6      	str	r6, [r0, #12]
 800c520:	b13c      	cbz	r4, 800c532 <_Bfree+0x3a>
 800c522:	69eb      	ldr	r3, [r5, #28]
 800c524:	6862      	ldr	r2, [r4, #4]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c52c:	6021      	str	r1, [r4, #0]
 800c52e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	0800d958 	.word	0x0800d958
 800c538:	0800da7e 	.word	0x0800da7e

0800c53c <__multadd>:
 800c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c540:	690d      	ldr	r5, [r1, #16]
 800c542:	4607      	mov	r7, r0
 800c544:	460c      	mov	r4, r1
 800c546:	461e      	mov	r6, r3
 800c548:	f101 0c14 	add.w	ip, r1, #20
 800c54c:	2000      	movs	r0, #0
 800c54e:	f8dc 3000 	ldr.w	r3, [ip]
 800c552:	b299      	uxth	r1, r3
 800c554:	fb02 6101 	mla	r1, r2, r1, r6
 800c558:	0c1e      	lsrs	r6, r3, #16
 800c55a:	0c0b      	lsrs	r3, r1, #16
 800c55c:	fb02 3306 	mla	r3, r2, r6, r3
 800c560:	b289      	uxth	r1, r1
 800c562:	3001      	adds	r0, #1
 800c564:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c568:	4285      	cmp	r5, r0
 800c56a:	f84c 1b04 	str.w	r1, [ip], #4
 800c56e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c572:	dcec      	bgt.n	800c54e <__multadd+0x12>
 800c574:	b30e      	cbz	r6, 800c5ba <__multadd+0x7e>
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	42ab      	cmp	r3, r5
 800c57a:	dc19      	bgt.n	800c5b0 <__multadd+0x74>
 800c57c:	6861      	ldr	r1, [r4, #4]
 800c57e:	4638      	mov	r0, r7
 800c580:	3101      	adds	r1, #1
 800c582:	f7ff ff79 	bl	800c478 <_Balloc>
 800c586:	4680      	mov	r8, r0
 800c588:	b928      	cbnz	r0, 800c596 <__multadd+0x5a>
 800c58a:	4602      	mov	r2, r0
 800c58c:	4b0c      	ldr	r3, [pc, #48]	; (800c5c0 <__multadd+0x84>)
 800c58e:	480d      	ldr	r0, [pc, #52]	; (800c5c4 <__multadd+0x88>)
 800c590:	21ba      	movs	r1, #186	; 0xba
 800c592:	f7ff fb9d 	bl	800bcd0 <__assert_func>
 800c596:	6922      	ldr	r2, [r4, #16]
 800c598:	3202      	adds	r2, #2
 800c59a:	f104 010c 	add.w	r1, r4, #12
 800c59e:	0092      	lsls	r2, r2, #2
 800c5a0:	300c      	adds	r0, #12
 800c5a2:	f7ff fb7c 	bl	800bc9e <memcpy>
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff ffa5 	bl	800c4f8 <_Bfree>
 800c5ae:	4644      	mov	r4, r8
 800c5b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5b4:	3501      	adds	r5, #1
 800c5b6:	615e      	str	r6, [r3, #20]
 800c5b8:	6125      	str	r5, [r4, #16]
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c0:	0800da0d 	.word	0x0800da0d
 800c5c4:	0800da7e 	.word	0x0800da7e

0800c5c8 <__s2b>:
 800c5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	4615      	mov	r5, r2
 800c5d0:	461f      	mov	r7, r3
 800c5d2:	2209      	movs	r2, #9
 800c5d4:	3308      	adds	r3, #8
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5dc:	2100      	movs	r1, #0
 800c5de:	2201      	movs	r2, #1
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	db09      	blt.n	800c5f8 <__s2b+0x30>
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f7ff ff47 	bl	800c478 <_Balloc>
 800c5ea:	b940      	cbnz	r0, 800c5fe <__s2b+0x36>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	4b19      	ldr	r3, [pc, #100]	; (800c654 <__s2b+0x8c>)
 800c5f0:	4819      	ldr	r0, [pc, #100]	; (800c658 <__s2b+0x90>)
 800c5f2:	21d3      	movs	r1, #211	; 0xd3
 800c5f4:	f7ff fb6c 	bl	800bcd0 <__assert_func>
 800c5f8:	0052      	lsls	r2, r2, #1
 800c5fa:	3101      	adds	r1, #1
 800c5fc:	e7f0      	b.n	800c5e0 <__s2b+0x18>
 800c5fe:	9b08      	ldr	r3, [sp, #32]
 800c600:	6143      	str	r3, [r0, #20]
 800c602:	2d09      	cmp	r5, #9
 800c604:	f04f 0301 	mov.w	r3, #1
 800c608:	6103      	str	r3, [r0, #16]
 800c60a:	dd16      	ble.n	800c63a <__s2b+0x72>
 800c60c:	f104 0909 	add.w	r9, r4, #9
 800c610:	46c8      	mov	r8, r9
 800c612:	442c      	add	r4, r5
 800c614:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c618:	4601      	mov	r1, r0
 800c61a:	3b30      	subs	r3, #48	; 0x30
 800c61c:	220a      	movs	r2, #10
 800c61e:	4630      	mov	r0, r6
 800c620:	f7ff ff8c 	bl	800c53c <__multadd>
 800c624:	45a0      	cmp	r8, r4
 800c626:	d1f5      	bne.n	800c614 <__s2b+0x4c>
 800c628:	f1a5 0408 	sub.w	r4, r5, #8
 800c62c:	444c      	add	r4, r9
 800c62e:	1b2d      	subs	r5, r5, r4
 800c630:	1963      	adds	r3, r4, r5
 800c632:	42bb      	cmp	r3, r7
 800c634:	db04      	blt.n	800c640 <__s2b+0x78>
 800c636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c63a:	340a      	adds	r4, #10
 800c63c:	2509      	movs	r5, #9
 800c63e:	e7f6      	b.n	800c62e <__s2b+0x66>
 800c640:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c644:	4601      	mov	r1, r0
 800c646:	3b30      	subs	r3, #48	; 0x30
 800c648:	220a      	movs	r2, #10
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7ff ff76 	bl	800c53c <__multadd>
 800c650:	e7ee      	b.n	800c630 <__s2b+0x68>
 800c652:	bf00      	nop
 800c654:	0800da0d 	.word	0x0800da0d
 800c658:	0800da7e 	.word	0x0800da7e

0800c65c <__hi0bits>:
 800c65c:	0c03      	lsrs	r3, r0, #16
 800c65e:	041b      	lsls	r3, r3, #16
 800c660:	b9d3      	cbnz	r3, 800c698 <__hi0bits+0x3c>
 800c662:	0400      	lsls	r0, r0, #16
 800c664:	2310      	movs	r3, #16
 800c666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c66a:	bf04      	itt	eq
 800c66c:	0200      	lsleq	r0, r0, #8
 800c66e:	3308      	addeq	r3, #8
 800c670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c674:	bf04      	itt	eq
 800c676:	0100      	lsleq	r0, r0, #4
 800c678:	3304      	addeq	r3, #4
 800c67a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c67e:	bf04      	itt	eq
 800c680:	0080      	lsleq	r0, r0, #2
 800c682:	3302      	addeq	r3, #2
 800c684:	2800      	cmp	r0, #0
 800c686:	db05      	blt.n	800c694 <__hi0bits+0x38>
 800c688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c68c:	f103 0301 	add.w	r3, r3, #1
 800c690:	bf08      	it	eq
 800c692:	2320      	moveq	r3, #32
 800c694:	4618      	mov	r0, r3
 800c696:	4770      	bx	lr
 800c698:	2300      	movs	r3, #0
 800c69a:	e7e4      	b.n	800c666 <__hi0bits+0xa>

0800c69c <__lo0bits>:
 800c69c:	6803      	ldr	r3, [r0, #0]
 800c69e:	f013 0207 	ands.w	r2, r3, #7
 800c6a2:	d00c      	beq.n	800c6be <__lo0bits+0x22>
 800c6a4:	07d9      	lsls	r1, r3, #31
 800c6a6:	d422      	bmi.n	800c6ee <__lo0bits+0x52>
 800c6a8:	079a      	lsls	r2, r3, #30
 800c6aa:	bf49      	itett	mi
 800c6ac:	085b      	lsrmi	r3, r3, #1
 800c6ae:	089b      	lsrpl	r3, r3, #2
 800c6b0:	6003      	strmi	r3, [r0, #0]
 800c6b2:	2201      	movmi	r2, #1
 800c6b4:	bf5c      	itt	pl
 800c6b6:	6003      	strpl	r3, [r0, #0]
 800c6b8:	2202      	movpl	r2, #2
 800c6ba:	4610      	mov	r0, r2
 800c6bc:	4770      	bx	lr
 800c6be:	b299      	uxth	r1, r3
 800c6c0:	b909      	cbnz	r1, 800c6c6 <__lo0bits+0x2a>
 800c6c2:	0c1b      	lsrs	r3, r3, #16
 800c6c4:	2210      	movs	r2, #16
 800c6c6:	b2d9      	uxtb	r1, r3
 800c6c8:	b909      	cbnz	r1, 800c6ce <__lo0bits+0x32>
 800c6ca:	3208      	adds	r2, #8
 800c6cc:	0a1b      	lsrs	r3, r3, #8
 800c6ce:	0719      	lsls	r1, r3, #28
 800c6d0:	bf04      	itt	eq
 800c6d2:	091b      	lsreq	r3, r3, #4
 800c6d4:	3204      	addeq	r2, #4
 800c6d6:	0799      	lsls	r1, r3, #30
 800c6d8:	bf04      	itt	eq
 800c6da:	089b      	lsreq	r3, r3, #2
 800c6dc:	3202      	addeq	r2, #2
 800c6de:	07d9      	lsls	r1, r3, #31
 800c6e0:	d403      	bmi.n	800c6ea <__lo0bits+0x4e>
 800c6e2:	085b      	lsrs	r3, r3, #1
 800c6e4:	f102 0201 	add.w	r2, r2, #1
 800c6e8:	d003      	beq.n	800c6f2 <__lo0bits+0x56>
 800c6ea:	6003      	str	r3, [r0, #0]
 800c6ec:	e7e5      	b.n	800c6ba <__lo0bits+0x1e>
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	e7e3      	b.n	800c6ba <__lo0bits+0x1e>
 800c6f2:	2220      	movs	r2, #32
 800c6f4:	e7e1      	b.n	800c6ba <__lo0bits+0x1e>
	...

0800c6f8 <__i2b>:
 800c6f8:	b510      	push	{r4, lr}
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	f7ff febb 	bl	800c478 <_Balloc>
 800c702:	4602      	mov	r2, r0
 800c704:	b928      	cbnz	r0, 800c712 <__i2b+0x1a>
 800c706:	4b05      	ldr	r3, [pc, #20]	; (800c71c <__i2b+0x24>)
 800c708:	4805      	ldr	r0, [pc, #20]	; (800c720 <__i2b+0x28>)
 800c70a:	f240 1145 	movw	r1, #325	; 0x145
 800c70e:	f7ff fadf 	bl	800bcd0 <__assert_func>
 800c712:	2301      	movs	r3, #1
 800c714:	6144      	str	r4, [r0, #20]
 800c716:	6103      	str	r3, [r0, #16]
 800c718:	bd10      	pop	{r4, pc}
 800c71a:	bf00      	nop
 800c71c:	0800da0d 	.word	0x0800da0d
 800c720:	0800da7e 	.word	0x0800da7e

0800c724 <__multiply>:
 800c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	4691      	mov	r9, r2
 800c72a:	690a      	ldr	r2, [r1, #16]
 800c72c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c730:	429a      	cmp	r2, r3
 800c732:	bfb8      	it	lt
 800c734:	460b      	movlt	r3, r1
 800c736:	460c      	mov	r4, r1
 800c738:	bfbc      	itt	lt
 800c73a:	464c      	movlt	r4, r9
 800c73c:	4699      	movlt	r9, r3
 800c73e:	6927      	ldr	r7, [r4, #16]
 800c740:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c744:	68a3      	ldr	r3, [r4, #8]
 800c746:	6861      	ldr	r1, [r4, #4]
 800c748:	eb07 060a 	add.w	r6, r7, sl
 800c74c:	42b3      	cmp	r3, r6
 800c74e:	b085      	sub	sp, #20
 800c750:	bfb8      	it	lt
 800c752:	3101      	addlt	r1, #1
 800c754:	f7ff fe90 	bl	800c478 <_Balloc>
 800c758:	b930      	cbnz	r0, 800c768 <__multiply+0x44>
 800c75a:	4602      	mov	r2, r0
 800c75c:	4b44      	ldr	r3, [pc, #272]	; (800c870 <__multiply+0x14c>)
 800c75e:	4845      	ldr	r0, [pc, #276]	; (800c874 <__multiply+0x150>)
 800c760:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c764:	f7ff fab4 	bl	800bcd0 <__assert_func>
 800c768:	f100 0514 	add.w	r5, r0, #20
 800c76c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c770:	462b      	mov	r3, r5
 800c772:	2200      	movs	r2, #0
 800c774:	4543      	cmp	r3, r8
 800c776:	d321      	bcc.n	800c7bc <__multiply+0x98>
 800c778:	f104 0314 	add.w	r3, r4, #20
 800c77c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c780:	f109 0314 	add.w	r3, r9, #20
 800c784:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c788:	9202      	str	r2, [sp, #8]
 800c78a:	1b3a      	subs	r2, r7, r4
 800c78c:	3a15      	subs	r2, #21
 800c78e:	f022 0203 	bic.w	r2, r2, #3
 800c792:	3204      	adds	r2, #4
 800c794:	f104 0115 	add.w	r1, r4, #21
 800c798:	428f      	cmp	r7, r1
 800c79a:	bf38      	it	cc
 800c79c:	2204      	movcc	r2, #4
 800c79e:	9201      	str	r2, [sp, #4]
 800c7a0:	9a02      	ldr	r2, [sp, #8]
 800c7a2:	9303      	str	r3, [sp, #12]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d80c      	bhi.n	800c7c2 <__multiply+0x9e>
 800c7a8:	2e00      	cmp	r6, #0
 800c7aa:	dd03      	ble.n	800c7b4 <__multiply+0x90>
 800c7ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d05b      	beq.n	800c86c <__multiply+0x148>
 800c7b4:	6106      	str	r6, [r0, #16]
 800c7b6:	b005      	add	sp, #20
 800c7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7bc:	f843 2b04 	str.w	r2, [r3], #4
 800c7c0:	e7d8      	b.n	800c774 <__multiply+0x50>
 800c7c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7c6:	f1ba 0f00 	cmp.w	sl, #0
 800c7ca:	d024      	beq.n	800c816 <__multiply+0xf2>
 800c7cc:	f104 0e14 	add.w	lr, r4, #20
 800c7d0:	46a9      	mov	r9, r5
 800c7d2:	f04f 0c00 	mov.w	ip, #0
 800c7d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7da:	f8d9 1000 	ldr.w	r1, [r9]
 800c7de:	fa1f fb82 	uxth.w	fp, r2
 800c7e2:	b289      	uxth	r1, r1
 800c7e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7ec:	f8d9 2000 	ldr.w	r2, [r9]
 800c7f0:	4461      	add	r1, ip
 800c7f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7fe:	b289      	uxth	r1, r1
 800c800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c804:	4577      	cmp	r7, lr
 800c806:	f849 1b04 	str.w	r1, [r9], #4
 800c80a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c80e:	d8e2      	bhi.n	800c7d6 <__multiply+0xb2>
 800c810:	9a01      	ldr	r2, [sp, #4]
 800c812:	f845 c002 	str.w	ip, [r5, r2]
 800c816:	9a03      	ldr	r2, [sp, #12]
 800c818:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c81c:	3304      	adds	r3, #4
 800c81e:	f1b9 0f00 	cmp.w	r9, #0
 800c822:	d021      	beq.n	800c868 <__multiply+0x144>
 800c824:	6829      	ldr	r1, [r5, #0]
 800c826:	f104 0c14 	add.w	ip, r4, #20
 800c82a:	46ae      	mov	lr, r5
 800c82c:	f04f 0a00 	mov.w	sl, #0
 800c830:	f8bc b000 	ldrh.w	fp, [ip]
 800c834:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c838:	fb09 220b 	mla	r2, r9, fp, r2
 800c83c:	4452      	add	r2, sl
 800c83e:	b289      	uxth	r1, r1
 800c840:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c844:	f84e 1b04 	str.w	r1, [lr], #4
 800c848:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c84c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c850:	f8be 1000 	ldrh.w	r1, [lr]
 800c854:	fb09 110a 	mla	r1, r9, sl, r1
 800c858:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c85c:	4567      	cmp	r7, ip
 800c85e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c862:	d8e5      	bhi.n	800c830 <__multiply+0x10c>
 800c864:	9a01      	ldr	r2, [sp, #4]
 800c866:	50a9      	str	r1, [r5, r2]
 800c868:	3504      	adds	r5, #4
 800c86a:	e799      	b.n	800c7a0 <__multiply+0x7c>
 800c86c:	3e01      	subs	r6, #1
 800c86e:	e79b      	b.n	800c7a8 <__multiply+0x84>
 800c870:	0800da0d 	.word	0x0800da0d
 800c874:	0800da7e 	.word	0x0800da7e

0800c878 <__pow5mult>:
 800c878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c87c:	4615      	mov	r5, r2
 800c87e:	f012 0203 	ands.w	r2, r2, #3
 800c882:	4606      	mov	r6, r0
 800c884:	460f      	mov	r7, r1
 800c886:	d007      	beq.n	800c898 <__pow5mult+0x20>
 800c888:	4c25      	ldr	r4, [pc, #148]	; (800c920 <__pow5mult+0xa8>)
 800c88a:	3a01      	subs	r2, #1
 800c88c:	2300      	movs	r3, #0
 800c88e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c892:	f7ff fe53 	bl	800c53c <__multadd>
 800c896:	4607      	mov	r7, r0
 800c898:	10ad      	asrs	r5, r5, #2
 800c89a:	d03d      	beq.n	800c918 <__pow5mult+0xa0>
 800c89c:	69f4      	ldr	r4, [r6, #28]
 800c89e:	b97c      	cbnz	r4, 800c8c0 <__pow5mult+0x48>
 800c8a0:	2010      	movs	r0, #16
 800c8a2:	f7fe f921 	bl	800aae8 <malloc>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	61f0      	str	r0, [r6, #28]
 800c8aa:	b928      	cbnz	r0, 800c8b8 <__pow5mult+0x40>
 800c8ac:	4b1d      	ldr	r3, [pc, #116]	; (800c924 <__pow5mult+0xac>)
 800c8ae:	481e      	ldr	r0, [pc, #120]	; (800c928 <__pow5mult+0xb0>)
 800c8b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c8b4:	f7ff fa0c 	bl	800bcd0 <__assert_func>
 800c8b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8bc:	6004      	str	r4, [r0, #0]
 800c8be:	60c4      	str	r4, [r0, #12]
 800c8c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c8c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8c8:	b94c      	cbnz	r4, 800c8de <__pow5mult+0x66>
 800c8ca:	f240 2171 	movw	r1, #625	; 0x271
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7ff ff12 	bl	800c6f8 <__i2b>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8da:	4604      	mov	r4, r0
 800c8dc:	6003      	str	r3, [r0, #0]
 800c8de:	f04f 0900 	mov.w	r9, #0
 800c8e2:	07eb      	lsls	r3, r5, #31
 800c8e4:	d50a      	bpl.n	800c8fc <__pow5mult+0x84>
 800c8e6:	4639      	mov	r1, r7
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7ff ff1a 	bl	800c724 <__multiply>
 800c8f0:	4639      	mov	r1, r7
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7ff fdff 	bl	800c4f8 <_Bfree>
 800c8fa:	4647      	mov	r7, r8
 800c8fc:	106d      	asrs	r5, r5, #1
 800c8fe:	d00b      	beq.n	800c918 <__pow5mult+0xa0>
 800c900:	6820      	ldr	r0, [r4, #0]
 800c902:	b938      	cbnz	r0, 800c914 <__pow5mult+0x9c>
 800c904:	4622      	mov	r2, r4
 800c906:	4621      	mov	r1, r4
 800c908:	4630      	mov	r0, r6
 800c90a:	f7ff ff0b 	bl	800c724 <__multiply>
 800c90e:	6020      	str	r0, [r4, #0]
 800c910:	f8c0 9000 	str.w	r9, [r0]
 800c914:	4604      	mov	r4, r0
 800c916:	e7e4      	b.n	800c8e2 <__pow5mult+0x6a>
 800c918:	4638      	mov	r0, r7
 800c91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91e:	bf00      	nop
 800c920:	0800dbc8 	.word	0x0800dbc8
 800c924:	0800d958 	.word	0x0800d958
 800c928:	0800da7e 	.word	0x0800da7e

0800c92c <__lshift>:
 800c92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c930:	460c      	mov	r4, r1
 800c932:	6849      	ldr	r1, [r1, #4]
 800c934:	6923      	ldr	r3, [r4, #16]
 800c936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c93a:	68a3      	ldr	r3, [r4, #8]
 800c93c:	4607      	mov	r7, r0
 800c93e:	4691      	mov	r9, r2
 800c940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c944:	f108 0601 	add.w	r6, r8, #1
 800c948:	42b3      	cmp	r3, r6
 800c94a:	db0b      	blt.n	800c964 <__lshift+0x38>
 800c94c:	4638      	mov	r0, r7
 800c94e:	f7ff fd93 	bl	800c478 <_Balloc>
 800c952:	4605      	mov	r5, r0
 800c954:	b948      	cbnz	r0, 800c96a <__lshift+0x3e>
 800c956:	4602      	mov	r2, r0
 800c958:	4b28      	ldr	r3, [pc, #160]	; (800c9fc <__lshift+0xd0>)
 800c95a:	4829      	ldr	r0, [pc, #164]	; (800ca00 <__lshift+0xd4>)
 800c95c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c960:	f7ff f9b6 	bl	800bcd0 <__assert_func>
 800c964:	3101      	adds	r1, #1
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	e7ee      	b.n	800c948 <__lshift+0x1c>
 800c96a:	2300      	movs	r3, #0
 800c96c:	f100 0114 	add.w	r1, r0, #20
 800c970:	f100 0210 	add.w	r2, r0, #16
 800c974:	4618      	mov	r0, r3
 800c976:	4553      	cmp	r3, sl
 800c978:	db33      	blt.n	800c9e2 <__lshift+0xb6>
 800c97a:	6920      	ldr	r0, [r4, #16]
 800c97c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c980:	f104 0314 	add.w	r3, r4, #20
 800c984:	f019 091f 	ands.w	r9, r9, #31
 800c988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c98c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c990:	d02b      	beq.n	800c9ea <__lshift+0xbe>
 800c992:	f1c9 0e20 	rsb	lr, r9, #32
 800c996:	468a      	mov	sl, r1
 800c998:	2200      	movs	r2, #0
 800c99a:	6818      	ldr	r0, [r3, #0]
 800c99c:	fa00 f009 	lsl.w	r0, r0, r9
 800c9a0:	4310      	orrs	r0, r2
 800c9a2:	f84a 0b04 	str.w	r0, [sl], #4
 800c9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9aa:	459c      	cmp	ip, r3
 800c9ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9b0:	d8f3      	bhi.n	800c99a <__lshift+0x6e>
 800c9b2:	ebac 0304 	sub.w	r3, ip, r4
 800c9b6:	3b15      	subs	r3, #21
 800c9b8:	f023 0303 	bic.w	r3, r3, #3
 800c9bc:	3304      	adds	r3, #4
 800c9be:	f104 0015 	add.w	r0, r4, #21
 800c9c2:	4584      	cmp	ip, r0
 800c9c4:	bf38      	it	cc
 800c9c6:	2304      	movcc	r3, #4
 800c9c8:	50ca      	str	r2, [r1, r3]
 800c9ca:	b10a      	cbz	r2, 800c9d0 <__lshift+0xa4>
 800c9cc:	f108 0602 	add.w	r6, r8, #2
 800c9d0:	3e01      	subs	r6, #1
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	612e      	str	r6, [r5, #16]
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	f7ff fd8e 	bl	800c4f8 <_Bfree>
 800c9dc:	4628      	mov	r0, r5
 800c9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	e7c5      	b.n	800c976 <__lshift+0x4a>
 800c9ea:	3904      	subs	r1, #4
 800c9ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9f4:	459c      	cmp	ip, r3
 800c9f6:	d8f9      	bhi.n	800c9ec <__lshift+0xc0>
 800c9f8:	e7ea      	b.n	800c9d0 <__lshift+0xa4>
 800c9fa:	bf00      	nop
 800c9fc:	0800da0d 	.word	0x0800da0d
 800ca00:	0800da7e 	.word	0x0800da7e

0800ca04 <__mcmp>:
 800ca04:	b530      	push	{r4, r5, lr}
 800ca06:	6902      	ldr	r2, [r0, #16]
 800ca08:	690c      	ldr	r4, [r1, #16]
 800ca0a:	1b12      	subs	r2, r2, r4
 800ca0c:	d10e      	bne.n	800ca2c <__mcmp+0x28>
 800ca0e:	f100 0314 	add.w	r3, r0, #20
 800ca12:	3114      	adds	r1, #20
 800ca14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca24:	42a5      	cmp	r5, r4
 800ca26:	d003      	beq.n	800ca30 <__mcmp+0x2c>
 800ca28:	d305      	bcc.n	800ca36 <__mcmp+0x32>
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	bd30      	pop	{r4, r5, pc}
 800ca30:	4283      	cmp	r3, r0
 800ca32:	d3f3      	bcc.n	800ca1c <__mcmp+0x18>
 800ca34:	e7fa      	b.n	800ca2c <__mcmp+0x28>
 800ca36:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3a:	e7f7      	b.n	800ca2c <__mcmp+0x28>

0800ca3c <__mdiff>:
 800ca3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca40:	460c      	mov	r4, r1
 800ca42:	4606      	mov	r6, r0
 800ca44:	4611      	mov	r1, r2
 800ca46:	4620      	mov	r0, r4
 800ca48:	4690      	mov	r8, r2
 800ca4a:	f7ff ffdb 	bl	800ca04 <__mcmp>
 800ca4e:	1e05      	subs	r5, r0, #0
 800ca50:	d110      	bne.n	800ca74 <__mdiff+0x38>
 800ca52:	4629      	mov	r1, r5
 800ca54:	4630      	mov	r0, r6
 800ca56:	f7ff fd0f 	bl	800c478 <_Balloc>
 800ca5a:	b930      	cbnz	r0, 800ca6a <__mdiff+0x2e>
 800ca5c:	4b3a      	ldr	r3, [pc, #232]	; (800cb48 <__mdiff+0x10c>)
 800ca5e:	4602      	mov	r2, r0
 800ca60:	f240 2137 	movw	r1, #567	; 0x237
 800ca64:	4839      	ldr	r0, [pc, #228]	; (800cb4c <__mdiff+0x110>)
 800ca66:	f7ff f933 	bl	800bcd0 <__assert_func>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	bfa4      	itt	ge
 800ca76:	4643      	movge	r3, r8
 800ca78:	46a0      	movge	r8, r4
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca80:	bfa6      	itte	ge
 800ca82:	461c      	movge	r4, r3
 800ca84:	2500      	movge	r5, #0
 800ca86:	2501      	movlt	r5, #1
 800ca88:	f7ff fcf6 	bl	800c478 <_Balloc>
 800ca8c:	b920      	cbnz	r0, 800ca98 <__mdiff+0x5c>
 800ca8e:	4b2e      	ldr	r3, [pc, #184]	; (800cb48 <__mdiff+0x10c>)
 800ca90:	4602      	mov	r2, r0
 800ca92:	f240 2145 	movw	r1, #581	; 0x245
 800ca96:	e7e5      	b.n	800ca64 <__mdiff+0x28>
 800ca98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca9c:	6926      	ldr	r6, [r4, #16]
 800ca9e:	60c5      	str	r5, [r0, #12]
 800caa0:	f104 0914 	add.w	r9, r4, #20
 800caa4:	f108 0514 	add.w	r5, r8, #20
 800caa8:	f100 0e14 	add.w	lr, r0, #20
 800caac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cab0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cab4:	f108 0210 	add.w	r2, r8, #16
 800cab8:	46f2      	mov	sl, lr
 800caba:	2100      	movs	r1, #0
 800cabc:	f859 3b04 	ldr.w	r3, [r9], #4
 800cac0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cac4:	fa11 f88b 	uxtah	r8, r1, fp
 800cac8:	b299      	uxth	r1, r3
 800caca:	0c1b      	lsrs	r3, r3, #16
 800cacc:	eba8 0801 	sub.w	r8, r8, r1
 800cad0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cad4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cad8:	fa1f f888 	uxth.w	r8, r8
 800cadc:	1419      	asrs	r1, r3, #16
 800cade:	454e      	cmp	r6, r9
 800cae0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cae4:	f84a 3b04 	str.w	r3, [sl], #4
 800cae8:	d8e8      	bhi.n	800cabc <__mdiff+0x80>
 800caea:	1b33      	subs	r3, r6, r4
 800caec:	3b15      	subs	r3, #21
 800caee:	f023 0303 	bic.w	r3, r3, #3
 800caf2:	3304      	adds	r3, #4
 800caf4:	3415      	adds	r4, #21
 800caf6:	42a6      	cmp	r6, r4
 800caf8:	bf38      	it	cc
 800cafa:	2304      	movcc	r3, #4
 800cafc:	441d      	add	r5, r3
 800cafe:	4473      	add	r3, lr
 800cb00:	469e      	mov	lr, r3
 800cb02:	462e      	mov	r6, r5
 800cb04:	4566      	cmp	r6, ip
 800cb06:	d30e      	bcc.n	800cb26 <__mdiff+0xea>
 800cb08:	f10c 0203 	add.w	r2, ip, #3
 800cb0c:	1b52      	subs	r2, r2, r5
 800cb0e:	f022 0203 	bic.w	r2, r2, #3
 800cb12:	3d03      	subs	r5, #3
 800cb14:	45ac      	cmp	ip, r5
 800cb16:	bf38      	it	cc
 800cb18:	2200      	movcc	r2, #0
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb20:	b17a      	cbz	r2, 800cb42 <__mdiff+0x106>
 800cb22:	6107      	str	r7, [r0, #16]
 800cb24:	e7a4      	b.n	800ca70 <__mdiff+0x34>
 800cb26:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb2a:	fa11 f288 	uxtah	r2, r1, r8
 800cb2e:	1414      	asrs	r4, r2, #16
 800cb30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb34:	b292      	uxth	r2, r2
 800cb36:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb3a:	f84e 2b04 	str.w	r2, [lr], #4
 800cb3e:	1421      	asrs	r1, r4, #16
 800cb40:	e7e0      	b.n	800cb04 <__mdiff+0xc8>
 800cb42:	3f01      	subs	r7, #1
 800cb44:	e7ea      	b.n	800cb1c <__mdiff+0xe0>
 800cb46:	bf00      	nop
 800cb48:	0800da0d 	.word	0x0800da0d
 800cb4c:	0800da7e 	.word	0x0800da7e

0800cb50 <__ulp>:
 800cb50:	b082      	sub	sp, #8
 800cb52:	ed8d 0b00 	vstr	d0, [sp]
 800cb56:	9a01      	ldr	r2, [sp, #4]
 800cb58:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <__ulp+0x48>)
 800cb5a:	4013      	ands	r3, r2
 800cb5c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dc08      	bgt.n	800cb76 <__ulp+0x26>
 800cb64:	425b      	negs	r3, r3
 800cb66:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cb6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cb6e:	da04      	bge.n	800cb7a <__ulp+0x2a>
 800cb70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb74:	4113      	asrs	r3, r2
 800cb76:	2200      	movs	r2, #0
 800cb78:	e008      	b.n	800cb8c <__ulp+0x3c>
 800cb7a:	f1a2 0314 	sub.w	r3, r2, #20
 800cb7e:	2b1e      	cmp	r3, #30
 800cb80:	bfda      	itte	le
 800cb82:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cb86:	40da      	lsrle	r2, r3
 800cb88:	2201      	movgt	r2, #1
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4610      	mov	r0, r2
 800cb90:	ec41 0b10 	vmov	d0, r0, r1
 800cb94:	b002      	add	sp, #8
 800cb96:	4770      	bx	lr
 800cb98:	7ff00000 	.word	0x7ff00000

0800cb9c <__b2d>:
 800cb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba0:	6906      	ldr	r6, [r0, #16]
 800cba2:	f100 0814 	add.w	r8, r0, #20
 800cba6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cbaa:	1f37      	subs	r7, r6, #4
 800cbac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	f7ff fd53 	bl	800c65c <__hi0bits>
 800cbb6:	f1c0 0320 	rsb	r3, r0, #32
 800cbba:	280a      	cmp	r0, #10
 800cbbc:	600b      	str	r3, [r1, #0]
 800cbbe:	491b      	ldr	r1, [pc, #108]	; (800cc2c <__b2d+0x90>)
 800cbc0:	dc15      	bgt.n	800cbee <__b2d+0x52>
 800cbc2:	f1c0 0c0b 	rsb	ip, r0, #11
 800cbc6:	fa22 f30c 	lsr.w	r3, r2, ip
 800cbca:	45b8      	cmp	r8, r7
 800cbcc:	ea43 0501 	orr.w	r5, r3, r1
 800cbd0:	bf34      	ite	cc
 800cbd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cbd6:	2300      	movcs	r3, #0
 800cbd8:	3015      	adds	r0, #21
 800cbda:	fa02 f000 	lsl.w	r0, r2, r0
 800cbde:	fa23 f30c 	lsr.w	r3, r3, ip
 800cbe2:	4303      	orrs	r3, r0
 800cbe4:	461c      	mov	r4, r3
 800cbe6:	ec45 4b10 	vmov	d0, r4, r5
 800cbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbee:	45b8      	cmp	r8, r7
 800cbf0:	bf3a      	itte	cc
 800cbf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cbf6:	f1a6 0708 	subcc.w	r7, r6, #8
 800cbfa:	2300      	movcs	r3, #0
 800cbfc:	380b      	subs	r0, #11
 800cbfe:	d012      	beq.n	800cc26 <__b2d+0x8a>
 800cc00:	f1c0 0120 	rsb	r1, r0, #32
 800cc04:	fa23 f401 	lsr.w	r4, r3, r1
 800cc08:	4082      	lsls	r2, r0
 800cc0a:	4322      	orrs	r2, r4
 800cc0c:	4547      	cmp	r7, r8
 800cc0e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800cc12:	bf8c      	ite	hi
 800cc14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cc18:	2200      	movls	r2, #0
 800cc1a:	4083      	lsls	r3, r0
 800cc1c:	40ca      	lsrs	r2, r1
 800cc1e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cc22:	4313      	orrs	r3, r2
 800cc24:	e7de      	b.n	800cbe4 <__b2d+0x48>
 800cc26:	ea42 0501 	orr.w	r5, r2, r1
 800cc2a:	e7db      	b.n	800cbe4 <__b2d+0x48>
 800cc2c:	3ff00000 	.word	0x3ff00000

0800cc30 <__d2b>:
 800cc30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc34:	460f      	mov	r7, r1
 800cc36:	2101      	movs	r1, #1
 800cc38:	ec59 8b10 	vmov	r8, r9, d0
 800cc3c:	4616      	mov	r6, r2
 800cc3e:	f7ff fc1b 	bl	800c478 <_Balloc>
 800cc42:	4604      	mov	r4, r0
 800cc44:	b930      	cbnz	r0, 800cc54 <__d2b+0x24>
 800cc46:	4602      	mov	r2, r0
 800cc48:	4b24      	ldr	r3, [pc, #144]	; (800ccdc <__d2b+0xac>)
 800cc4a:	4825      	ldr	r0, [pc, #148]	; (800cce0 <__d2b+0xb0>)
 800cc4c:	f240 310f 	movw	r1, #783	; 0x30f
 800cc50:	f7ff f83e 	bl	800bcd0 <__assert_func>
 800cc54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc5c:	bb2d      	cbnz	r5, 800ccaa <__d2b+0x7a>
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	f1b8 0300 	subs.w	r3, r8, #0
 800cc64:	d026      	beq.n	800ccb4 <__d2b+0x84>
 800cc66:	4668      	mov	r0, sp
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	f7ff fd17 	bl	800c69c <__lo0bits>
 800cc6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc72:	b1e8      	cbz	r0, 800ccb0 <__d2b+0x80>
 800cc74:	f1c0 0320 	rsb	r3, r0, #32
 800cc78:	fa02 f303 	lsl.w	r3, r2, r3
 800cc7c:	430b      	orrs	r3, r1
 800cc7e:	40c2      	lsrs	r2, r0
 800cc80:	6163      	str	r3, [r4, #20]
 800cc82:	9201      	str	r2, [sp, #4]
 800cc84:	9b01      	ldr	r3, [sp, #4]
 800cc86:	61a3      	str	r3, [r4, #24]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bf14      	ite	ne
 800cc8c:	2202      	movne	r2, #2
 800cc8e:	2201      	moveq	r2, #1
 800cc90:	6122      	str	r2, [r4, #16]
 800cc92:	b1bd      	cbz	r5, 800ccc4 <__d2b+0x94>
 800cc94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc98:	4405      	add	r5, r0
 800cc9a:	603d      	str	r5, [r7, #0]
 800cc9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cca0:	6030      	str	r0, [r6, #0]
 800cca2:	4620      	mov	r0, r4
 800cca4:	b003      	add	sp, #12
 800cca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccae:	e7d6      	b.n	800cc5e <__d2b+0x2e>
 800ccb0:	6161      	str	r1, [r4, #20]
 800ccb2:	e7e7      	b.n	800cc84 <__d2b+0x54>
 800ccb4:	a801      	add	r0, sp, #4
 800ccb6:	f7ff fcf1 	bl	800c69c <__lo0bits>
 800ccba:	9b01      	ldr	r3, [sp, #4]
 800ccbc:	6163      	str	r3, [r4, #20]
 800ccbe:	3020      	adds	r0, #32
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	e7e5      	b.n	800cc90 <__d2b+0x60>
 800ccc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cccc:	6038      	str	r0, [r7, #0]
 800ccce:	6918      	ldr	r0, [r3, #16]
 800ccd0:	f7ff fcc4 	bl	800c65c <__hi0bits>
 800ccd4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccd8:	e7e2      	b.n	800cca0 <__d2b+0x70>
 800ccda:	bf00      	nop
 800ccdc:	0800da0d 	.word	0x0800da0d
 800cce0:	0800da7e 	.word	0x0800da7e

0800cce4 <__ratio>:
 800cce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	4688      	mov	r8, r1
 800ccea:	4669      	mov	r1, sp
 800ccec:	4681      	mov	r9, r0
 800ccee:	f7ff ff55 	bl	800cb9c <__b2d>
 800ccf2:	a901      	add	r1, sp, #4
 800ccf4:	4640      	mov	r0, r8
 800ccf6:	ec55 4b10 	vmov	r4, r5, d0
 800ccfa:	f7ff ff4f 	bl	800cb9c <__b2d>
 800ccfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd06:	eba3 0c02 	sub.w	ip, r3, r2
 800cd0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd0e:	1a9b      	subs	r3, r3, r2
 800cd10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd14:	ec51 0b10 	vmov	r0, r1, d0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	bfd6      	itet	le
 800cd1c:	460a      	movle	r2, r1
 800cd1e:	462a      	movgt	r2, r5
 800cd20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd24:	468b      	mov	fp, r1
 800cd26:	462f      	mov	r7, r5
 800cd28:	bfd4      	ite	le
 800cd2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd32:	4620      	mov	r0, r4
 800cd34:	ee10 2a10 	vmov	r2, s0
 800cd38:	465b      	mov	r3, fp
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	f7f3 fda6 	bl	800088c <__aeabi_ddiv>
 800cd40:	ec41 0b10 	vmov	d0, r0, r1
 800cd44:	b003      	add	sp, #12
 800cd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd4a <__copybits>:
 800cd4a:	3901      	subs	r1, #1
 800cd4c:	b570      	push	{r4, r5, r6, lr}
 800cd4e:	1149      	asrs	r1, r1, #5
 800cd50:	6914      	ldr	r4, [r2, #16]
 800cd52:	3101      	adds	r1, #1
 800cd54:	f102 0314 	add.w	r3, r2, #20
 800cd58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd60:	1f05      	subs	r5, r0, #4
 800cd62:	42a3      	cmp	r3, r4
 800cd64:	d30c      	bcc.n	800cd80 <__copybits+0x36>
 800cd66:	1aa3      	subs	r3, r4, r2
 800cd68:	3b11      	subs	r3, #17
 800cd6a:	f023 0303 	bic.w	r3, r3, #3
 800cd6e:	3211      	adds	r2, #17
 800cd70:	42a2      	cmp	r2, r4
 800cd72:	bf88      	it	hi
 800cd74:	2300      	movhi	r3, #0
 800cd76:	4418      	add	r0, r3
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4288      	cmp	r0, r1
 800cd7c:	d305      	bcc.n	800cd8a <__copybits+0x40>
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
 800cd80:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd84:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd88:	e7eb      	b.n	800cd62 <__copybits+0x18>
 800cd8a:	f840 3b04 	str.w	r3, [r0], #4
 800cd8e:	e7f4      	b.n	800cd7a <__copybits+0x30>

0800cd90 <__any_on>:
 800cd90:	f100 0214 	add.w	r2, r0, #20
 800cd94:	6900      	ldr	r0, [r0, #16]
 800cd96:	114b      	asrs	r3, r1, #5
 800cd98:	4298      	cmp	r0, r3
 800cd9a:	b510      	push	{r4, lr}
 800cd9c:	db11      	blt.n	800cdc2 <__any_on+0x32>
 800cd9e:	dd0a      	ble.n	800cdb6 <__any_on+0x26>
 800cda0:	f011 011f 	ands.w	r1, r1, #31
 800cda4:	d007      	beq.n	800cdb6 <__any_on+0x26>
 800cda6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cdaa:	fa24 f001 	lsr.w	r0, r4, r1
 800cdae:	fa00 f101 	lsl.w	r1, r0, r1
 800cdb2:	428c      	cmp	r4, r1
 800cdb4:	d10b      	bne.n	800cdce <__any_on+0x3e>
 800cdb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d803      	bhi.n	800cdc6 <__any_on+0x36>
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	bd10      	pop	{r4, pc}
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	e7f7      	b.n	800cdb6 <__any_on+0x26>
 800cdc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdca:	2900      	cmp	r1, #0
 800cdcc:	d0f5      	beq.n	800cdba <__any_on+0x2a>
 800cdce:	2001      	movs	r0, #1
 800cdd0:	e7f6      	b.n	800cdc0 <__any_on+0x30>

0800cdd2 <__ascii_wctomb>:
 800cdd2:	b149      	cbz	r1, 800cde8 <__ascii_wctomb+0x16>
 800cdd4:	2aff      	cmp	r2, #255	; 0xff
 800cdd6:	bf85      	ittet	hi
 800cdd8:	238a      	movhi	r3, #138	; 0x8a
 800cdda:	6003      	strhi	r3, [r0, #0]
 800cddc:	700a      	strbls	r2, [r1, #0]
 800cdde:	f04f 30ff 	movhi.w	r0, #4294967295
 800cde2:	bf98      	it	ls
 800cde4:	2001      	movls	r0, #1
 800cde6:	4770      	bx	lr
 800cde8:	4608      	mov	r0, r1
 800cdea:	4770      	bx	lr

0800cdec <__sflush_r>:
 800cdec:	898a      	ldrh	r2, [r1, #12]
 800cdee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	0710      	lsls	r0, r2, #28
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	d458      	bmi.n	800ceac <__sflush_r+0xc0>
 800cdfa:	684b      	ldr	r3, [r1, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dc05      	bgt.n	800ce0c <__sflush_r+0x20>
 800ce00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	dc02      	bgt.n	800ce0c <__sflush_r+0x20>
 800ce06:	2000      	movs	r0, #0
 800ce08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce0e:	2e00      	cmp	r6, #0
 800ce10:	d0f9      	beq.n	800ce06 <__sflush_r+0x1a>
 800ce12:	2300      	movs	r3, #0
 800ce14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce18:	682f      	ldr	r7, [r5, #0]
 800ce1a:	6a21      	ldr	r1, [r4, #32]
 800ce1c:	602b      	str	r3, [r5, #0]
 800ce1e:	d032      	beq.n	800ce86 <__sflush_r+0x9a>
 800ce20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce22:	89a3      	ldrh	r3, [r4, #12]
 800ce24:	075a      	lsls	r2, r3, #29
 800ce26:	d505      	bpl.n	800ce34 <__sflush_r+0x48>
 800ce28:	6863      	ldr	r3, [r4, #4]
 800ce2a:	1ac0      	subs	r0, r0, r3
 800ce2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce2e:	b10b      	cbz	r3, 800ce34 <__sflush_r+0x48>
 800ce30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce32:	1ac0      	subs	r0, r0, r3
 800ce34:	2300      	movs	r3, #0
 800ce36:	4602      	mov	r2, r0
 800ce38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce3a:	6a21      	ldr	r1, [r4, #32]
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	47b0      	blx	r6
 800ce40:	1c43      	adds	r3, r0, #1
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	d106      	bne.n	800ce54 <__sflush_r+0x68>
 800ce46:	6829      	ldr	r1, [r5, #0]
 800ce48:	291d      	cmp	r1, #29
 800ce4a:	d82b      	bhi.n	800cea4 <__sflush_r+0xb8>
 800ce4c:	4a29      	ldr	r2, [pc, #164]	; (800cef4 <__sflush_r+0x108>)
 800ce4e:	410a      	asrs	r2, r1
 800ce50:	07d6      	lsls	r6, r2, #31
 800ce52:	d427      	bmi.n	800cea4 <__sflush_r+0xb8>
 800ce54:	2200      	movs	r2, #0
 800ce56:	6062      	str	r2, [r4, #4]
 800ce58:	04d9      	lsls	r1, r3, #19
 800ce5a:	6922      	ldr	r2, [r4, #16]
 800ce5c:	6022      	str	r2, [r4, #0]
 800ce5e:	d504      	bpl.n	800ce6a <__sflush_r+0x7e>
 800ce60:	1c42      	adds	r2, r0, #1
 800ce62:	d101      	bne.n	800ce68 <__sflush_r+0x7c>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	b903      	cbnz	r3, 800ce6a <__sflush_r+0x7e>
 800ce68:	6560      	str	r0, [r4, #84]	; 0x54
 800ce6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce6c:	602f      	str	r7, [r5, #0]
 800ce6e:	2900      	cmp	r1, #0
 800ce70:	d0c9      	beq.n	800ce06 <__sflush_r+0x1a>
 800ce72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce76:	4299      	cmp	r1, r3
 800ce78:	d002      	beq.n	800ce80 <__sflush_r+0x94>
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	f7fe ff46 	bl	800bd0c <_free_r>
 800ce80:	2000      	movs	r0, #0
 800ce82:	6360      	str	r0, [r4, #52]	; 0x34
 800ce84:	e7c0      	b.n	800ce08 <__sflush_r+0x1c>
 800ce86:	2301      	movs	r3, #1
 800ce88:	4628      	mov	r0, r5
 800ce8a:	47b0      	blx	r6
 800ce8c:	1c41      	adds	r1, r0, #1
 800ce8e:	d1c8      	bne.n	800ce22 <__sflush_r+0x36>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0c5      	beq.n	800ce22 <__sflush_r+0x36>
 800ce96:	2b1d      	cmp	r3, #29
 800ce98:	d001      	beq.n	800ce9e <__sflush_r+0xb2>
 800ce9a:	2b16      	cmp	r3, #22
 800ce9c:	d101      	bne.n	800cea2 <__sflush_r+0xb6>
 800ce9e:	602f      	str	r7, [r5, #0]
 800cea0:	e7b1      	b.n	800ce06 <__sflush_r+0x1a>
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cea8:	81a3      	strh	r3, [r4, #12]
 800ceaa:	e7ad      	b.n	800ce08 <__sflush_r+0x1c>
 800ceac:	690f      	ldr	r7, [r1, #16]
 800ceae:	2f00      	cmp	r7, #0
 800ceb0:	d0a9      	beq.n	800ce06 <__sflush_r+0x1a>
 800ceb2:	0793      	lsls	r3, r2, #30
 800ceb4:	680e      	ldr	r6, [r1, #0]
 800ceb6:	bf08      	it	eq
 800ceb8:	694b      	ldreq	r3, [r1, #20]
 800ceba:	600f      	str	r7, [r1, #0]
 800cebc:	bf18      	it	ne
 800cebe:	2300      	movne	r3, #0
 800cec0:	eba6 0807 	sub.w	r8, r6, r7
 800cec4:	608b      	str	r3, [r1, #8]
 800cec6:	f1b8 0f00 	cmp.w	r8, #0
 800ceca:	dd9c      	ble.n	800ce06 <__sflush_r+0x1a>
 800cecc:	6a21      	ldr	r1, [r4, #32]
 800cece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ced0:	4643      	mov	r3, r8
 800ced2:	463a      	mov	r2, r7
 800ced4:	4628      	mov	r0, r5
 800ced6:	47b0      	blx	r6
 800ced8:	2800      	cmp	r0, #0
 800ceda:	dc06      	bgt.n	800ceea <__sflush_r+0xfe>
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	f04f 30ff 	mov.w	r0, #4294967295
 800cee8:	e78e      	b.n	800ce08 <__sflush_r+0x1c>
 800ceea:	4407      	add	r7, r0
 800ceec:	eba8 0800 	sub.w	r8, r8, r0
 800cef0:	e7e9      	b.n	800cec6 <__sflush_r+0xda>
 800cef2:	bf00      	nop
 800cef4:	dfbffffe 	.word	0xdfbffffe

0800cef8 <_fflush_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	690b      	ldr	r3, [r1, #16]
 800cefc:	4605      	mov	r5, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	b913      	cbnz	r3, 800cf08 <_fflush_r+0x10>
 800cf02:	2500      	movs	r5, #0
 800cf04:	4628      	mov	r0, r5
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	b118      	cbz	r0, 800cf12 <_fflush_r+0x1a>
 800cf0a:	6a03      	ldr	r3, [r0, #32]
 800cf0c:	b90b      	cbnz	r3, 800cf12 <_fflush_r+0x1a>
 800cf0e:	f7fe fd4b 	bl	800b9a8 <__sinit>
 800cf12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d0f3      	beq.n	800cf02 <_fflush_r+0xa>
 800cf1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf1c:	07d0      	lsls	r0, r2, #31
 800cf1e:	d404      	bmi.n	800cf2a <_fflush_r+0x32>
 800cf20:	0599      	lsls	r1, r3, #22
 800cf22:	d402      	bmi.n	800cf2a <_fflush_r+0x32>
 800cf24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf26:	f7fe feb0 	bl	800bc8a <__retarget_lock_acquire_recursive>
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	f7ff ff5d 	bl	800cdec <__sflush_r>
 800cf32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf34:	07da      	lsls	r2, r3, #31
 800cf36:	4605      	mov	r5, r0
 800cf38:	d4e4      	bmi.n	800cf04 <_fflush_r+0xc>
 800cf3a:	89a3      	ldrh	r3, [r4, #12]
 800cf3c:	059b      	lsls	r3, r3, #22
 800cf3e:	d4e1      	bmi.n	800cf04 <_fflush_r+0xc>
 800cf40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf42:	f7fe fea3 	bl	800bc8c <__retarget_lock_release_recursive>
 800cf46:	e7dd      	b.n	800cf04 <_fflush_r+0xc>

0800cf48 <fiprintf>:
 800cf48:	b40e      	push	{r1, r2, r3}
 800cf4a:	b503      	push	{r0, r1, lr}
 800cf4c:	4601      	mov	r1, r0
 800cf4e:	ab03      	add	r3, sp, #12
 800cf50:	4805      	ldr	r0, [pc, #20]	; (800cf68 <fiprintf+0x20>)
 800cf52:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf56:	6800      	ldr	r0, [r0, #0]
 800cf58:	9301      	str	r3, [sp, #4]
 800cf5a:	f000 f84d 	bl	800cff8 <_vfiprintf_r>
 800cf5e:	b002      	add	sp, #8
 800cf60:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf64:	b003      	add	sp, #12
 800cf66:	4770      	bx	lr
 800cf68:	200001ec 	.word	0x200001ec

0800cf6c <abort>:
 800cf6c:	b508      	push	{r3, lr}
 800cf6e:	2006      	movs	r0, #6
 800cf70:	f000 fbaa 	bl	800d6c8 <raise>
 800cf74:	2001      	movs	r0, #1
 800cf76:	f7f5 fc55 	bl	8002824 <_exit>

0800cf7a <_calloc_r>:
 800cf7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf7c:	fba1 2402 	umull	r2, r4, r1, r2
 800cf80:	b94c      	cbnz	r4, 800cf96 <_calloc_r+0x1c>
 800cf82:	4611      	mov	r1, r2
 800cf84:	9201      	str	r2, [sp, #4]
 800cf86:	f7fd fddf 	bl	800ab48 <_malloc_r>
 800cf8a:	9a01      	ldr	r2, [sp, #4]
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	b930      	cbnz	r0, 800cf9e <_calloc_r+0x24>
 800cf90:	4628      	mov	r0, r5
 800cf92:	b003      	add	sp, #12
 800cf94:	bd30      	pop	{r4, r5, pc}
 800cf96:	220c      	movs	r2, #12
 800cf98:	6002      	str	r2, [r0, #0]
 800cf9a:	2500      	movs	r5, #0
 800cf9c:	e7f8      	b.n	800cf90 <_calloc_r+0x16>
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	f7fe fd7b 	bl	800ba9a <memset>
 800cfa4:	e7f4      	b.n	800cf90 <_calloc_r+0x16>

0800cfa6 <__sfputc_r>:
 800cfa6:	6893      	ldr	r3, [r2, #8]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	b410      	push	{r4}
 800cfae:	6093      	str	r3, [r2, #8]
 800cfb0:	da08      	bge.n	800cfc4 <__sfputc_r+0x1e>
 800cfb2:	6994      	ldr	r4, [r2, #24]
 800cfb4:	42a3      	cmp	r3, r4
 800cfb6:	db01      	blt.n	800cfbc <__sfputc_r+0x16>
 800cfb8:	290a      	cmp	r1, #10
 800cfba:	d103      	bne.n	800cfc4 <__sfputc_r+0x1e>
 800cfbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfc0:	f000 bac4 	b.w	800d54c <__swbuf_r>
 800cfc4:	6813      	ldr	r3, [r2, #0]
 800cfc6:	1c58      	adds	r0, r3, #1
 800cfc8:	6010      	str	r0, [r2, #0]
 800cfca:	7019      	strb	r1, [r3, #0]
 800cfcc:	4608      	mov	r0, r1
 800cfce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <__sfputs_r>:
 800cfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	460f      	mov	r7, r1
 800cfda:	4614      	mov	r4, r2
 800cfdc:	18d5      	adds	r5, r2, r3
 800cfde:	42ac      	cmp	r4, r5
 800cfe0:	d101      	bne.n	800cfe6 <__sfputs_r+0x12>
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	e007      	b.n	800cff6 <__sfputs_r+0x22>
 800cfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfea:	463a      	mov	r2, r7
 800cfec:	4630      	mov	r0, r6
 800cfee:	f7ff ffda 	bl	800cfa6 <__sfputc_r>
 800cff2:	1c43      	adds	r3, r0, #1
 800cff4:	d1f3      	bne.n	800cfde <__sfputs_r+0xa>
 800cff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cff8 <_vfiprintf_r>:
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	460d      	mov	r5, r1
 800cffe:	b09d      	sub	sp, #116	; 0x74
 800d000:	4614      	mov	r4, r2
 800d002:	4698      	mov	r8, r3
 800d004:	4606      	mov	r6, r0
 800d006:	b118      	cbz	r0, 800d010 <_vfiprintf_r+0x18>
 800d008:	6a03      	ldr	r3, [r0, #32]
 800d00a:	b90b      	cbnz	r3, 800d010 <_vfiprintf_r+0x18>
 800d00c:	f7fe fccc 	bl	800b9a8 <__sinit>
 800d010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d012:	07d9      	lsls	r1, r3, #31
 800d014:	d405      	bmi.n	800d022 <_vfiprintf_r+0x2a>
 800d016:	89ab      	ldrh	r3, [r5, #12]
 800d018:	059a      	lsls	r2, r3, #22
 800d01a:	d402      	bmi.n	800d022 <_vfiprintf_r+0x2a>
 800d01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d01e:	f7fe fe34 	bl	800bc8a <__retarget_lock_acquire_recursive>
 800d022:	89ab      	ldrh	r3, [r5, #12]
 800d024:	071b      	lsls	r3, r3, #28
 800d026:	d501      	bpl.n	800d02c <_vfiprintf_r+0x34>
 800d028:	692b      	ldr	r3, [r5, #16]
 800d02a:	b99b      	cbnz	r3, 800d054 <_vfiprintf_r+0x5c>
 800d02c:	4629      	mov	r1, r5
 800d02e:	4630      	mov	r0, r6
 800d030:	f000 faca 	bl	800d5c8 <__swsetup_r>
 800d034:	b170      	cbz	r0, 800d054 <_vfiprintf_r+0x5c>
 800d036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d038:	07dc      	lsls	r4, r3, #31
 800d03a:	d504      	bpl.n	800d046 <_vfiprintf_r+0x4e>
 800d03c:	f04f 30ff 	mov.w	r0, #4294967295
 800d040:	b01d      	add	sp, #116	; 0x74
 800d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d046:	89ab      	ldrh	r3, [r5, #12]
 800d048:	0598      	lsls	r0, r3, #22
 800d04a:	d4f7      	bmi.n	800d03c <_vfiprintf_r+0x44>
 800d04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d04e:	f7fe fe1d 	bl	800bc8c <__retarget_lock_release_recursive>
 800d052:	e7f3      	b.n	800d03c <_vfiprintf_r+0x44>
 800d054:	2300      	movs	r3, #0
 800d056:	9309      	str	r3, [sp, #36]	; 0x24
 800d058:	2320      	movs	r3, #32
 800d05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d05e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d062:	2330      	movs	r3, #48	; 0x30
 800d064:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d218 <_vfiprintf_r+0x220>
 800d068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d06c:	f04f 0901 	mov.w	r9, #1
 800d070:	4623      	mov	r3, r4
 800d072:	469a      	mov	sl, r3
 800d074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d078:	b10a      	cbz	r2, 800d07e <_vfiprintf_r+0x86>
 800d07a:	2a25      	cmp	r2, #37	; 0x25
 800d07c:	d1f9      	bne.n	800d072 <_vfiprintf_r+0x7a>
 800d07e:	ebba 0b04 	subs.w	fp, sl, r4
 800d082:	d00b      	beq.n	800d09c <_vfiprintf_r+0xa4>
 800d084:	465b      	mov	r3, fp
 800d086:	4622      	mov	r2, r4
 800d088:	4629      	mov	r1, r5
 800d08a:	4630      	mov	r0, r6
 800d08c:	f7ff ffa2 	bl	800cfd4 <__sfputs_r>
 800d090:	3001      	adds	r0, #1
 800d092:	f000 80a9 	beq.w	800d1e8 <_vfiprintf_r+0x1f0>
 800d096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d098:	445a      	add	r2, fp
 800d09a:	9209      	str	r2, [sp, #36]	; 0x24
 800d09c:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 80a1 	beq.w	800d1e8 <_vfiprintf_r+0x1f0>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b0:	f10a 0a01 	add.w	sl, sl, #1
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	9307      	str	r3, [sp, #28]
 800d0b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0bc:	931a      	str	r3, [sp, #104]	; 0x68
 800d0be:	4654      	mov	r4, sl
 800d0c0:	2205      	movs	r2, #5
 800d0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0c6:	4854      	ldr	r0, [pc, #336]	; (800d218 <_vfiprintf_r+0x220>)
 800d0c8:	f7f3 f8aa 	bl	8000220 <memchr>
 800d0cc:	9a04      	ldr	r2, [sp, #16]
 800d0ce:	b9d8      	cbnz	r0, 800d108 <_vfiprintf_r+0x110>
 800d0d0:	06d1      	lsls	r1, r2, #27
 800d0d2:	bf44      	itt	mi
 800d0d4:	2320      	movmi	r3, #32
 800d0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0da:	0713      	lsls	r3, r2, #28
 800d0dc:	bf44      	itt	mi
 800d0de:	232b      	movmi	r3, #43	; 0x2b
 800d0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ea:	d015      	beq.n	800d118 <_vfiprintf_r+0x120>
 800d0ec:	9a07      	ldr	r2, [sp, #28]
 800d0ee:	4654      	mov	r4, sl
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	f04f 0c0a 	mov.w	ip, #10
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0fc:	3b30      	subs	r3, #48	; 0x30
 800d0fe:	2b09      	cmp	r3, #9
 800d100:	d94d      	bls.n	800d19e <_vfiprintf_r+0x1a6>
 800d102:	b1b0      	cbz	r0, 800d132 <_vfiprintf_r+0x13a>
 800d104:	9207      	str	r2, [sp, #28]
 800d106:	e014      	b.n	800d132 <_vfiprintf_r+0x13a>
 800d108:	eba0 0308 	sub.w	r3, r0, r8
 800d10c:	fa09 f303 	lsl.w	r3, r9, r3
 800d110:	4313      	orrs	r3, r2
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	46a2      	mov	sl, r4
 800d116:	e7d2      	b.n	800d0be <_vfiprintf_r+0xc6>
 800d118:	9b03      	ldr	r3, [sp, #12]
 800d11a:	1d19      	adds	r1, r3, #4
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	9103      	str	r1, [sp, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	bfbb      	ittet	lt
 800d124:	425b      	neglt	r3, r3
 800d126:	f042 0202 	orrlt.w	r2, r2, #2
 800d12a:	9307      	strge	r3, [sp, #28]
 800d12c:	9307      	strlt	r3, [sp, #28]
 800d12e:	bfb8      	it	lt
 800d130:	9204      	strlt	r2, [sp, #16]
 800d132:	7823      	ldrb	r3, [r4, #0]
 800d134:	2b2e      	cmp	r3, #46	; 0x2e
 800d136:	d10c      	bne.n	800d152 <_vfiprintf_r+0x15a>
 800d138:	7863      	ldrb	r3, [r4, #1]
 800d13a:	2b2a      	cmp	r3, #42	; 0x2a
 800d13c:	d134      	bne.n	800d1a8 <_vfiprintf_r+0x1b0>
 800d13e:	9b03      	ldr	r3, [sp, #12]
 800d140:	1d1a      	adds	r2, r3, #4
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	9203      	str	r2, [sp, #12]
 800d146:	2b00      	cmp	r3, #0
 800d148:	bfb8      	it	lt
 800d14a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d14e:	3402      	adds	r4, #2
 800d150:	9305      	str	r3, [sp, #20]
 800d152:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d228 <_vfiprintf_r+0x230>
 800d156:	7821      	ldrb	r1, [r4, #0]
 800d158:	2203      	movs	r2, #3
 800d15a:	4650      	mov	r0, sl
 800d15c:	f7f3 f860 	bl	8000220 <memchr>
 800d160:	b138      	cbz	r0, 800d172 <_vfiprintf_r+0x17a>
 800d162:	9b04      	ldr	r3, [sp, #16]
 800d164:	eba0 000a 	sub.w	r0, r0, sl
 800d168:	2240      	movs	r2, #64	; 0x40
 800d16a:	4082      	lsls	r2, r0
 800d16c:	4313      	orrs	r3, r2
 800d16e:	3401      	adds	r4, #1
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d176:	4829      	ldr	r0, [pc, #164]	; (800d21c <_vfiprintf_r+0x224>)
 800d178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d17c:	2206      	movs	r2, #6
 800d17e:	f7f3 f84f 	bl	8000220 <memchr>
 800d182:	2800      	cmp	r0, #0
 800d184:	d03f      	beq.n	800d206 <_vfiprintf_r+0x20e>
 800d186:	4b26      	ldr	r3, [pc, #152]	; (800d220 <_vfiprintf_r+0x228>)
 800d188:	bb1b      	cbnz	r3, 800d1d2 <_vfiprintf_r+0x1da>
 800d18a:	9b03      	ldr	r3, [sp, #12]
 800d18c:	3307      	adds	r3, #7
 800d18e:	f023 0307 	bic.w	r3, r3, #7
 800d192:	3308      	adds	r3, #8
 800d194:	9303      	str	r3, [sp, #12]
 800d196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d198:	443b      	add	r3, r7
 800d19a:	9309      	str	r3, [sp, #36]	; 0x24
 800d19c:	e768      	b.n	800d070 <_vfiprintf_r+0x78>
 800d19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	2001      	movs	r0, #1
 800d1a6:	e7a6      	b.n	800d0f6 <_vfiprintf_r+0xfe>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	3401      	adds	r4, #1
 800d1ac:	9305      	str	r3, [sp, #20]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f04f 0c0a 	mov.w	ip, #10
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ba:	3a30      	subs	r2, #48	; 0x30
 800d1bc:	2a09      	cmp	r2, #9
 800d1be:	d903      	bls.n	800d1c8 <_vfiprintf_r+0x1d0>
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d0c6      	beq.n	800d152 <_vfiprintf_r+0x15a>
 800d1c4:	9105      	str	r1, [sp, #20]
 800d1c6:	e7c4      	b.n	800d152 <_vfiprintf_r+0x15a>
 800d1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e7f0      	b.n	800d1b4 <_vfiprintf_r+0x1bc>
 800d1d2:	ab03      	add	r3, sp, #12
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	462a      	mov	r2, r5
 800d1d8:	4b12      	ldr	r3, [pc, #72]	; (800d224 <_vfiprintf_r+0x22c>)
 800d1da:	a904      	add	r1, sp, #16
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f3af 8000 	nop.w
 800d1e2:	4607      	mov	r7, r0
 800d1e4:	1c78      	adds	r0, r7, #1
 800d1e6:	d1d6      	bne.n	800d196 <_vfiprintf_r+0x19e>
 800d1e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ea:	07d9      	lsls	r1, r3, #31
 800d1ec:	d405      	bmi.n	800d1fa <_vfiprintf_r+0x202>
 800d1ee:	89ab      	ldrh	r3, [r5, #12]
 800d1f0:	059a      	lsls	r2, r3, #22
 800d1f2:	d402      	bmi.n	800d1fa <_vfiprintf_r+0x202>
 800d1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1f6:	f7fe fd49 	bl	800bc8c <__retarget_lock_release_recursive>
 800d1fa:	89ab      	ldrh	r3, [r5, #12]
 800d1fc:	065b      	lsls	r3, r3, #25
 800d1fe:	f53f af1d 	bmi.w	800d03c <_vfiprintf_r+0x44>
 800d202:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d204:	e71c      	b.n	800d040 <_vfiprintf_r+0x48>
 800d206:	ab03      	add	r3, sp, #12
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	462a      	mov	r2, r5
 800d20c:	4b05      	ldr	r3, [pc, #20]	; (800d224 <_vfiprintf_r+0x22c>)
 800d20e:	a904      	add	r1, sp, #16
 800d210:	4630      	mov	r0, r6
 800d212:	f000 f879 	bl	800d308 <_printf_i>
 800d216:	e7e4      	b.n	800d1e2 <_vfiprintf_r+0x1ea>
 800d218:	0800dcd5 	.word	0x0800dcd5
 800d21c:	0800dcdf 	.word	0x0800dcdf
 800d220:	00000000 	.word	0x00000000
 800d224:	0800cfd5 	.word	0x0800cfd5
 800d228:	0800dcdb 	.word	0x0800dcdb

0800d22c <_printf_common>:
 800d22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d230:	4616      	mov	r6, r2
 800d232:	4699      	mov	r9, r3
 800d234:	688a      	ldr	r2, [r1, #8]
 800d236:	690b      	ldr	r3, [r1, #16]
 800d238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d23c:	4293      	cmp	r3, r2
 800d23e:	bfb8      	it	lt
 800d240:	4613      	movlt	r3, r2
 800d242:	6033      	str	r3, [r6, #0]
 800d244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d248:	4607      	mov	r7, r0
 800d24a:	460c      	mov	r4, r1
 800d24c:	b10a      	cbz	r2, 800d252 <_printf_common+0x26>
 800d24e:	3301      	adds	r3, #1
 800d250:	6033      	str	r3, [r6, #0]
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	0699      	lsls	r1, r3, #26
 800d256:	bf42      	ittt	mi
 800d258:	6833      	ldrmi	r3, [r6, #0]
 800d25a:	3302      	addmi	r3, #2
 800d25c:	6033      	strmi	r3, [r6, #0]
 800d25e:	6825      	ldr	r5, [r4, #0]
 800d260:	f015 0506 	ands.w	r5, r5, #6
 800d264:	d106      	bne.n	800d274 <_printf_common+0x48>
 800d266:	f104 0a19 	add.w	sl, r4, #25
 800d26a:	68e3      	ldr	r3, [r4, #12]
 800d26c:	6832      	ldr	r2, [r6, #0]
 800d26e:	1a9b      	subs	r3, r3, r2
 800d270:	42ab      	cmp	r3, r5
 800d272:	dc26      	bgt.n	800d2c2 <_printf_common+0x96>
 800d274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d278:	1e13      	subs	r3, r2, #0
 800d27a:	6822      	ldr	r2, [r4, #0]
 800d27c:	bf18      	it	ne
 800d27e:	2301      	movne	r3, #1
 800d280:	0692      	lsls	r2, r2, #26
 800d282:	d42b      	bmi.n	800d2dc <_printf_common+0xb0>
 800d284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d288:	4649      	mov	r1, r9
 800d28a:	4638      	mov	r0, r7
 800d28c:	47c0      	blx	r8
 800d28e:	3001      	adds	r0, #1
 800d290:	d01e      	beq.n	800d2d0 <_printf_common+0xa4>
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	6922      	ldr	r2, [r4, #16]
 800d296:	f003 0306 	and.w	r3, r3, #6
 800d29a:	2b04      	cmp	r3, #4
 800d29c:	bf02      	ittt	eq
 800d29e:	68e5      	ldreq	r5, [r4, #12]
 800d2a0:	6833      	ldreq	r3, [r6, #0]
 800d2a2:	1aed      	subeq	r5, r5, r3
 800d2a4:	68a3      	ldr	r3, [r4, #8]
 800d2a6:	bf0c      	ite	eq
 800d2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2ac:	2500      	movne	r5, #0
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	bfc4      	itt	gt
 800d2b2:	1a9b      	subgt	r3, r3, r2
 800d2b4:	18ed      	addgt	r5, r5, r3
 800d2b6:	2600      	movs	r6, #0
 800d2b8:	341a      	adds	r4, #26
 800d2ba:	42b5      	cmp	r5, r6
 800d2bc:	d11a      	bne.n	800d2f4 <_printf_common+0xc8>
 800d2be:	2000      	movs	r0, #0
 800d2c0:	e008      	b.n	800d2d4 <_printf_common+0xa8>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	4652      	mov	r2, sl
 800d2c6:	4649      	mov	r1, r9
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	47c0      	blx	r8
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	d103      	bne.n	800d2d8 <_printf_common+0xac>
 800d2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d8:	3501      	adds	r5, #1
 800d2da:	e7c6      	b.n	800d26a <_printf_common+0x3e>
 800d2dc:	18e1      	adds	r1, r4, r3
 800d2de:	1c5a      	adds	r2, r3, #1
 800d2e0:	2030      	movs	r0, #48	; 0x30
 800d2e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2e6:	4422      	add	r2, r4
 800d2e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	e7c7      	b.n	800d284 <_printf_common+0x58>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	4622      	mov	r2, r4
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	4638      	mov	r0, r7
 800d2fc:	47c0      	blx	r8
 800d2fe:	3001      	adds	r0, #1
 800d300:	d0e6      	beq.n	800d2d0 <_printf_common+0xa4>
 800d302:	3601      	adds	r6, #1
 800d304:	e7d9      	b.n	800d2ba <_printf_common+0x8e>
	...

0800d308 <_printf_i>:
 800d308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d30c:	7e0f      	ldrb	r7, [r1, #24]
 800d30e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d310:	2f78      	cmp	r7, #120	; 0x78
 800d312:	4691      	mov	r9, r2
 800d314:	4680      	mov	r8, r0
 800d316:	460c      	mov	r4, r1
 800d318:	469a      	mov	sl, r3
 800d31a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d31e:	d807      	bhi.n	800d330 <_printf_i+0x28>
 800d320:	2f62      	cmp	r7, #98	; 0x62
 800d322:	d80a      	bhi.n	800d33a <_printf_i+0x32>
 800d324:	2f00      	cmp	r7, #0
 800d326:	f000 80d4 	beq.w	800d4d2 <_printf_i+0x1ca>
 800d32a:	2f58      	cmp	r7, #88	; 0x58
 800d32c:	f000 80c0 	beq.w	800d4b0 <_printf_i+0x1a8>
 800d330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d338:	e03a      	b.n	800d3b0 <_printf_i+0xa8>
 800d33a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d33e:	2b15      	cmp	r3, #21
 800d340:	d8f6      	bhi.n	800d330 <_printf_i+0x28>
 800d342:	a101      	add	r1, pc, #4	; (adr r1, 800d348 <_printf_i+0x40>)
 800d344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d348:	0800d3a1 	.word	0x0800d3a1
 800d34c:	0800d3b5 	.word	0x0800d3b5
 800d350:	0800d331 	.word	0x0800d331
 800d354:	0800d331 	.word	0x0800d331
 800d358:	0800d331 	.word	0x0800d331
 800d35c:	0800d331 	.word	0x0800d331
 800d360:	0800d3b5 	.word	0x0800d3b5
 800d364:	0800d331 	.word	0x0800d331
 800d368:	0800d331 	.word	0x0800d331
 800d36c:	0800d331 	.word	0x0800d331
 800d370:	0800d331 	.word	0x0800d331
 800d374:	0800d4b9 	.word	0x0800d4b9
 800d378:	0800d3e1 	.word	0x0800d3e1
 800d37c:	0800d473 	.word	0x0800d473
 800d380:	0800d331 	.word	0x0800d331
 800d384:	0800d331 	.word	0x0800d331
 800d388:	0800d4db 	.word	0x0800d4db
 800d38c:	0800d331 	.word	0x0800d331
 800d390:	0800d3e1 	.word	0x0800d3e1
 800d394:	0800d331 	.word	0x0800d331
 800d398:	0800d331 	.word	0x0800d331
 800d39c:	0800d47b 	.word	0x0800d47b
 800d3a0:	682b      	ldr	r3, [r5, #0]
 800d3a2:	1d1a      	adds	r2, r3, #4
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	602a      	str	r2, [r5, #0]
 800d3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e09f      	b.n	800d4f4 <_printf_i+0x1ec>
 800d3b4:	6820      	ldr	r0, [r4, #0]
 800d3b6:	682b      	ldr	r3, [r5, #0]
 800d3b8:	0607      	lsls	r7, r0, #24
 800d3ba:	f103 0104 	add.w	r1, r3, #4
 800d3be:	6029      	str	r1, [r5, #0]
 800d3c0:	d501      	bpl.n	800d3c6 <_printf_i+0xbe>
 800d3c2:	681e      	ldr	r6, [r3, #0]
 800d3c4:	e003      	b.n	800d3ce <_printf_i+0xc6>
 800d3c6:	0646      	lsls	r6, r0, #25
 800d3c8:	d5fb      	bpl.n	800d3c2 <_printf_i+0xba>
 800d3ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d3ce:	2e00      	cmp	r6, #0
 800d3d0:	da03      	bge.n	800d3da <_printf_i+0xd2>
 800d3d2:	232d      	movs	r3, #45	; 0x2d
 800d3d4:	4276      	negs	r6, r6
 800d3d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3da:	485a      	ldr	r0, [pc, #360]	; (800d544 <_printf_i+0x23c>)
 800d3dc:	230a      	movs	r3, #10
 800d3de:	e012      	b.n	800d406 <_printf_i+0xfe>
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	6820      	ldr	r0, [r4, #0]
 800d3e4:	1d19      	adds	r1, r3, #4
 800d3e6:	6029      	str	r1, [r5, #0]
 800d3e8:	0605      	lsls	r5, r0, #24
 800d3ea:	d501      	bpl.n	800d3f0 <_printf_i+0xe8>
 800d3ec:	681e      	ldr	r6, [r3, #0]
 800d3ee:	e002      	b.n	800d3f6 <_printf_i+0xee>
 800d3f0:	0641      	lsls	r1, r0, #25
 800d3f2:	d5fb      	bpl.n	800d3ec <_printf_i+0xe4>
 800d3f4:	881e      	ldrh	r6, [r3, #0]
 800d3f6:	4853      	ldr	r0, [pc, #332]	; (800d544 <_printf_i+0x23c>)
 800d3f8:	2f6f      	cmp	r7, #111	; 0x6f
 800d3fa:	bf0c      	ite	eq
 800d3fc:	2308      	moveq	r3, #8
 800d3fe:	230a      	movne	r3, #10
 800d400:	2100      	movs	r1, #0
 800d402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d406:	6865      	ldr	r5, [r4, #4]
 800d408:	60a5      	str	r5, [r4, #8]
 800d40a:	2d00      	cmp	r5, #0
 800d40c:	bfa2      	ittt	ge
 800d40e:	6821      	ldrge	r1, [r4, #0]
 800d410:	f021 0104 	bicge.w	r1, r1, #4
 800d414:	6021      	strge	r1, [r4, #0]
 800d416:	b90e      	cbnz	r6, 800d41c <_printf_i+0x114>
 800d418:	2d00      	cmp	r5, #0
 800d41a:	d04b      	beq.n	800d4b4 <_printf_i+0x1ac>
 800d41c:	4615      	mov	r5, r2
 800d41e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d422:	fb03 6711 	mls	r7, r3, r1, r6
 800d426:	5dc7      	ldrb	r7, [r0, r7]
 800d428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d42c:	4637      	mov	r7, r6
 800d42e:	42bb      	cmp	r3, r7
 800d430:	460e      	mov	r6, r1
 800d432:	d9f4      	bls.n	800d41e <_printf_i+0x116>
 800d434:	2b08      	cmp	r3, #8
 800d436:	d10b      	bne.n	800d450 <_printf_i+0x148>
 800d438:	6823      	ldr	r3, [r4, #0]
 800d43a:	07de      	lsls	r6, r3, #31
 800d43c:	d508      	bpl.n	800d450 <_printf_i+0x148>
 800d43e:	6923      	ldr	r3, [r4, #16]
 800d440:	6861      	ldr	r1, [r4, #4]
 800d442:	4299      	cmp	r1, r3
 800d444:	bfde      	ittt	le
 800d446:	2330      	movle	r3, #48	; 0x30
 800d448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d44c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d450:	1b52      	subs	r2, r2, r5
 800d452:	6122      	str	r2, [r4, #16]
 800d454:	f8cd a000 	str.w	sl, [sp]
 800d458:	464b      	mov	r3, r9
 800d45a:	aa03      	add	r2, sp, #12
 800d45c:	4621      	mov	r1, r4
 800d45e:	4640      	mov	r0, r8
 800d460:	f7ff fee4 	bl	800d22c <_printf_common>
 800d464:	3001      	adds	r0, #1
 800d466:	d14a      	bne.n	800d4fe <_printf_i+0x1f6>
 800d468:	f04f 30ff 	mov.w	r0, #4294967295
 800d46c:	b004      	add	sp, #16
 800d46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	f043 0320 	orr.w	r3, r3, #32
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	4833      	ldr	r0, [pc, #204]	; (800d548 <_printf_i+0x240>)
 800d47c:	2778      	movs	r7, #120	; 0x78
 800d47e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	6829      	ldr	r1, [r5, #0]
 800d486:	061f      	lsls	r7, r3, #24
 800d488:	f851 6b04 	ldr.w	r6, [r1], #4
 800d48c:	d402      	bmi.n	800d494 <_printf_i+0x18c>
 800d48e:	065f      	lsls	r7, r3, #25
 800d490:	bf48      	it	mi
 800d492:	b2b6      	uxthmi	r6, r6
 800d494:	07df      	lsls	r7, r3, #31
 800d496:	bf48      	it	mi
 800d498:	f043 0320 	orrmi.w	r3, r3, #32
 800d49c:	6029      	str	r1, [r5, #0]
 800d49e:	bf48      	it	mi
 800d4a0:	6023      	strmi	r3, [r4, #0]
 800d4a2:	b91e      	cbnz	r6, 800d4ac <_printf_i+0x1a4>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	f023 0320 	bic.w	r3, r3, #32
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	2310      	movs	r3, #16
 800d4ae:	e7a7      	b.n	800d400 <_printf_i+0xf8>
 800d4b0:	4824      	ldr	r0, [pc, #144]	; (800d544 <_printf_i+0x23c>)
 800d4b2:	e7e4      	b.n	800d47e <_printf_i+0x176>
 800d4b4:	4615      	mov	r5, r2
 800d4b6:	e7bd      	b.n	800d434 <_printf_i+0x12c>
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	6826      	ldr	r6, [r4, #0]
 800d4bc:	6961      	ldr	r1, [r4, #20]
 800d4be:	1d18      	adds	r0, r3, #4
 800d4c0:	6028      	str	r0, [r5, #0]
 800d4c2:	0635      	lsls	r5, r6, #24
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	d501      	bpl.n	800d4cc <_printf_i+0x1c4>
 800d4c8:	6019      	str	r1, [r3, #0]
 800d4ca:	e002      	b.n	800d4d2 <_printf_i+0x1ca>
 800d4cc:	0670      	lsls	r0, r6, #25
 800d4ce:	d5fb      	bpl.n	800d4c8 <_printf_i+0x1c0>
 800d4d0:	8019      	strh	r1, [r3, #0]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	6123      	str	r3, [r4, #16]
 800d4d6:	4615      	mov	r5, r2
 800d4d8:	e7bc      	b.n	800d454 <_printf_i+0x14c>
 800d4da:	682b      	ldr	r3, [r5, #0]
 800d4dc:	1d1a      	adds	r2, r3, #4
 800d4de:	602a      	str	r2, [r5, #0]
 800d4e0:	681d      	ldr	r5, [r3, #0]
 800d4e2:	6862      	ldr	r2, [r4, #4]
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f7f2 fe9a 	bl	8000220 <memchr>
 800d4ec:	b108      	cbz	r0, 800d4f2 <_printf_i+0x1ea>
 800d4ee:	1b40      	subs	r0, r0, r5
 800d4f0:	6060      	str	r0, [r4, #4]
 800d4f2:	6863      	ldr	r3, [r4, #4]
 800d4f4:	6123      	str	r3, [r4, #16]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4fc:	e7aa      	b.n	800d454 <_printf_i+0x14c>
 800d4fe:	6923      	ldr	r3, [r4, #16]
 800d500:	462a      	mov	r2, r5
 800d502:	4649      	mov	r1, r9
 800d504:	4640      	mov	r0, r8
 800d506:	47d0      	blx	sl
 800d508:	3001      	adds	r0, #1
 800d50a:	d0ad      	beq.n	800d468 <_printf_i+0x160>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	079b      	lsls	r3, r3, #30
 800d510:	d413      	bmi.n	800d53a <_printf_i+0x232>
 800d512:	68e0      	ldr	r0, [r4, #12]
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	4298      	cmp	r0, r3
 800d518:	bfb8      	it	lt
 800d51a:	4618      	movlt	r0, r3
 800d51c:	e7a6      	b.n	800d46c <_printf_i+0x164>
 800d51e:	2301      	movs	r3, #1
 800d520:	4632      	mov	r2, r6
 800d522:	4649      	mov	r1, r9
 800d524:	4640      	mov	r0, r8
 800d526:	47d0      	blx	sl
 800d528:	3001      	adds	r0, #1
 800d52a:	d09d      	beq.n	800d468 <_printf_i+0x160>
 800d52c:	3501      	adds	r5, #1
 800d52e:	68e3      	ldr	r3, [r4, #12]
 800d530:	9903      	ldr	r1, [sp, #12]
 800d532:	1a5b      	subs	r3, r3, r1
 800d534:	42ab      	cmp	r3, r5
 800d536:	dcf2      	bgt.n	800d51e <_printf_i+0x216>
 800d538:	e7eb      	b.n	800d512 <_printf_i+0x20a>
 800d53a:	2500      	movs	r5, #0
 800d53c:	f104 0619 	add.w	r6, r4, #25
 800d540:	e7f5      	b.n	800d52e <_printf_i+0x226>
 800d542:	bf00      	nop
 800d544:	0800dce6 	.word	0x0800dce6
 800d548:	0800dcf7 	.word	0x0800dcf7

0800d54c <__swbuf_r>:
 800d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54e:	460e      	mov	r6, r1
 800d550:	4614      	mov	r4, r2
 800d552:	4605      	mov	r5, r0
 800d554:	b118      	cbz	r0, 800d55e <__swbuf_r+0x12>
 800d556:	6a03      	ldr	r3, [r0, #32]
 800d558:	b90b      	cbnz	r3, 800d55e <__swbuf_r+0x12>
 800d55a:	f7fe fa25 	bl	800b9a8 <__sinit>
 800d55e:	69a3      	ldr	r3, [r4, #24]
 800d560:	60a3      	str	r3, [r4, #8]
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	071a      	lsls	r2, r3, #28
 800d566:	d525      	bpl.n	800d5b4 <__swbuf_r+0x68>
 800d568:	6923      	ldr	r3, [r4, #16]
 800d56a:	b31b      	cbz	r3, 800d5b4 <__swbuf_r+0x68>
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	6922      	ldr	r2, [r4, #16]
 800d570:	1a98      	subs	r0, r3, r2
 800d572:	6963      	ldr	r3, [r4, #20]
 800d574:	b2f6      	uxtb	r6, r6
 800d576:	4283      	cmp	r3, r0
 800d578:	4637      	mov	r7, r6
 800d57a:	dc04      	bgt.n	800d586 <__swbuf_r+0x3a>
 800d57c:	4621      	mov	r1, r4
 800d57e:	4628      	mov	r0, r5
 800d580:	f7ff fcba 	bl	800cef8 <_fflush_r>
 800d584:	b9e0      	cbnz	r0, 800d5c0 <__swbuf_r+0x74>
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	3b01      	subs	r3, #1
 800d58a:	60a3      	str	r3, [r4, #8]
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	6022      	str	r2, [r4, #0]
 800d592:	701e      	strb	r6, [r3, #0]
 800d594:	6962      	ldr	r2, [r4, #20]
 800d596:	1c43      	adds	r3, r0, #1
 800d598:	429a      	cmp	r2, r3
 800d59a:	d004      	beq.n	800d5a6 <__swbuf_r+0x5a>
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	07db      	lsls	r3, r3, #31
 800d5a0:	d506      	bpl.n	800d5b0 <__swbuf_r+0x64>
 800d5a2:	2e0a      	cmp	r6, #10
 800d5a4:	d104      	bne.n	800d5b0 <__swbuf_r+0x64>
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f7ff fca5 	bl	800cef8 <_fflush_r>
 800d5ae:	b938      	cbnz	r0, 800d5c0 <__swbuf_r+0x74>
 800d5b0:	4638      	mov	r0, r7
 800d5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5b4:	4621      	mov	r1, r4
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f000 f806 	bl	800d5c8 <__swsetup_r>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d0d5      	beq.n	800d56c <__swbuf_r+0x20>
 800d5c0:	f04f 37ff 	mov.w	r7, #4294967295
 800d5c4:	e7f4      	b.n	800d5b0 <__swbuf_r+0x64>
	...

0800d5c8 <__swsetup_r>:
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	4b2a      	ldr	r3, [pc, #168]	; (800d674 <__swsetup_r+0xac>)
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	6818      	ldr	r0, [r3, #0]
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	b118      	cbz	r0, 800d5dc <__swsetup_r+0x14>
 800d5d4:	6a03      	ldr	r3, [r0, #32]
 800d5d6:	b90b      	cbnz	r3, 800d5dc <__swsetup_r+0x14>
 800d5d8:	f7fe f9e6 	bl	800b9a8 <__sinit>
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5e2:	0718      	lsls	r0, r3, #28
 800d5e4:	d422      	bmi.n	800d62c <__swsetup_r+0x64>
 800d5e6:	06d9      	lsls	r1, r3, #27
 800d5e8:	d407      	bmi.n	800d5fa <__swsetup_r+0x32>
 800d5ea:	2309      	movs	r3, #9
 800d5ec:	602b      	str	r3, [r5, #0]
 800d5ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f8:	e034      	b.n	800d664 <__swsetup_r+0x9c>
 800d5fa:	0758      	lsls	r0, r3, #29
 800d5fc:	d512      	bpl.n	800d624 <__swsetup_r+0x5c>
 800d5fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d600:	b141      	cbz	r1, 800d614 <__swsetup_r+0x4c>
 800d602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d606:	4299      	cmp	r1, r3
 800d608:	d002      	beq.n	800d610 <__swsetup_r+0x48>
 800d60a:	4628      	mov	r0, r5
 800d60c:	f7fe fb7e 	bl	800bd0c <_free_r>
 800d610:	2300      	movs	r3, #0
 800d612:	6363      	str	r3, [r4, #52]	; 0x34
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d61a:	81a3      	strh	r3, [r4, #12]
 800d61c:	2300      	movs	r3, #0
 800d61e:	6063      	str	r3, [r4, #4]
 800d620:	6923      	ldr	r3, [r4, #16]
 800d622:	6023      	str	r3, [r4, #0]
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	f043 0308 	orr.w	r3, r3, #8
 800d62a:	81a3      	strh	r3, [r4, #12]
 800d62c:	6923      	ldr	r3, [r4, #16]
 800d62e:	b94b      	cbnz	r3, 800d644 <__swsetup_r+0x7c>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d63a:	d003      	beq.n	800d644 <__swsetup_r+0x7c>
 800d63c:	4621      	mov	r1, r4
 800d63e:	4628      	mov	r0, r5
 800d640:	f000 f884 	bl	800d74c <__smakebuf_r>
 800d644:	89a0      	ldrh	r0, [r4, #12]
 800d646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d64a:	f010 0301 	ands.w	r3, r0, #1
 800d64e:	d00a      	beq.n	800d666 <__swsetup_r+0x9e>
 800d650:	2300      	movs	r3, #0
 800d652:	60a3      	str	r3, [r4, #8]
 800d654:	6963      	ldr	r3, [r4, #20]
 800d656:	425b      	negs	r3, r3
 800d658:	61a3      	str	r3, [r4, #24]
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	b943      	cbnz	r3, 800d670 <__swsetup_r+0xa8>
 800d65e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d662:	d1c4      	bne.n	800d5ee <__swsetup_r+0x26>
 800d664:	bd38      	pop	{r3, r4, r5, pc}
 800d666:	0781      	lsls	r1, r0, #30
 800d668:	bf58      	it	pl
 800d66a:	6963      	ldrpl	r3, [r4, #20]
 800d66c:	60a3      	str	r3, [r4, #8]
 800d66e:	e7f4      	b.n	800d65a <__swsetup_r+0x92>
 800d670:	2000      	movs	r0, #0
 800d672:	e7f7      	b.n	800d664 <__swsetup_r+0x9c>
 800d674:	200001ec 	.word	0x200001ec

0800d678 <_raise_r>:
 800d678:	291f      	cmp	r1, #31
 800d67a:	b538      	push	{r3, r4, r5, lr}
 800d67c:	4604      	mov	r4, r0
 800d67e:	460d      	mov	r5, r1
 800d680:	d904      	bls.n	800d68c <_raise_r+0x14>
 800d682:	2316      	movs	r3, #22
 800d684:	6003      	str	r3, [r0, #0]
 800d686:	f04f 30ff 	mov.w	r0, #4294967295
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d68e:	b112      	cbz	r2, 800d696 <_raise_r+0x1e>
 800d690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d694:	b94b      	cbnz	r3, 800d6aa <_raise_r+0x32>
 800d696:	4620      	mov	r0, r4
 800d698:	f000 f830 	bl	800d6fc <_getpid_r>
 800d69c:	462a      	mov	r2, r5
 800d69e:	4601      	mov	r1, r0
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6a6:	f000 b817 	b.w	800d6d8 <_kill_r>
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d00a      	beq.n	800d6c4 <_raise_r+0x4c>
 800d6ae:	1c59      	adds	r1, r3, #1
 800d6b0:	d103      	bne.n	800d6ba <_raise_r+0x42>
 800d6b2:	2316      	movs	r3, #22
 800d6b4:	6003      	str	r3, [r0, #0]
 800d6b6:	2001      	movs	r0, #1
 800d6b8:	e7e7      	b.n	800d68a <_raise_r+0x12>
 800d6ba:	2400      	movs	r4, #0
 800d6bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	4798      	blx	r3
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	e7e0      	b.n	800d68a <_raise_r+0x12>

0800d6c8 <raise>:
 800d6c8:	4b02      	ldr	r3, [pc, #8]	; (800d6d4 <raise+0xc>)
 800d6ca:	4601      	mov	r1, r0
 800d6cc:	6818      	ldr	r0, [r3, #0]
 800d6ce:	f7ff bfd3 	b.w	800d678 <_raise_r>
 800d6d2:	bf00      	nop
 800d6d4:	200001ec 	.word	0x200001ec

0800d6d8 <_kill_r>:
 800d6d8:	b538      	push	{r3, r4, r5, lr}
 800d6da:	4d07      	ldr	r5, [pc, #28]	; (800d6f8 <_kill_r+0x20>)
 800d6dc:	2300      	movs	r3, #0
 800d6de:	4604      	mov	r4, r0
 800d6e0:	4608      	mov	r0, r1
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	602b      	str	r3, [r5, #0]
 800d6e6:	f7f5 f88d 	bl	8002804 <_kill>
 800d6ea:	1c43      	adds	r3, r0, #1
 800d6ec:	d102      	bne.n	800d6f4 <_kill_r+0x1c>
 800d6ee:	682b      	ldr	r3, [r5, #0]
 800d6f0:	b103      	cbz	r3, 800d6f4 <_kill_r+0x1c>
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	bd38      	pop	{r3, r4, r5, pc}
 800d6f6:	bf00      	nop
 800d6f8:	20003668 	.word	0x20003668

0800d6fc <_getpid_r>:
 800d6fc:	f7f5 b87a 	b.w	80027f4 <_getpid>

0800d700 <__swhatbuf_r>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	460c      	mov	r4, r1
 800d704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d708:	2900      	cmp	r1, #0
 800d70a:	b096      	sub	sp, #88	; 0x58
 800d70c:	4615      	mov	r5, r2
 800d70e:	461e      	mov	r6, r3
 800d710:	da0d      	bge.n	800d72e <__swhatbuf_r+0x2e>
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d718:	f04f 0100 	mov.w	r1, #0
 800d71c:	bf0c      	ite	eq
 800d71e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d722:	2340      	movne	r3, #64	; 0x40
 800d724:	2000      	movs	r0, #0
 800d726:	6031      	str	r1, [r6, #0]
 800d728:	602b      	str	r3, [r5, #0]
 800d72a:	b016      	add	sp, #88	; 0x58
 800d72c:	bd70      	pop	{r4, r5, r6, pc}
 800d72e:	466a      	mov	r2, sp
 800d730:	f000 f848 	bl	800d7c4 <_fstat_r>
 800d734:	2800      	cmp	r0, #0
 800d736:	dbec      	blt.n	800d712 <__swhatbuf_r+0x12>
 800d738:	9901      	ldr	r1, [sp, #4]
 800d73a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d73e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d742:	4259      	negs	r1, r3
 800d744:	4159      	adcs	r1, r3
 800d746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d74a:	e7eb      	b.n	800d724 <__swhatbuf_r+0x24>

0800d74c <__smakebuf_r>:
 800d74c:	898b      	ldrh	r3, [r1, #12]
 800d74e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d750:	079d      	lsls	r5, r3, #30
 800d752:	4606      	mov	r6, r0
 800d754:	460c      	mov	r4, r1
 800d756:	d507      	bpl.n	800d768 <__smakebuf_r+0x1c>
 800d758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d75c:	6023      	str	r3, [r4, #0]
 800d75e:	6123      	str	r3, [r4, #16]
 800d760:	2301      	movs	r3, #1
 800d762:	6163      	str	r3, [r4, #20]
 800d764:	b002      	add	sp, #8
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	ab01      	add	r3, sp, #4
 800d76a:	466a      	mov	r2, sp
 800d76c:	f7ff ffc8 	bl	800d700 <__swhatbuf_r>
 800d770:	9900      	ldr	r1, [sp, #0]
 800d772:	4605      	mov	r5, r0
 800d774:	4630      	mov	r0, r6
 800d776:	f7fd f9e7 	bl	800ab48 <_malloc_r>
 800d77a:	b948      	cbnz	r0, 800d790 <__smakebuf_r+0x44>
 800d77c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d780:	059a      	lsls	r2, r3, #22
 800d782:	d4ef      	bmi.n	800d764 <__smakebuf_r+0x18>
 800d784:	f023 0303 	bic.w	r3, r3, #3
 800d788:	f043 0302 	orr.w	r3, r3, #2
 800d78c:	81a3      	strh	r3, [r4, #12]
 800d78e:	e7e3      	b.n	800d758 <__smakebuf_r+0xc>
 800d790:	89a3      	ldrh	r3, [r4, #12]
 800d792:	6020      	str	r0, [r4, #0]
 800d794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d798:	81a3      	strh	r3, [r4, #12]
 800d79a:	9b00      	ldr	r3, [sp, #0]
 800d79c:	6163      	str	r3, [r4, #20]
 800d79e:	9b01      	ldr	r3, [sp, #4]
 800d7a0:	6120      	str	r0, [r4, #16]
 800d7a2:	b15b      	cbz	r3, 800d7bc <__smakebuf_r+0x70>
 800d7a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f000 f81d 	bl	800d7e8 <_isatty_r>
 800d7ae:	b128      	cbz	r0, 800d7bc <__smakebuf_r+0x70>
 800d7b0:	89a3      	ldrh	r3, [r4, #12]
 800d7b2:	f023 0303 	bic.w	r3, r3, #3
 800d7b6:	f043 0301 	orr.w	r3, r3, #1
 800d7ba:	81a3      	strh	r3, [r4, #12]
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	431d      	orrs	r5, r3
 800d7c0:	81a5      	strh	r5, [r4, #12]
 800d7c2:	e7cf      	b.n	800d764 <__smakebuf_r+0x18>

0800d7c4 <_fstat_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	4d07      	ldr	r5, [pc, #28]	; (800d7e4 <_fstat_r+0x20>)
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	602b      	str	r3, [r5, #0]
 800d7d2:	f7f5 f876 	bl	80028c2 <_fstat>
 800d7d6:	1c43      	adds	r3, r0, #1
 800d7d8:	d102      	bne.n	800d7e0 <_fstat_r+0x1c>
 800d7da:	682b      	ldr	r3, [r5, #0]
 800d7dc:	b103      	cbz	r3, 800d7e0 <_fstat_r+0x1c>
 800d7de:	6023      	str	r3, [r4, #0]
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20003668 	.word	0x20003668

0800d7e8 <_isatty_r>:
 800d7e8:	b538      	push	{r3, r4, r5, lr}
 800d7ea:	4d06      	ldr	r5, [pc, #24]	; (800d804 <_isatty_r+0x1c>)
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	4608      	mov	r0, r1
 800d7f2:	602b      	str	r3, [r5, #0]
 800d7f4:	f7f5 f875 	bl	80028e2 <_isatty>
 800d7f8:	1c43      	adds	r3, r0, #1
 800d7fa:	d102      	bne.n	800d802 <_isatty_r+0x1a>
 800d7fc:	682b      	ldr	r3, [r5, #0]
 800d7fe:	b103      	cbz	r3, 800d802 <_isatty_r+0x1a>
 800d800:	6023      	str	r3, [r4, #0]
 800d802:	bd38      	pop	{r3, r4, r5, pc}
 800d804:	20003668 	.word	0x20003668

0800d808 <_init>:
 800d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80a:	bf00      	nop
 800d80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d80e:	bc08      	pop	{r3}
 800d810:	469e      	mov	lr, r3
 800d812:	4770      	bx	lr

0800d814 <_fini>:
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d816:	bf00      	nop
 800d818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d81a:	bc08      	pop	{r3}
 800d81c:	469e      	mov	lr, r3
 800d81e:	4770      	bx	lr
