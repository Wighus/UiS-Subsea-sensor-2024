
UiS_Subsea_Sensor_2024_STM32G473RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800dde8  0800dde8  0001dde8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2d8  0800e2d8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e2d8  0800e2d8  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e2d8  0800e2d8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2d8  0800e2d8  0001e2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2dc  0800e2dc  0001e2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e2e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034ac  200001f0  0800e4d0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000369c  0800e4d0  0002369c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000232d7  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000536b  00000000  00000000  0004353a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fb0  00000000  00000000  000488a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000182a  00000000  00000000  0004a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a88b  00000000  00000000  0004c082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027f5d  00000000  00000000  0007690d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107591  00000000  00000000  0009e86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000097a8  00000000  00000000  001a5dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001af5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ddd0 	.word	0x0800ddd0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800ddd0 	.word	0x0800ddd0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2lz>:
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	460d      	mov	r5, r1
 8000c56:	f7ff ff61 	bl	8000b1c <__aeabi_dcmplt>
 8000c5a:	b928      	cbnz	r0, 8000c68 <__aeabi_d2lz+0x1c>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4629      	mov	r1, r5
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b80a 	b.w	8000c7c <__aeabi_d2ulz>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6e:	f000 f805 	bl	8000c7c <__aeabi_d2ulz>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	bf00      	nop

08000c7c <__aeabi_d2ulz>:
 8000c7c:	b5d0      	push	{r4, r6, r7, lr}
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__aeabi_d2ulz+0x34>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcd7 	bl	8000638 <__aeabi_dmul>
 8000c8a:	f7ff ff6f 	bl	8000b6c <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc58 	bl	8000544 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <__aeabi_d2ulz+0x38>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcce 	bl	8000638 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff fb10 	bl	80002c8 <__aeabi_dsub>
 8000ca8:	f7ff ff60 	bl	8000b6c <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <EMA_Init>:
#include "EMA.h"

void EMA_Init(EMA *filt, float alpha) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	ed87 0a00 	vstr	s0, [r7]

	/* Setter filterkoeffisient */
	EMA_SetAlpha(filt, alpha);
 8000cc4:	ed97 0a00 	vldr	s0, [r7]
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f808 	bl	8000cde <EMA_SetAlpha>

	/* Clear filter output */
	filt->out = 0.0f;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <EMA_SetAlpha>:


void EMA_SetAlpha(EMA *filt, float alpha){
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	ed87 0a00 	vstr	s0, [r7]

	/* Alfa må være mellom 0 og 1 */
	if (alpha > 1.0f) {
 8000cea:	edd7 7a00 	vldr	s15, [r7]
 8000cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfa:	dd03      	ble.n	8000d04 <EMA_SetAlpha+0x26>
		alpha = 1.0f;
 8000cfc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	e009      	b.n	8000d18 <EMA_SetAlpha+0x3a>

	} else if (alpha < 0.0f){
 8000d04:	edd7 7a00 	vldr	s15, [r7]
 8000d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d10:	d502      	bpl.n	8000d18 <EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]

	}

	filt->alpha = alpha;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <EMA_Update>:


float EMA_Update(EMA *filt, float input) {
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	ed87 0a00 	vstr	s0, [r7]
    filt->out = filt->alpha * input + (1.0f - filt->alpha) * filt->out;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	ed93 7a00 	vldr	s14, [r3]
 8000d3c:	edd7 7a00 	vldr	s15, [r7]
 8000d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edd3 7a00 	vldr	s15, [r3]
 8000d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a01 	vstr	s15, [r3, #4]
    return filt->out;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	ee07 3a90 	vmov	s15, r3
}
 8000d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <ms5837_i2c_read>:
//    HAL_I2C_Master_Transmit(&hi2c3, dev_addr, &reg_addr, 1, HAL_MAX_DELAY);
//    HAL_I2C_Master_Receive(&hi2c3, dev_addr, data, len, HAL_MAX_DELAY);
//}

// Utfør I2C lesing ved bruk av wrapper funksjon
void ms5837_i2c_read(ms5837_t *sensor, uint8_t command, uint8_t *data, uint8_t num_bytes) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	461a      	mov	r2, r3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	72fb      	strb	r3, [r7, #11]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	72bb      	strb	r3, [r7, #10]
	uint8_t message[1];
	message[0] = command;
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(&hi2c3,(0x76<<1), message, 1,10); // Send kommando
 8000d94:	f107 0214 	add.w	r2, r7, #20
 8000d98:	230a      	movs	r3, #10
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	21ec      	movs	r1, #236	; 0xec
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <ms5837_i2c_read+0x44>)
 8000da2:	f007 f803 	bl	8007dac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c3,(0x76<<1), data, num_bytes,10); // Motta data
 8000da6:	7abb      	ldrb	r3, [r7, #10]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	220a      	movs	r2, #10
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	21ec      	movs	r1, #236	; 0xec
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <ms5837_i2c_read+0x44>)
 8000db4:	f007 f912 	bl	8007fdc <HAL_I2C_Master_Receive>
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000424 	.word	0x20000424

08000dc4 <ms5837_i2c_write>:

//Utfør I2C skriving ved bruk av wrapper funksjon
void ms5837_i2c_write(ms5837_t *sensor, uint8_t command) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	uint8_t message[1];
	message[0] = command;
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c3,(0x76<<1), message, 1,10);
 8000dd4:	f107 020c 	add.w	r2, r7, #12
 8000dd8:	230a      	movs	r3, #10
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	21ec      	movs	r1, #236	; 0xec
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <ms5837_i2c_write+0x2c>)
 8000de2:	f006 ffe3 	bl	8007dac <HAL_I2C_Master_Transmit>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000424 	.word	0x20000424

08000df4 <ms5837_reset>:
// ---------------------------------------------------------------------

// Utfør reset av software på sensoren
void ms5837_reset( ms5837_t *sensor )
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    ms5837_i2c_write( sensor, CMD_RESET );
 8000dfc:	211e      	movs	r1, #30
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe0 	bl	8000dc4 <ms5837_i2c_write>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <ms5837_read_calibration_data>:

// Be om PROM data fra sensoren og lagre det i structuren
// returnerer True hvis fullført

bool ms5837_read_calibration_data( ms5837_t *sensor )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    if( !sensor )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <ms5837_read_calibration_data+0x12>
    {
        return false;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e053      	b.n	8000ec6 <ms5837_read_calibration_data+0xba>
    }

    // Les de 7 16-bit verdiene fra PROM
    for( uint8_t i = 0; i < NUM_CALIBRATION_VARIABLES; i++ )
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	e02b      	b.n	8000e7c <ms5837_read_calibration_data+0x70>
    {
        uint8_t buffer[2] = { 0 };
 8000e24:	2300      	movs	r3, #0
 8000e26:	813b      	strh	r3, [r7, #8]
        ms5837_i2c_read( sensor, CMD_READ_PROM_START+(i*2), &buffer[0], 2 );
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	3350      	adds	r3, #80	; 0x50
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	b2d9      	uxtb	r1, r3
 8000e32:	f107 0208 	add.w	r2, r7, #8
 8000e36:	2302      	movs	r3, #2
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff9f 	bl	8000d7c <ms5837_i2c_read>

        sensor->calibration_data[i] = (buffer[0] << 8);    // MSB
 8000e3e:	7a3b      	ldrb	r3, [r7, #8]
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	0212      	lsls	r2, r2, #8
 8000e46:	b291      	uxth	r1, r2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	460a      	mov	r2, r1
 8000e52:	809a      	strh	r2, [r3, #4]
        sensor->calibration_data[i] |= buffer[1];          // LSB
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	8899      	ldrh	r1, [r3, #4]
 8000e60:	7a7b      	ldrb	r3, [r7, #9]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	b291      	uxth	r1, r2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	460a      	mov	r2, r1
 8000e74:	809a      	strh	r2, [r3, #4]
    for( uint8_t i = 0; i < NUM_CALIBRATION_VARIABLES; i++ )
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d9d0      	bls.n	8000e24 <ms5837_read_calibration_data+0x18>
    }

    // Valider Cyclic redudancy check (CRC)
    uint8_t crc_rx = sensor->calibration_data[C0_VERSION] >> 12;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	899b      	ldrh	r3, [r3, #12]
 8000e86:	0b1b      	lsrs	r3, r3, #12
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	73bb      	strb	r3, [r7, #14]
    uint8_t crc_calc = crc4( &sensor->calibration_data[0] );
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	330c      	adds	r3, #12
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fb21 	bl	80014d8 <crc4>
 8000e96:	4603      	mov	r3, r0
 8000e98:	737b      	strb	r3, [r7, #13]

    sensor->calibration_loaded = ( crc_rx == crc_calc );
 8000e9a:	7bba      	ldrb	r2, [r7, #14]
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	bf0c      	ite	eq
 8000ea2:	2301      	moveq	r3, #1
 8000ea4:	2300      	movne	r3, #0
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	729a      	strb	r2, [r3, #10]

    // Sjekk sensor versjon
    uint8_t version = (sensor->calibration_data[C0_VERSION] >> 5) & 0x7F;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	899b      	ldrh	r3, [r3, #12]
 8000eb0:	095b      	lsrs	r3, r3, #5
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eba:	733b      	strb	r3, [r7, #12]
    sensor->variant = version;  // TODO map to an enum here
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7b3a      	ldrb	r2, [r7, #12]
 8000ec0:	725a      	strb	r2, [r3, #9]

    return sensor->calibration_loaded;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7a9b      	ldrb	r3, [r3, #10]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <ms5837_start_conversion>:

// Begynner ADC convertering, returnerer antall mikrosekunder til data er klart
// hvis ugyldig eller feil vil den returnere 0

uint16_t ms5837_start_conversion( ms5837_t *sensor, MS5837_SELECT_SENSOR type, MS5837_ADC_OSR osr )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
 8000edc:	4613      	mov	r3, r2
 8000ede:	70bb      	strb	r3, [r7, #2]
    if( !sensor )
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <ms5837_start_conversion+0x1a>
    {
        return 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e028      	b.n	8000f3c <ms5837_start_conversion+0x6c>
    }

    switch( type )
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <ms5837_start_conversion+0x26>
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d00e      	beq.n	8000f12 <ms5837_start_conversion+0x42>
 8000ef4:	e01b      	b.n	8000f2e <ms5837_start_conversion+0x5e>
    {
        case SENSOR_PRESSURE:
            ms5837_i2c_write( sensor, CMD_PRESSURE_OSR_BASE + adc_osr_settings[osr].offset );
 8000ef6:	78bb      	ldrb	r3, [r7, #2]
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <ms5837_start_conversion+0x74>)
 8000efa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000efe:	3340      	adds	r3, #64	; 0x40
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff5d 	bl	8000dc4 <ms5837_i2c_write>
            sensor->last_conversion = SENSOR_PRESSURE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	769a      	strb	r2, [r3, #26]
        break;
 8000f10:	e00f      	b.n	8000f32 <ms5837_start_conversion+0x62>

        case SENSOR_TEMPERATURE:
            ms5837_i2c_write( sensor, CMD_TEMPERATURE_OSR_BASE + adc_osr_settings[osr].offset );
 8000f12:	78bb      	ldrb	r3, [r7, #2]
 8000f14:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <ms5837_start_conversion+0x74>)
 8000f16:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000f1a:	3350      	adds	r3, #80	; 0x50
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff4f 	bl	8000dc4 <ms5837_i2c_write>
            sensor->last_conversion = SENSOR_TEMPERATURE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	769a      	strb	r2, [r3, #26]
        break;
 8000f2c:	e001      	b.n	8000f32 <ms5837_start_conversion+0x62>

        default:
     //       sensor->last_conversion = NUM_SENSOR_FIELDS+1; // TODO consider an invalid enum value
            return 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e004      	b.n	8000f3c <ms5837_start_conversion+0x6c>
    }

    return adc_osr_settings[osr].duration_us;
 8000f32:	78bb      	ldrb	r3, [r7, #2]
 8000f34:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <ms5837_start_conversion+0x74>)
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	885b      	ldrh	r3, [r3, #2]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000

08000f48 <ms5837_read_conversion>:
// Les sensor data, 24-bit unsigned (uint32_t)
// Lagres i objektet
// Returnerer 0 for feil, eller konverterignsverdien hvis OK

uint32_t ms5837_read_conversion( ms5837_t *sensor )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    if( !sensor || sensor->last_conversion >= NUM_SENSOR_FIELDS )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <ms5837_read_conversion+0x16>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7e9b      	ldrb	r3, [r3, #26]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d901      	bls.n	8000f62 <ms5837_read_conversion+0x1a>
    {
        return 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e025      	b.n	8000fae <ms5837_read_conversion+0x66>
    }

    uint8_t value[3] = { 0 };
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <ms5837_read_conversion+0x70>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	813b      	strh	r3, [r7, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	72bb      	strb	r3, [r7, #10]
    ms5837_i2c_read( sensor, CMD_READ, &value[0], 3 );
 8000f6c:	f107 0208 	add.w	r2, r7, #8
 8000f70:	2303      	movs	r3, #3
 8000f72:	2100      	movs	r1, #0
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff01 	bl	8000d7c <ms5837_i2c_read>

    uint32_t conversion = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
    conversion = value[0];
 8000f7e:	7a3b      	ldrb	r3, [r7, #8]
 8000f80:	60fb      	str	r3, [r7, #12]
    conversion = (conversion << 8) | value[1];
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	7a7a      	ldrb	r2, [r7, #9]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
    conversion = (conversion << 8) | value[2];
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	7aba      	ldrb	r2, [r7, #10]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]

    sensor->samples[sensor->last_conversion] = conversion;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7e9b      	ldrb	r3, [r3, #26]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	605a      	str	r2, [r3, #4]
    sensor->last_conversion = NUM_SENSOR_FIELDS; // invalidate
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	769a      	strb	r2, [r3, #26]

    return conversion;
 8000fac:	68fb      	ldr	r3, [r7, #12]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800dde8 	.word	0x0800dde8

08000fbc <ms5837_calculate>:

bool ms5837_calculate( ms5837_t *sensor )
{
 8000fbc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000fc0:	b0cd      	sub	sp, #308	; 0x134
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
    if( !sensor || !sensor->calibration_loaded )
 8000fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <ms5837_calculate+0x24>
 8000fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fd4:	7a9b      	ldrb	r3, [r3, #10]
 8000fd6:	f083 0301 	eor.w	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <ms5837_calculate+0x28>
    {
        return false;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e23d      	b.n	8001460 <ms5837_calculate+0x4a4>
    }

    if( !sensor->samples[0] || !sensor->samples[1] )
 8000fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <ms5837_calculate+0x3c>
 8000fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <ms5837_calculate+0x40>
    {
        return false;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e231      	b.n	8001460 <ms5837_calculate+0x4a4>
    }

    uint32_t sample_pressure = sensor->samples[SENSOR_PRESSURE];
 8000ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    uint32_t sample_temperature = sensor->samples[SENSOR_TEMPERATURE];
 8001006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    // Første Orden Konvertering

    // deltaTemp, 25-bit signed (int32_t)
    // dT = D2 - TREF
    //    = D2 - C5 * 2^8
    int32_t delta_temp = sample_temperature - (uint32_t)sensor->calibration_data[C5_TEMP_REFERENCE] * (1 << 8);
 8001010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001014:	8adb      	ldrh	r3, [r3, #22]
 8001016:	021a      	lsls	r2, r3, #8
 8001018:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    // Faktisk Temp - 41-bit signed(int64_t)
    // TEMP = 20°C + dT * TEMPSENS
    //      = 2000 + dT * C6 / 2^23
    int32_t temperature = 2000UL + delta_temp * (int64_t)sensor->calibration_data[C6_TEMP_COEFF] / ((uint32_t)1 << 23);
 8001022:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001026:	17da      	asrs	r2, r3, #31
 8001028:	469a      	mov	sl, r3
 800102a:	4693      	mov	fp, r2
 800102c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001030:	8b1b      	ldrh	r3, [r3, #24]
 8001032:	b29b      	uxth	r3, r3
 8001034:	2200      	movs	r2, #0
 8001036:	461c      	mov	r4, r3
 8001038:	4615      	mov	r5, r2
 800103a:	fb04 f20b 	mul.w	r2, r4, fp
 800103e:	fb0a f305 	mul.w	r3, sl, r5
 8001042:	4413      	add	r3, r2
 8001044:	fbaa 8904 	umull	r8, r9, sl, r4
 8001048:	444b      	add	r3, r9
 800104a:	4699      	mov	r9, r3
 800104c:	4642      	mov	r2, r8
 800104e:	464b      	mov	r3, r9
 8001050:	2b00      	cmp	r3, #0
 8001052:	da07      	bge.n	8001064 <ms5837_calculate+0xa8>
 8001054:	49e2      	ldr	r1, [pc, #904]	; (80013e0 <ms5837_calculate+0x424>)
 8001056:	1851      	adds	r1, r2, r1
 8001058:	6539      	str	r1, [r7, #80]	; 0x50
 800105a:	f143 0300 	adc.w	r3, r3, #0
 800105e:	657b      	str	r3, [r7, #84]	; 0x54
 8001060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	f04f 0100 	mov.w	r1, #0
 800106c:	0dd0      	lsrs	r0, r2, #23
 800106e:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001072:	15d9      	asrs	r1, r3, #23
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4613      	mov	r3, r2
 800107a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800107e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    // Trykk Offset - 41-bit signed (int64_t)
    // OFF = OFF_T1 + TCO * dT
    //     = C2 * 2^17 + (C4 * dT ) / 2^6
    int64_t pressure_offset = ((int64_t)sensor->calibration_data[C2_PRESSURE_OFFSET] * ((uint32_t)1 << 17))
 8001082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001086:	8a1b      	ldrh	r3, [r3, #16]
 8001088:	b29b      	uxth	r3, r3
 800108a:	2200      	movs	r2, #0
 800108c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001090:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001094:	f04f 0400 	mov.w	r4, #0
 8001098:	f04f 0500 	mov.w	r5, #0
 800109c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80010a0:	4613      	mov	r3, r2
 80010a2:	045d      	lsls	r5, r3, #17
 80010a4:	460b      	mov	r3, r1
 80010a6:	ea45 35d3 	orr.w	r5, r5, r3, lsr #15
 80010aa:	460b      	mov	r3, r1
 80010ac:	045c      	lsls	r4, r3, #17
                              + ((int64_t)sensor->calibration_data[C4_TEMP_PRESSURE_OFFSET_COEFF] * delta_temp)/(1 << 6);
 80010ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80010b2:	8a9b      	ldrh	r3, [r3, #20]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80010bc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80010c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010c4:	17da      	asrs	r2, r3, #31
 80010c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80010ca:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80010ce:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 80010d2:	464b      	mov	r3, r9
 80010d4:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 80010d8:	4652      	mov	r2, sl
 80010da:	fb02 f203 	mul.w	r2, r2, r3
 80010de:	465b      	mov	r3, fp
 80010e0:	4641      	mov	r1, r8
 80010e2:	fb01 f303 	mul.w	r3, r1, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	4642      	mov	r2, r8
 80010ea:	4651      	mov	r1, sl
 80010ec:	fba2 1201 	umull	r1, r2, r2, r1
 80010f0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80010f4:	460a      	mov	r2, r1
 80010f6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80010fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010fe:	4413      	add	r3, r2
 8001100:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001104:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8001108:	2b00      	cmp	r3, #0
 800110a:	da07      	bge.n	800111c <ms5837_calculate+0x160>
 800110c:	f112 013f 	adds.w	r1, r2, #63	; 0x3f
 8001110:	64b9      	str	r1, [r7, #72]	; 0x48
 8001112:	f143 0300 	adc.w	r3, r3, #0
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800111c:	f04f 0000 	mov.w	r0, #0
 8001120:	f04f 0100 	mov.w	r1, #0
 8001124:	0990      	lsrs	r0, r2, #6
 8001126:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800112a:	1199      	asrs	r1, r3, #6
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
    int64_t pressure_offset = ((int64_t)sensor->calibration_data[C2_PRESSURE_OFFSET] * ((uint32_t)1 << 17))
 8001130:	18a1      	adds	r1, r4, r2
 8001132:	6439      	str	r1, [r7, #64]	; 0x40
 8001134:	eb45 0303 	adc.w	r3, r5, r3
 8001138:	647b      	str	r3, [r7, #68]	; 0x44
 800113a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800113e:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108

    // Trykk Sensitivitet ved faktisk temp - 41-bit signed (int64_t)
    // SENS = SENS T1 + TCS * dT
    //      = C1 * 2^16 + (C3 * dT ) / 2^7
    int64_t pressure_sensitivity = (int64_t)sensor->calibration_data[C1_PRESSURE_SENSITIVITY] * ((uint32_t)1 << 16)
 8001142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001146:	89db      	ldrh	r3, [r3, #14]
 8001148:	b29b      	uxth	r3, r3
 800114a:	2200      	movs	r2, #0
 800114c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001150:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001154:	f04f 0400 	mov.w	r4, #0
 8001158:	f04f 0500 	mov.w	r5, #0
 800115c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8001160:	4613      	mov	r3, r2
 8001162:	041d      	lsls	r5, r3, #16
 8001164:	460b      	mov	r3, r1
 8001166:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 800116a:	460b      	mov	r3, r1
 800116c:	041c      	lsls	r4, r3, #16
                                   + ( (int64_t)sensor->calibration_data[C3_TEMP_PRESSURE_SENSITIVITY_COEFF] * delta_temp)/((uint32_t)1 << 7);
 800116e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001172:	8a5b      	ldrh	r3, [r3, #18]
 8001174:	b29b      	uxth	r3, r3
 8001176:	2200      	movs	r2, #0
 8001178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800117c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001180:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001184:	17da      	asrs	r2, r3, #31
 8001186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800118a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800118e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001192:	464b      	mov	r3, r9
 8001194:	e9d7 ab24 	ldrd	sl, fp, [r7, #144]	; 0x90
 8001198:	4652      	mov	r2, sl
 800119a:	fb02 f203 	mul.w	r2, r2, r3
 800119e:	465b      	mov	r3, fp
 80011a0:	4641      	mov	r1, r8
 80011a2:	fb01 f303 	mul.w	r3, r1, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	4642      	mov	r2, r8
 80011aa:	4651      	mov	r1, sl
 80011ac:	fba2 1201 	umull	r1, r2, r2, r1
 80011b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80011b4:	460a      	mov	r2, r1
 80011b6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80011ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80011be:	4413      	add	r3, r2
 80011c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80011c4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da07      	bge.n	80011dc <ms5837_calculate+0x220>
 80011cc:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 80011d0:	63b9      	str	r1, [r7, #56]	; 0x38
 80011d2:	f143 0300 	adc.w	r3, r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011dc:	f04f 0000 	mov.w	r0, #0
 80011e0:	f04f 0100 	mov.w	r1, #0
 80011e4:	09d0      	lsrs	r0, r2, #7
 80011e6:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80011ea:	11d9      	asrs	r1, r3, #7
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
    int64_t pressure_sensitivity = (int64_t)sensor->calibration_data[C1_PRESSURE_SENSITIVITY] * ((uint32_t)1 << 16)
 80011f0:	18a1      	adds	r1, r4, r2
 80011f2:	6339      	str	r1, [r7, #48]	; 0x30
 80011f4:	eb45 0303 	adc.w	r3, r5, r3
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
 80011fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80011fe:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100


    // Utreginger for andre ordens konvertering

    // Lav temp kompensajon (<20C)
    int32_t temp_i = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    int32_t offset_i = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    int32_t sensitivity_i = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    if( (temperature / 100U) < 20 )
 8001214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001218:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800121c:	f080 8082 	bcs.w	8001324 <ms5837_calculate+0x368>
    {
        // Ti = 11 * dT^2 / 2^35
         temp_i = ( 11 * (int64_t)delta_temp*(int64_t)delta_temp ) / ((uint64_t)1 << 35);
 8001220:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001224:	17da      	asrs	r2, r3, #31
 8001226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800122a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800122e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001232:	17da      	asrs	r2, r3, #31
 8001234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001238:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800123c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001240:	462b      	mov	r3, r5
 8001242:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8001246:	4642      	mov	r2, r8
 8001248:	fb02 f203 	mul.w	r2, r2, r3
 800124c:	464b      	mov	r3, r9
 800124e:	4621      	mov	r1, r4
 8001250:	fb01 f303 	mul.w	r3, r1, r3
 8001254:	4413      	add	r3, r2
 8001256:	4622      	mov	r2, r4
 8001258:	4641      	mov	r1, r8
 800125a:	fba2 1201 	umull	r1, r2, r2, r1
 800125e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001262:	460a      	mov	r2, r1
 8001264:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001268:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800126c:	4413      	add	r3, r2
 800126e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001272:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001276:	4622      	mov	r2, r4
 8001278:	462b      	mov	r3, r5
 800127a:	1891      	adds	r1, r2, r2
 800127c:	62b9      	str	r1, [r7, #40]	; 0x28
 800127e:	415b      	adcs	r3, r3
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001286:	4621      	mov	r1, r4
 8001288:	1851      	adds	r1, r2, r1
 800128a:	6239      	str	r1, [r7, #32]
 800128c:	4629      	mov	r1, r5
 800128e:	414b      	adcs	r3, r1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800129e:	4649      	mov	r1, r9
 80012a0:	008b      	lsls	r3, r1, #2
 80012a2:	4641      	mov	r1, r8
 80012a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80012a8:	4641      	mov	r1, r8
 80012aa:	008a      	lsls	r2, r1, #2
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	4603      	mov	r3, r0
 80012b2:	4622      	mov	r2, r4
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80012b8:	460b      	mov	r3, r1
 80012ba:	462a      	mov	r2, r5
 80012bc:	eb63 0302 	sbc.w	r3, r3, r2
 80012c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012c2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80012c6:	f04f 0000 	mov.w	r0, #0
 80012ca:	f04f 0100 	mov.w	r1, #0
 80012ce:	08d8      	lsrs	r0, r3, #3
 80012d0:	2100      	movs	r1, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        // OFFi = 31 * (TEMP - 2000)^2 / 2^3
         offset_i = ( 31 * (temperature-2000)*(temperature-2000) ) / (1 << 3);
 80012d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012dc:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 80012e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012e4:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80012e8:	fb03 f202 	mul.w	r2, r3, r2
 80012ec:	4613      	mov	r3, r2
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da00      	bge.n	80012f8 <ms5837_calculate+0x33c>
 80012f6:	3307      	adds	r3, #7
 80012f8:	10db      	asrs	r3, r3, #3
 80012fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

        // SENSi = 63 * (TEMP - 2000)^2 / 2^5
         sensitivity_i = ( 63 * (temperature-2000)*(temperature-2000) ) / (1 << 5);
 80012fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001302:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8001306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800130a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800130e:	fb03 f202 	mul.w	r2, r3, r2
 8001312:	4613      	mov	r3, r2
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	da00      	bge.n	800131e <ms5837_calculate+0x362>
 800131c:	331f      	adds	r3, #31
 800131e:	115b      	asrs	r3, r3, #5
 8001320:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    }

    // kalkuler andre orden elementer
    // OFF2 = OFF - OFFi
    int64_t offset_2 = pressure_offset - offset_i;
 8001324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001328:	17da      	asrs	r2, r3, #31
 800132a:	673b      	str	r3, [r7, #112]	; 0x70
 800132c:	677a      	str	r2, [r7, #116]	; 0x74
 800132e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001332:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001336:	4621      	mov	r1, r4
 8001338:	1a51      	subs	r1, r2, r1
 800133a:	61b9      	str	r1, [r7, #24]
 800133c:	4629      	mov	r1, r5
 800133e:	eb63 0301 	sbc.w	r3, r3, r1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001348:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

    // SENS2 = SENS - SENSi
    int64_t sensitivity_2 = pressure_sensitivity - sensitivity_i;
 800134c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001350:	17da      	asrs	r2, r3, #31
 8001352:	66bb      	str	r3, [r7, #104]	; 0x68
 8001354:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001356:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800135a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800135e:	4621      	mov	r1, r4
 8001360:	1a51      	subs	r1, r2, r1
 8001362:	6139      	str	r1, [r7, #16]
 8001364:	4629      	mov	r1, r5
 8001366:	eb63 0301 	sbc.w	r3, r3, r1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001370:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

    // TEMP2 = (TEMP - Ti)/100      degC
    int32_t temperature_2 = ( temperature - temp_i );
 8001374:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    // P2 = ( (D1*SENS2 / 2^21 - OFF2 ) / 2^15 ) / 100    milibar
    int32_t pressure_2 = ( ( (sample_pressure * sensitivity_2) / ((uint32_t)1 << 21) - offset_2 ) / ((uint32_t)1 << 15) );
 8001382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001386:	2200      	movs	r2, #0
 8001388:	663b      	str	r3, [r7, #96]	; 0x60
 800138a:	667a      	str	r2, [r7, #100]	; 0x64
 800138c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001390:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001394:	462a      	mov	r2, r5
 8001396:	fb02 f203 	mul.w	r2, r2, r3
 800139a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800139e:	4621      	mov	r1, r4
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80013aa:	4621      	mov	r1, r4
 80013ac:	fba2 1201 	umull	r1, r2, r2, r1
 80013b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013b4:	460a      	mov	r2, r1
 80013b6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80013ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013be:	4413      	add	r3, r2
 80013c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013c4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da0d      	bge.n	80013e8 <ms5837_calculate+0x42c>
 80013cc:	4905      	ldr	r1, [pc, #20]	; (80013e4 <ms5837_calculate+0x428>)
 80013ce:	1851      	adds	r1, r2, r1
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	f143 0300 	adc.w	r3, r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013dc:	e004      	b.n	80013e8 <ms5837_calculate+0x42c>
 80013de:	bf00      	nop
 80013e0:	007fffff 	.word	0x007fffff
 80013e4:	001fffff 	.word	0x001fffff
 80013e8:	f04f 0000 	mov.w	r0, #0
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	0d50      	lsrs	r0, r2, #21
 80013f2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80013f6:	1559      	asrs	r1, r3, #21
 80013f8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80013fc:	1a84      	subs	r4, r0, r2
 80013fe:	65bc      	str	r4, [r7, #88]	; 0x58
 8001400:	eb61 0303 	sbc.w	r3, r1, r3
 8001404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800140a:	2b00      	cmp	r3, #0
 800140c:	da08      	bge.n	8001420 <ms5837_calculate+0x464>
 800140e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001412:	1851      	adds	r1, r2, r1
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	f143 0300 	adc.w	r3, r3, #0
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001420:	f04f 0000 	mov.w	r0, #0
 8001424:	f04f 0100 	mov.w	r1, #0
 8001428:	0bd0      	lsrs	r0, r2, #15
 800142a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800142e:	13d9      	asrs	r1, r3, #15
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4613      	mov	r3, r2
 8001436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    // Lagre resultatene i  sensor structuren
    sensor->measurements[SENSOR_PRESSURE] = pressure_2;
 800143a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800143e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->measurements[SENSOR_TEMPERATURE] = temperature_2;
 8001444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001448:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800144c:	629a      	str	r2, [r3, #40]	; 0x28

    // Nullstill
    sensor->samples[SENSOR_PRESSURE] = 0;
 800144e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
    sensor->samples[SENSOR_TEMPERATURE] = 0;
 8001456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]

    return true;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001466:	46bd      	mov	sp, r7
 8001468:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <ms5837_temperature_celcius>:

// ---------------------------------------------------------------------

float ms5837_temperature_celcius( ms5837_t *sensor )
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    return sensor->measurements[SENSOR_TEMPERATURE] / 100.0f;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001484:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014a0 <ms5837_temperature_celcius+0x30>
 8001488:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800148c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	42c80000 	.word	0x42c80000

080014a4 <ms5837_pressure_bar>:
//}

// ---------------------------------------------------------------------

float ms5837_pressure_bar( ms5837_t *sensor )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    return sensor->measurements[SENSOR_PRESSURE] / 100000.0f;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014d4 <ms5837_pressure_bar+0x30>
 80014bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014c0:	eef0 7a66 	vmov.f32	s15, s13
}
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	47c35000 	.word	0x47c35000

080014d8 <crc4>:

// ---------------------------------------------------------------------

// RROM is 7 unsigned int16 values for 112-bits
uint8_t crc4( uint16_t n_prom[7] )
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    uint16_t crc_rem = 0; // CRC remainder
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]

    n_prom[0] = n_prom[0] & 0x0FFF; // CRC byte is replaced by 0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	801a      	strh	r2, [r3, #0]
    n_prom[7] = 0;                  // Subsidiary value, set to 0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	330e      	adds	r3, #14
 80014f6:	2200      	movs	r2, #0
 80014f8:	801a      	strh	r2, [r3, #0]

    for( uint8_t byte = 0; byte < 16; byte++ )
 80014fa:	2300      	movs	r3, #0
 80014fc:	737b      	strb	r3, [r7, #13]
 80014fe:	e03c      	b.n	800157a <crc4+0xa2>
    {
        // choose LSB or MSB
        if( byte % 2 == 1 )
 8001500:	7b7b      	ldrb	r3, [r7, #13]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00f      	beq.n	800152c <crc4+0x54>
        {
            crc_rem ^= (unsigned short)(n_prom[byte >> 1] & 0x00FF);
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b21b      	sxth	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	b21a      	sxth	r2, r3
 8001520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001524:	4053      	eors	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	81fb      	strh	r3, [r7, #14]
 800152a:	e00b      	b.n	8001544 <crc4+0x6c>
        }
        else
        {
            crc_rem ^= (unsigned short)(n_prom[byte >>1 ] >> 8);
 800152c:	7b7b      	ldrb	r3, [r7, #13]
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b29a      	uxth	r2, r3
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	4053      	eors	r3, r2
 8001542:	81fb      	strh	r3, [r7, #14]
        }

        for( uint8_t n_bit = 8; n_bit > 0; n_bit-- )
 8001544:	2308      	movs	r3, #8
 8001546:	733b      	strb	r3, [r7, #12]
 8001548:	e011      	b.n	800156e <crc4+0x96>
        {
            if( crc_rem & 0x8000 )
 800154a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154e:	2b00      	cmp	r3, #0
 8001550:	da07      	bge.n	8001562 <crc4+0x8a>
            {
                crc_rem = (crc_rem << 1) ^ 0x3000;
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	b21b      	sxth	r3, r3
 8001558:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800155c:	b21b      	sxth	r3, r3
 800155e:	81fb      	strh	r3, [r7, #14]
 8001560:	e002      	b.n	8001568 <crc4+0x90>
            }
            else
            {
                crc_rem = (crc_rem << 1);
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	81fb      	strh	r3, [r7, #14]
        for( uint8_t n_bit = 8; n_bit > 0; n_bit-- )
 8001568:	7b3b      	ldrb	r3, [r7, #12]
 800156a:	3b01      	subs	r3, #1
 800156c:	733b      	strb	r3, [r7, #12]
 800156e:	7b3b      	ldrb	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ea      	bne.n	800154a <crc4+0x72>
    for( uint8_t byte = 0; byte < 16; byte++ )
 8001574:	7b7b      	ldrb	r3, [r7, #13]
 8001576:	3301      	adds	r3, #1
 8001578:	737b      	strb	r3, [r7, #13]
 800157a:	7b7b      	ldrb	r3, [r7, #13]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d9bf      	bls.n	8001500 <crc4+0x28>
            }
        }
    }

    crc_rem = ((crc_rem >> 12) & 0x000F); // final 4-bit remainder is CRC code
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	0b1b      	lsrs	r3, r3, #12
 8001584:	81fb      	strh	r3, [r7, #14]

    return (crc_rem ^ 0x00);
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2220      	movs	r2, #32
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00a fd56 	bl	800c062 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015cc:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80015d2:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015e0:	2204      	movs	r2, #4
 80015e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_ADC1_Init+0xe8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <MX_ADC1_Init+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_ADC1_Init+0xe8>)
 8001606:	2200      	movs	r2, #0
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_ADC1_Init+0xe8>)
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_ADC1_Init+0xe8>)
 8001614:	2200      	movs	r2, #0
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_ADC1_Init+0xe8>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001620:	4817      	ldr	r0, [pc, #92]	; (8001680 <MX_ADC1_Init+0xe8>)
 8001622:	f002 ff39 	bl	8004498 <HAL_ADC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800162c:	f001 f860 	bl	80026f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4811      	ldr	r0, [pc, #68]	; (8001680 <MX_ADC1_Init+0xe8>)
 800163c:	f004 fc08 	bl	8005e50 <HAL_ADCEx_MultiModeConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001646:	f001 f853 	bl	80026f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_ADC1_Init+0xec>)
 800164c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800164e:	2306      	movs	r3, #6
 8001650:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001656:	237f      	movs	r3, #127	; 0x7f
 8001658:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800165a:	2304      	movs	r3, #4
 800165c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <MX_ADC1_Init+0xe8>)
 8001668:	f003 fc86 	bl	8004f78 <HAL_ADC_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001672:	f001 f83d 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3730      	adds	r7, #48	; 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000020c 	.word	0x2000020c
 8001684:	04300002 	.word	0x04300002

08001688 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b09e      	sub	sp, #120	; 0x78
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2254      	movs	r2, #84	; 0x54
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00a fcda 	bl	800c062 <memset>
  if(adcHandle->Instance==ADC1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b6:	d167      	bne.n	8001788 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016c2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4618      	mov	r0, r3
 80016ca:	f007 fe7f 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80016d4:	f001 f80c 	bl	80026f0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_ADC_MspInit+0x108>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <HAL_ADC_MspInit+0x108>)
 80016de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_ADC_MspInit+0x108>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_ADC_MspInit+0x108>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <HAL_ADC_MspInit+0x108>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_ADC_MspInit+0x108>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_Temp_1_Pin|ADC_Temp_2_Pin|ADC_Temp_3_Pin|ADC_Temp_4_Pin;
 8001708:	230f      	movs	r3, #15
 800170a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170c:	2303      	movs	r3, #3
 800170e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f006 f927 	bl	8007970 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 8001724:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_ADC_MspInit+0x110>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 800172a:	2205      	movs	r2, #5
 800172c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 8001742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001746:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 800174a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 800175e:	f004 feb3 	bl	80064c8 <HAL_DMA_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001768:	f000 ffc2 	bl	80026f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_ADC_MspInit+0x10c>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2103      	movs	r1, #3
 800177c:	2012      	movs	r0, #18
 800177e:	f004 fd7c 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001782:	2012      	movs	r0, #18
 8001784:	f004 fd93 	bl	80062ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001788:	bf00      	nop
 800178a:	3778      	adds	r7, #120	; 0x78
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	20000278 	.word	0x20000278
 8001798:	40020008 	.word	0x40020008

0800179c <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_CORDIC_Init+0x20>)
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <MX_CORDIC_Init+0x24>)
 80017a4:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_CORDIC_Init+0x20>)
 80017a8:	f004 fc5a 	bl	8006060 <HAL_CORDIC_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80017b2:	f000 ff9d 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200002d8 	.word	0x200002d8
 80017c0:	40020c00 	.word	0x40020c00

080017c4 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_CORDIC_MspInit+0x38>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10b      	bne.n	80017ee <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_CORDIC_MspInit+0x3c>)
 80017d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_CORDIC_MspInit+0x3c>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6493      	str	r3, [r2, #72]	; 0x48
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_CORDIC_MspInit+0x3c>)
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021000 	.word	0x40021000

08001804 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <MX_CRC_Init+0x3c>)
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <MX_CRC_Init+0x40>)
 800180c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_CRC_Init+0x3c>)
 8001810:	2200      	movs	r2, #0
 8001812:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_CRC_Init+0x3c>)
 8001816:	2200      	movs	r2, #0
 8001818:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_CRC_Init+0x3c>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_CRC_Init+0x3c>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_CRC_Init+0x3c>)
 8001828:	2201      	movs	r2, #1
 800182a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_CRC_Init+0x3c>)
 800182e:	f004 fd59 	bl	80062e4 <HAL_CRC_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001838:	f000 ff5a 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000300 	.word	0x20000300
 8001844:	40023000 	.word	0x40023000

08001848 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_CRC_MspInit+0x38>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10b      	bne.n	8001872 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_CRC_MspInit+0x3c>)
 800185c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_CRC_MspInit+0x3c>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001864:	6493      	str	r3, [r2, #72]	; 0x48
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_CRC_MspInit+0x3c>)
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023000 	.word	0x40023000
 8001884:	40021000 	.word	0x40021000

08001888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_DMA_Init+0x50>)
 8001890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001892:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <MX_DMA_Init+0x50>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6493      	str	r3, [r2, #72]	; 0x48
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_DMA_Init+0x50>)
 800189c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_DMA_Init+0x50>)
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <MX_DMA_Init+0x50>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6493      	str	r3, [r2, #72]	; 0x48
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_DMA_Init+0x50>)
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	200b      	movs	r0, #11
 80018c4:	f004 fcd9 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018c8:	200b      	movs	r0, #11
 80018ca:	f004 fcf0 	bl	80062ae <HAL_NVIC_EnableIRQ>

}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000

080018dc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_FDCAN1_Init+0x88>)
 80018e2:	4a21      	ldr	r2, [pc, #132]	; (8001968 <MX_FDCAN1_Init+0x8c>)
 80018e4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <MX_FDCAN1_Init+0x88>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_FDCAN1_Init+0x88>)
 80018ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018f2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_FDCAN1_Init+0x88>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_FDCAN1_Init+0x88>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001902:	2200      	movs	r2, #0
 8001904:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001908:	2200      	movs	r2, #0
 800190a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_FDCAN1_Init+0x88>)
 800190e:	2201      	movs	r2, #1
 8001910:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 44;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001914:	222c      	movs	r2, #44	; 0x2c
 8001916:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 125;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <MX_FDCAN1_Init+0x88>)
 800191a:	227d      	movs	r2, #125	; 0x7d
 800191c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 44;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001920:	222c      	movs	r2, #44	; 0x2c
 8001922:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001926:	2202      	movs	r2, #2
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 12;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_FDCAN1_Init+0x88>)
 800192c:	220c      	movs	r2, #12
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 21;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001932:	2215      	movs	r2, #21
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 12;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001938:	220c      	movs	r2, #12
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_FDCAN1_Init+0x88>)
 800193e:	2201      	movs	r2, #1
 8001940:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001944:	2200      	movs	r2, #0
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_FDCAN1_Init+0x88>)
 800194a:	2200      	movs	r2, #0
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_FDCAN1_Init+0x88>)
 8001950:	f005 f886 	bl	8006a60 <HAL_FDCAN_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800195a:	f000 fec9 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000388 	.word	0x20000388
 8001968:	40006400 	.word	0x40006400

0800196c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b09e      	sub	sp, #120	; 0x78
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2254      	movs	r2, #84	; 0x54
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00a fb68 	bl	800c062 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <HAL_FDCAN_MspInit+0xcc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d149      	bne.n	8001a30 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80019a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f007 fd0d 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80019b8:	f000 fe9a 	bl	80026f0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_FDCAN_MspInit+0xd0>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_FDCAN_MspInit+0xd0>)
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_FDCAN_MspInit+0xd0>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_FDCAN_MspInit+0xd0>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_FDCAN_MspInit+0xd0>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_FDCAN_MspInit+0xd0>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019fe:	2309      	movs	r3, #9
 8001a00:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f005 ffb0 	bl	8007970 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2015      	movs	r0, #21
 8001a16:	f004 fc30 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001a1a:	2015      	movs	r0, #21
 8001a1c:	f004 fc47 	bl	80062ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2016      	movs	r0, #22
 8001a26:	f004 fc28 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001a2a:	2016      	movs	r0, #22
 8001a2c:	f004 fc3f 	bl	80062ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001a30:	bf00      	nop
 8001a32:	3778      	adds	r7, #120	; 0x78
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40006400 	.word	0x40006400
 8001a3c:	40021000 	.word	0x40021000

08001a40 <CANFD_Init>:
  }
}

/* USER CODE BEGIN 1 */
/* --------------------CANFD-------------------- */
void CANFD_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af02      	add	r7, sp, #8

	/* ID reception filter: Rx FIFO 0 */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <CANFD_Init+0xd0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8001a4c:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <CANFD_Init+0xd0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <CANFD_Init+0xd0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <CANFD_Init+0xd0>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	60da      	str	r2, [r3, #12]

	/*Id-er innenfor ID1 og ID2 slippes gjennom*/
	sFilterConfig.FilterID1 = Kommunikasjon_start;
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <CANFD_Init+0xd0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = Kommunikasjon_slutt;
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <CANFD_Init+0xd0>)
 8001a66:	223f      	movs	r2, #63	; 0x3f
 8001a68:	615a      	str	r2, [r3, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8001a6a:	4929      	ldr	r1, [pc, #164]	; (8001b10 <CANFD_Init+0xd0>)
 8001a6c:	4829      	ldr	r0, [pc, #164]	; (8001b14 <CANFD_Init+0xd4>)
 8001a6e:	f005 f951 	bl	8006d14 <HAL_FDCAN_ConfigFilter>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <CANFD_Init+0x3c>
		Error_Handler();
 8001a78:	f000 fe3a 	bl	80026f0 <Error_Handler>
	}

	/* ID reception filter: Rx FIFO 1 */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <CANFD_Init+0xd0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <CANFD_Init+0xd0>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <CANFD_Init+0xd0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <CANFD_Init+0xd0>)
 8001a90:	2202      	movs	r2, #2
 8001a92:	60da      	str	r2, [r3, #12]

	/*Id-er innenfor ID1 og ID2 slippes gjennom*/
	sFilterConfig.FilterID1 = test_start;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <CANFD_Init+0xd0>)
 8001a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = test_slutt;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <CANFD_Init+0xd0>)
 8001a9e:	f240 22ff 	movw	r2, #767	; 0x2ff
 8001aa2:	615a      	str	r2, [r3, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8001aa4:	491a      	ldr	r1, [pc, #104]	; (8001b10 <CANFD_Init+0xd0>)
 8001aa6:	481b      	ldr	r0, [pc, #108]	; (8001b14 <CANFD_Init+0xd4>)
 8001aa8:	f005 f934 	bl	8006d14 <HAL_FDCAN_ConfigFilter>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <CANFD_Init+0x76>
		Error_Handler();
 8001ab2:	f000 fe1d 	bl	80026f0 <Error_Handler>
	}

	/*Configurerer det globale filteret*/
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK){
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	2202      	movs	r2, #2
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4814      	ldr	r0, [pc, #80]	; (8001b14 <CANFD_Init+0xd4>)
 8001ac2:	f005 f981 	bl	8006dc8 <HAL_FDCAN_ConfigGlobalFilter>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <CANFD_Init+0x90>
 		Error_Handler();
 8001acc:	f000 fe10 	bl	80026f0 <Error_Handler>
 	}

	/*Start CAN: Registere for initialisering av perifer og filter verdier låses*/
 	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 8001ad0:	4810      	ldr	r0, [pc, #64]	; (8001b14 <CANFD_Init+0xd4>)
 8001ad2:	f005 f9aa 	bl	8006e2a <HAL_FDCAN_Start>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <CANFD_Init+0xa0>
 		Error_Handler();
 8001adc:	f000 fe08 	bl	80026f0 <Error_Handler>
 	//if (HAL_FDCAN_Stop(&hfdcan1) != HAL_OK){
 	//	Error_Handler();
 	//}

	/*Interrupt handler aktivering for innkommende meldinger*/
 	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <CANFD_Init+0xd4>)
 8001ae6:	f005 fb45 	bl	8007174 <HAL_FDCAN_ActivateNotification>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <CANFD_Init+0xb4>
 		Error_Handler();
 8001af0:	f000 fdfe 	bl	80026f0 <Error_Handler>
 	}
 	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8001af4:	2200      	movs	r2, #0
 8001af6:	2108      	movs	r1, #8
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <CANFD_Init+0xd4>)
 8001afa:	f005 fb3b 	bl	8007174 <HAL_FDCAN_ActivateNotification>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <CANFD_Init+0xc8>
 	   Error_Handler();
 8001b04:	f000 fdf4 	bl	80026f0 <Error_Handler>
 	}
	/* ____________________CANFD____________________ */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000324 	.word	0x20000324
 8001b14:	20000388 	.word	0x20000388

08001b18 <SendData>:
 *data: 	Liste av dataen som skal sendes i meldingen
 *size: 	Antall bytes "data" inneholder, uint8_t format
 *			Aksepterte verdier: 1-8, 12, 16, 20, 24, 32, 48, 64
 *datatype: Format "data" har
 *			Aksepterte verdier: uint8, uint16, float*/
int SendData(uint16_t adr, void* data, uint8_t size, DataType dataType) {
 8001b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b1c:	b095      	sub	sp, #84	; 0x54
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	61b9      	str	r1, [r7, #24]
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	83fb      	strh	r3, [r7, #30]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	777b      	strb	r3, [r7, #29]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	773b      	strb	r3, [r7, #28]
    if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) <= 0) {
 8001b32:	48cf      	ldr	r0, [pc, #828]	; (8001e70 <SendData+0x358>)
 8001b34:	f005 fb0c 	bl	8007150 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <SendData+0x2a>
        return 2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e23f      	b.n	8001fc2 <SendData+0x4aa>
    }
    /*CANFD melding Datalengde velges*/
	uint8_t data_L;
	switch(size){
 8001b42:	7f7b      	ldrb	r3, [r7, #29]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	2b3f      	cmp	r3, #63	; 0x3f
 8001b48:	f200 80c0 	bhi.w	8001ccc <SendData+0x1b4>
 8001b4c:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <SendData+0x3c>)
 8001b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b52:	bf00      	nop
 8001b54:	08001c55 	.word	0x08001c55
 8001b58:	08001c5d 	.word	0x08001c5d
 8001b5c:	08001c65 	.word	0x08001c65
 8001b60:	08001c6d 	.word	0x08001c6d
 8001b64:	08001c75 	.word	0x08001c75
 8001b68:	08001c7d 	.word	0x08001c7d
 8001b6c:	08001c85 	.word	0x08001c85
 8001b70:	08001c8d 	.word	0x08001c8d
 8001b74:	08001ccd 	.word	0x08001ccd
 8001b78:	08001ccd 	.word	0x08001ccd
 8001b7c:	08001ccd 	.word	0x08001ccd
 8001b80:	08001c95 	.word	0x08001c95
 8001b84:	08001ccd 	.word	0x08001ccd
 8001b88:	08001ccd 	.word	0x08001ccd
 8001b8c:	08001ccd 	.word	0x08001ccd
 8001b90:	08001c9d 	.word	0x08001c9d
 8001b94:	08001ccd 	.word	0x08001ccd
 8001b98:	08001ccd 	.word	0x08001ccd
 8001b9c:	08001ccd 	.word	0x08001ccd
 8001ba0:	08001ca5 	.word	0x08001ca5
 8001ba4:	08001ccd 	.word	0x08001ccd
 8001ba8:	08001ccd 	.word	0x08001ccd
 8001bac:	08001ccd 	.word	0x08001ccd
 8001bb0:	08001cad 	.word	0x08001cad
 8001bb4:	08001ccd 	.word	0x08001ccd
 8001bb8:	08001ccd 	.word	0x08001ccd
 8001bbc:	08001ccd 	.word	0x08001ccd
 8001bc0:	08001ccd 	.word	0x08001ccd
 8001bc4:	08001ccd 	.word	0x08001ccd
 8001bc8:	08001ccd 	.word	0x08001ccd
 8001bcc:	08001ccd 	.word	0x08001ccd
 8001bd0:	08001cb5 	.word	0x08001cb5
 8001bd4:	08001ccd 	.word	0x08001ccd
 8001bd8:	08001ccd 	.word	0x08001ccd
 8001bdc:	08001ccd 	.word	0x08001ccd
 8001be0:	08001ccd 	.word	0x08001ccd
 8001be4:	08001ccd 	.word	0x08001ccd
 8001be8:	08001ccd 	.word	0x08001ccd
 8001bec:	08001ccd 	.word	0x08001ccd
 8001bf0:	08001ccd 	.word	0x08001ccd
 8001bf4:	08001ccd 	.word	0x08001ccd
 8001bf8:	08001ccd 	.word	0x08001ccd
 8001bfc:	08001ccd 	.word	0x08001ccd
 8001c00:	08001ccd 	.word	0x08001ccd
 8001c04:	08001ccd 	.word	0x08001ccd
 8001c08:	08001ccd 	.word	0x08001ccd
 8001c0c:	08001ccd 	.word	0x08001ccd
 8001c10:	08001cbd 	.word	0x08001cbd
 8001c14:	08001ccd 	.word	0x08001ccd
 8001c18:	08001ccd 	.word	0x08001ccd
 8001c1c:	08001ccd 	.word	0x08001ccd
 8001c20:	08001ccd 	.word	0x08001ccd
 8001c24:	08001ccd 	.word	0x08001ccd
 8001c28:	08001ccd 	.word	0x08001ccd
 8001c2c:	08001ccd 	.word	0x08001ccd
 8001c30:	08001ccd 	.word	0x08001ccd
 8001c34:	08001ccd 	.word	0x08001ccd
 8001c38:	08001ccd 	.word	0x08001ccd
 8001c3c:	08001ccd 	.word	0x08001ccd
 8001c40:	08001ccd 	.word	0x08001ccd
 8001c44:	08001ccd 	.word	0x08001ccd
 8001c48:	08001ccd 	.word	0x08001ccd
 8001c4c:	08001ccd 	.word	0x08001ccd
 8001c50:	08001cc5 	.word	0x08001cc5
	  case 1:
		  data_L = 0x01;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c5a:	e03c      	b.n	8001cd6 <SendData+0x1be>
	  case 2:
		  data_L = 0x02;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c62:	e038      	b.n	8001cd6 <SendData+0x1be>
	  case 3:
		  data_L = 0x03;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c6a:	e034      	b.n	8001cd6 <SendData+0x1be>
	  case 4:	// 4 bytes	-> 4 uint8, 2 uint16, 1 float
		  data_L = 0x04;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c72:	e030      	b.n	8001cd6 <SendData+0x1be>
	  case 5:
		  data_L = 0x05;
 8001c74:	2305      	movs	r3, #5
 8001c76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c7a:	e02c      	b.n	8001cd6 <SendData+0x1be>
	  case 6:
		  data_L = 0x06;
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c82:	e028      	b.n	8001cd6 <SendData+0x1be>
	  case 7:
		  data_L = 0x07;
 8001c84:	2307      	movs	r3, #7
 8001c86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c8a:	e024      	b.n	8001cd6 <SendData+0x1be>
	  case 8:	// 8 bytes	-> 8 uint8, 4 uint16, 2 float
		  data_L = 0x08;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c92:	e020      	b.n	8001cd6 <SendData+0x1be>
	  case 12:	// 12 bytes	-> 3 float
		  data_L = 0x09;
 8001c94:	2309      	movs	r3, #9
 8001c96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001c9a:	e01c      	b.n	8001cd6 <SendData+0x1be>
	  case 16:	// 16 bytes	-> 4 float
		  data_L = 0x0A;
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001ca2:	e018      	b.n	8001cd6 <SendData+0x1be>
	  case 20:	// 20 bytes	-> 5 float
		  data_L = 0x0B;
 8001ca4:	230b      	movs	r3, #11
 8001ca6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001caa:	e014      	b.n	8001cd6 <SendData+0x1be>
	  case 24:	// 24 bytes	-> 6 float
		  data_L = 0x0C;
 8001cac:	230c      	movs	r3, #12
 8001cae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001cb2:	e010      	b.n	8001cd6 <SendData+0x1be>
	  case 32:	// 32 bytes	-> 8 float
		  data_L = 0x0D;
 8001cb4:	230d      	movs	r3, #13
 8001cb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001cba:	e00c      	b.n	8001cd6 <SendData+0x1be>
	  case 48:	// 48 bytes	-> 12 float
		  data_L = 0x0E;
 8001cbc:	230e      	movs	r3, #14
 8001cbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001cc2:	e008      	b.n	8001cd6 <SendData+0x1be>
	  case 64:	// 64 bytes	-> 16 float
		  data_L = 0x0F;
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  break;
 8001cca:	e004      	b.n	8001cd6 <SendData+0x1be>
	  default:	// 0 bytes	-> 0 float
		  data_L = 0x00;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  return 5;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e175      	b.n	8001fc2 <SendData+0x4aa>
	 * ErrorStateIndicator: Sender ut Error meldinger på bussen
	 * BitrRateSwitch: Aktivert
	 * melding format: FDCAN
	 * TxEvent: Aktiverer buffer for å hente sendt data
	 * MessageMarker: Markør for melding (satt til adresse)*/
	TxHeader.Identifier = adr;
 8001cd6:	8bfb      	ldrh	r3, [r7, #30]
 8001cd8:	4a66      	ldr	r2, [pc, #408]	; (8001e74 <SendData+0x35c>)
 8001cda:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001cdc:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <SendData+0x35c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001ce2:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <SendData+0x35c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = data_L; // FDCAN_DLC_BYTES_1
 8001ce8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cec:	4a61      	ldr	r2, [pc, #388]	; (8001e74 <SendData+0x35c>)
 8001cee:	60d3      	str	r3, [r2, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001cf0:	4b60      	ldr	r3, [pc, #384]	; (8001e74 <SendData+0x35c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <SendData+0x35c>)
 8001cf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cfc:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <SendData+0x35c>)
 8001d00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d04:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8001d06:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <SendData+0x35c>)
 8001d08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d0c:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = adr;
 8001d0e:	8bfb      	ldrh	r3, [r7, #30]
 8001d10:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <SendData+0x35c>)
 8001d12:	6213      	str	r3, [r2, #32]
	 * Lengde på buffer lister settes
	 * 8 bytes -> uint8 liste med 8 plasser
	 * 8 bytes -> uint16 liste med 4 plasser
	 * 8 bytes -> float liste med 2 plasser*/
	uint8_t* dataInHex;
	uint8_t buffer8[size];
 8001d14:	7f79      	ldrb	r1, [r7, #29]
 8001d16:	466b      	mov	r3, sp
 8001d18:	461e      	mov	r6, r3
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d20:	b2cb      	uxtb	r3, r1
 8001d22:	2200      	movs	r2, #0
 8001d24:	461c      	mov	r4, r3
 8001d26:	4615      	mov	r5, r2
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	00eb      	lsls	r3, r5, #3
 8001d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d36:	00e2      	lsls	r2, r4, #3
 8001d38:	b2cb      	uxtb	r3, r1
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	617a      	str	r2, [r7, #20]
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	00c3      	lsls	r3, r0, #3
 8001d50:	4620      	mov	r0, r4
 8001d52:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d56:	4620      	mov	r0, r4
 8001d58:	00c2      	lsls	r2, r0, #3
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	3307      	adds	r3, #7
 8001d5e:	08db      	lsrs	r3, r3, #3
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	ebad 0d03 	sub.w	sp, sp, r3
 8001d66:	466b      	mov	r3, sp
 8001d68:	3300      	adds	r3, #0
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t buffer16[size/2];
 8001d6c:	7f7b      	ldrb	r3, [r7, #29]
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	1e4b      	subs	r3, r1, #1
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
 8001d78:	460a      	mov	r2, r1
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60ba      	str	r2, [r7, #8]
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	0103      	lsls	r3, r0, #4
 8001d90:	4620      	mov	r0, r4
 8001d92:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001d96:	4620      	mov	r0, r4
 8001d98:	0102      	lsls	r2, r0, #4
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603a      	str	r2, [r7, #0]
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dae:	4628      	mov	r0, r5
 8001db0:	0103      	lsls	r3, r0, #4
 8001db2:	4620      	mov	r0, r4
 8001db4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001db8:	4620      	mov	r0, r4
 8001dba:	0102      	lsls	r2, r0, #4
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	3307      	adds	r3, #7
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	ebad 0d03 	sub.w	sp, sp, r3
 8001dca:	466b      	mov	r3, sp
 8001dcc:	3301      	adds	r3, #1
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t bufferfloat[size/4];
 8001dd4:	7f7b      	ldrb	r3, [r7, #29]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	1e4b      	subs	r3, r1, #1
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de0:	460a      	mov	r2, r1
 8001de2:	2300      	movs	r3, #0
 8001de4:	4692      	mov	sl, r2
 8001de6:	469b      	mov	fp, r3
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001df4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001df8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	2300      	movs	r3, #0
 8001e00:	4690      	mov	r8, r2
 8001e02:	4699      	mov	r9, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001e10:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001e14:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	3307      	adds	r3, #7
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	ebad 0d03 	sub.w	sp, sp, r3
 8001e26:	466b      	mov	r3, sp
 8001e28:	3303      	adds	r3, #3
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24

	/*Velger riktig prossess etter hva dataType som formateres til hex*/
	switch (dataType){
 8001e30:	7f3b      	ldrb	r3, [r7, #28]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d065      	beq.n	8001f02 <SendData+0x3ea>
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	f300 80af 	bgt.w	8001f9a <SendData+0x482>
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <SendData+0x32e>
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d029      	beq.n	8001e98 <SendData+0x380>
 8001e44:	e0a9      	b.n	8001f9a <SendData+0x482>
		case uint8:
			/* uint8_t til Hex
			 * dataInHex: Lenge = antall bytes, lagrer dataen i big endian format*/
			memcpy(buffer8, data, size);
 8001e46:	7f7b      	ldrb	r3, [r7, #29]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e4e:	f00a fa0a 	bl	800c266 <memcpy>
			dataInHex = malloc(size);
 8001e52:	7f7b      	ldrb	r3, [r7, #29]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f009 f92b 	bl	800b0b0 <malloc>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	64bb      	str	r3, [r7, #72]	; 0x48
		    if (!dataInHex) {
 8001e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <SendData+0x350>
		    	return 3;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0ab      	b.n	8001fc0 <SendData+0x4a8>
		    }
			for (int i = 0; i < size; i++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e6c:	e00f      	b.n	8001e8e <SendData+0x376>
 8001e6e:	bf00      	nop
 8001e70:	20000388 	.word	0x20000388
 8001e74:	2000033c 	.word	0x2000033c
			  dataInHex[i] = buffer8[i];
 8001e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e7c:	4413      	add	r3, r2
 8001e7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e82:	440a      	add	r2, r1
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++) {
 8001e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8e:	7f7b      	ldrb	r3, [r7, #29]
 8001e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbf0      	blt.n	8001e78 <SendData+0x360>
			}
			break;
 8001e96:	e082      	b.n	8001f9e <SendData+0x486>
		case uint16:
			// uint16_t til Hex
			memcpy(buffer16, data, size);
 8001e98:	7f7b      	ldrb	r3, [r7, #29]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	69b9      	ldr	r1, [r7, #24]
 8001e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ea0:	f00a f9e1 	bl	800c266 <memcpy>

			dataInHex = malloc(size*2);
 8001ea4:	7f7b      	ldrb	r3, [r7, #29]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f009 f901 	bl	800b0b0 <malloc>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	64bb      	str	r3, [r7, #72]	; 0x48
		    if (!dataInHex) {
 8001eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <SendData+0x3a4>
		    	return 3;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e081      	b.n	8001fc0 <SendData+0x4a8>
		    }
			for (int i = 0; i < size; i++) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec0:	e01a      	b.n	8001ef8 <SendData+0x3e0>
				dataInHex[i*2 + 0] = (buffer16[i] >> 8) & 0xFF;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ec6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed6:	440b      	add	r3, r1
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
				dataInHex[i*2 + 1] =  buffer16[i] & 0xFF;
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ee0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	3301      	adds	r3, #1
 8001eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eec:	4413      	add	r3, r2
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++) {
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ef8:	7f7b      	ldrb	r3, [r7, #29]
 8001efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbe0      	blt.n	8001ec2 <SendData+0x3aa>
			}
			break;
 8001f00:	e04d      	b.n	8001f9e <SendData+0x486>
		case float32:
			/* float til Hex
			 * bufferfloat: binær reprensentasjon av float listen,
			 * dataInHex: Bruker big endian*/
			memcpy(bufferfloat, data, size);
 8001f02:	7f7b      	ldrb	r3, [r7, #29]
 8001f04:	461a      	mov	r2, r3
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f0a:	f00a f9ac 	bl	800c266 <memcpy>
			dataInHex = malloc(size*4);
 8001f0e:	7f7b      	ldrb	r3, [r7, #29]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f009 f8cc 	bl	800b0b0 <malloc>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
		    if (!dataInHex) {
 8001f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <SendData+0x40e>
		    	return 3;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e04c      	b.n	8001fc0 <SendData+0x4a8>
		    }
			for (int i = 0; i < size; i++) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f2a:	e031      	b.n	8001f90 <SendData+0x478>
			  dataInHex[i*4 + 0] = (bufferfloat[i] >> 24) & 0xFF;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	0e1a      	lsrs	r2, r3, #24
 8001f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3e:	440b      	add	r3, r1
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]
			  dataInHex[i*4 + 1] = (bufferfloat[i] >> 16) & 0xFF;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	0c19      	lsrs	r1, r3, #16
 8001f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	3301      	adds	r3, #1
 8001f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
			  dataInHex[i*4 + 2] = (bufferfloat[i] >> 8) & 0xFF;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	0a19      	lsrs	r1, r3, #8
 8001f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f6e:	4413      	add	r3, r2
 8001f70:	b2ca      	uxtb	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
			  dataInHex[i*4 + 3] = bufferfloat[i] & 0xFF;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	3303      	adds	r3, #3
 8001f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f84:	4413      	add	r3, r2
 8001f86:	b2ca      	uxtb	r2, r1
 8001f88:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++) {
 8001f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f90:	7f7b      	ldrb	r3, [r7, #29]
 8001f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f94:	429a      	cmp	r2, r3
 8001f96:	dbc9      	blt.n	8001f2c <SendData+0x414>
			}
			break;
 8001f98:	e001      	b.n	8001f9e <SendData+0x486>
		default:
			return 4;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e010      	b.n	8001fc0 <SendData+0x4a8>
			break;
	}

	/*Legger til meldingen i Tx buffer, Returnerer 0 hvis error*/
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, dataInHex) != HAL_OK) {
 8001f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fa0:	490a      	ldr	r1, [pc, #40]	; (8001fcc <SendData+0x4b4>)
 8001fa2:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <SendData+0x4b8>)
 8001fa4:	f004 ff69 	bl	8006e7a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <SendData+0x4a0>
         free(dataInHex);
 8001fae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001fb0:	f009 f886 	bl	800b0c0 <free>
         return 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e003      	b.n	8001fc0 <SendData+0x4a8>
     }
    /* Stopper Malloc-ed variabler fra å lekke minne og returnerer 1 (melding sendt)*/
	free(dataInHex);
 8001fb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001fba:	f009 f881 	bl	800b0c0 <free>
	return 1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	46b5      	mov	sp, r6
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3754      	adds	r7, #84	; 0x54
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fcc:	2000033c 	.word	0x2000033c
 8001fd0:	20000388 	.word	0x20000388

08001fd4 <hexToValues>:
 * voidData: 	verdilisten som dataen settes i etter konverteringen
 * hexData: 	Data som skal konverteres
 * sizeBytes: 	Lengde på meldingen i bytes, må samsvare med byte lengde til "voidData"
 * dataType: 	Velger datatypen "hexData" skal konverteres til, må samsvare med "voidData"
 * 				Aksepterte verdier: uint8, uint16, float*/
int hexToValues(void* voidData, const uint8_t* hexData, uint8_t sizeBytes, DataType dataType){
 8001fd4:	b480      	push	{r7}
 8001fd6:	b08f      	sub	sp, #60	; 0x3c
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	71bb      	strb	r3, [r7, #6]
	/*Velger metode etter oppgitt dataType*/
	switch(dataType) {
 8001fea:	79bb      	ldrb	r3, [r7, #6]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d059      	beq.n	80020a4 <hexToValues+0xd0>
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	f300 809e 	bgt.w	8002132 <hexToValues+0x15e>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <hexToValues+0x2c>
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d01b      	beq.n	8002036 <hexToValues+0x62>
 8001ffe:	e098      	b.n	8002132 <hexToValues+0x15e>
		case uint8:
			/* uint8Data som peker på listen i "voidData" som får de konverterte verdiene
			 * Big endian brukes*/
			uint8_t* uint8Data = (uint8_t*)voidData;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	623b      	str	r3, [r7, #32]
		    for (uint8_t i = 0; i < sizeBytes; i++) {
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800200a:	e00e      	b.n	800202a <hexToValues+0x56>
		    	uint8Data[i] = hexData[i];
 800200c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	441a      	add	r2, r3
 8002014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002018:	6a39      	ldr	r1, [r7, #32]
 800201a:	440b      	add	r3, r1
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	701a      	strb	r2, [r3, #0]
		    for (uint8_t i = 0; i < sizeBytes; i++) {
 8002020:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002024:	3301      	adds	r3, #1
 8002026:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800202a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	429a      	cmp	r2, r3
 8002032:	d3eb      	bcc.n	800200c <hexToValues+0x38>
		    }
			break;
 8002034:	e07f      	b.n	8002136 <hexToValues+0x162>
		case uint16:
			/* Kjekker om byte størrelsen går opp: 7%2=1 -> returnerer 2
			 * uint16Data som peker på listen i "voidData" som får de konverterte verdiene
			 * Big endian brukes*/
			if (sizeBytes % 2 != 0) return 2;
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <hexToValues+0x72>
 8002042:	2302      	movs	r3, #2
 8002044:	e078      	b.n	8002138 <hexToValues+0x164>
			uint16_t* uint16Data = (uint16_t*)voidData;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
		    uint8_t uint16Nr = sizeBytes / 2;
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		    for (uint8_t i = 0; i < uint16Nr; i++) {
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002058:	e01d      	b.n	8002096 <hexToValues+0xc2>
		    	uint8_t bytes[2];
		    	bytes[0] = hexData[i * 2 + 1];
 800205a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	3301      	adds	r3, #1
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	773b      	strb	r3, [r7, #28]
		    	bytes[1] = hexData[i * 2 + 0];
 800206a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	777b      	strb	r3, [r7, #29]
 800207a:	8bbb      	ldrh	r3, [r7, #28]

		    	uint16_t uint16Value;
		    	memcpy(&uint16Value, bytes, 2);
 800207c:	837b      	strh	r3, [r7, #26]
		    	uint16Data[i] = uint16Value;
 800207e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002086:	4413      	add	r3, r2
 8002088:	8b7a      	ldrh	r2, [r7, #26]
 800208a:	801a      	strh	r2, [r3, #0]
		    for (uint8_t i = 0; i < uint16Nr; i++) {
 800208c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002090:	3301      	adds	r3, #1
 8002092:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002096:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800209a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3db      	bcc.n	800205a <hexToValues+0x86>
		    }
			break;
 80020a2:	e048      	b.n	8002136 <hexToValues+0x162>
		case float32:
			/* Byte størrelsen sjekk: 6%4=2 -> returnerer 3
			 * floatData som peker på listen i "voidData" som får de konverterte verdiene
			 * Big endian brukes */
			if (sizeBytes % 4 != 0) return 3;
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <hexToValues+0xe0>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e041      	b.n	8002138 <hexToValues+0x164>
			float* floatData = (float*)voidData;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
		    uint8_t floatNr = sizeBytes / 4;
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		    for (uint8_t i = 0; i < floatNr; i++) {
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80020c6:	e02d      	b.n	8002124 <hexToValues+0x150>
		        uint8_t bytes[4];
		        bytes[0] = hexData[i * 4 + 3];
 80020c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	3303      	adds	r3, #3
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	753b      	strb	r3, [r7, #20]
		        bytes[1] = hexData[i * 4 + 2];
 80020d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	757b      	strb	r3, [r7, #21]
		        bytes[2] = hexData[i * 4 + 1];
 80020e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	3301      	adds	r3, #1
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	75bb      	strb	r3, [r7, #22]
		        bytes[3] = hexData[i * 4];
 80020f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	75fb      	strb	r3, [r7, #23]
 8002108:	697b      	ldr	r3, [r7, #20]
		        float floatValue;
		        memcpy(&floatValue, bytes, 4);
 800210a:	613b      	str	r3, [r7, #16]
		        floatData[i] = floatValue;
 800210c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	601a      	str	r2, [r3, #0]
		    for (uint8_t i = 0; i < floatNr; i++) {
 800211a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800211e:	3301      	adds	r3, #1
 8002120:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002124:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800212c:	429a      	cmp	r2, r3
 800212e:	d3cb      	bcc.n	80020c8 <hexToValues+0xf4>
		    }
			break;
 8002130:	e001      	b.n	8002136 <hexToValues+0x162>
		default:
			return 0;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <hexToValues+0x164>
			break;
	}
	/*Ved fullført konvertering returner 1*/
	return 1;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	373c      	adds	r7, #60	; 0x3c
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_FMAC_Init+0x20>)
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <MX_FMAC_Init+0x24>)
 800214c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_FMAC_Init+0x20>)
 8002150:	f005 fb62 	bl	8007818 <HAL_FMAC_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800215a:	f000 fac9 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200003ec 	.word	0x200003ec
 8002168:	40021400 	.word	0x40021400

0800216c <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_FMAC_MspInit+0x38>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10b      	bne.n	8002196 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_FMAC_MspInit+0x3c>)
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_FMAC_MspInit+0x3c>)
 8002184:	f043 0310 	orr.w	r3, r3, #16
 8002188:	6493      	str	r3, [r2, #72]	; 0x48
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_FMAC_MspInit+0x3c>)
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40021000 	.word	0x40021000

080021ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <MX_GPIO_Init+0x98>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <MX_GPIO_Init+0x98>)
 80021c8:	f043 0320 	orr.w	r3, r3, #32
 80021cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <MX_GPIO_Init+0x98>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MX_GPIO_Init+0x98>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	4a19      	ldr	r2, [pc, #100]	; (8002244 <MX_GPIO_Init+0x98>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_GPIO_Init+0x98>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_GPIO_Init+0x98>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <MX_GPIO_Init+0x98>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_GPIO_Init+0x98>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_GPIO_Init+0x98>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <MX_GPIO_Init+0x98>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_GPIO_Init+0x98>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Lekasje_probe_1_Pin|Lekasje_probe_2_Pin|Lekasje_b_nd_Pin|Lekasje_probe_3_Pin
 8002222:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002226:	617b      	str	r3, [r7, #20]
                          |Test_Knapp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	4804      	ldr	r0, [pc, #16]	; (8002248 <MX_GPIO_Init+0x9c>)
 8002238:	f005 fb9a 	bl	8007970 <HAL_GPIO_Init>

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	48000400 	.word	0x48000400

0800224c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <MX_I2C3_Init+0x74>)
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <MX_I2C3_Init+0x78>)
 8002254:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_I2C3_Init+0x74>)
 8002258:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <MX_I2C3_Init+0x7c>)
 800225a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <MX_I2C3_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <MX_I2C3_Init+0x74>)
 8002264:	2201      	movs	r2, #1
 8002266:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_I2C3_Init+0x74>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_I2C3_Init+0x74>)
 8002270:	2200      	movs	r2, #0
 8002272:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_I2C3_Init+0x74>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_I2C3_Init+0x74>)
 800227c:	2200      	movs	r2, #0
 800227e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_I2C3_Init+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002286:	480e      	ldr	r0, [pc, #56]	; (80022c0 <MX_I2C3_Init+0x74>)
 8002288:	f005 fcf4 	bl	8007c74 <HAL_I2C_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002292:	f000 fa2d 	bl	80026f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002296:	2100      	movs	r1, #0
 8002298:	4809      	ldr	r0, [pc, #36]	; (80022c0 <MX_I2C3_Init+0x74>)
 800229a:	f006 fa55 	bl	8008748 <HAL_I2CEx_ConfigAnalogFilter>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80022a4:	f000 fa24 	bl	80026f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80022a8:	2100      	movs	r1, #0
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_I2C3_Init+0x74>)
 80022ac:	f006 fa97 	bl	80087de <HAL_I2CEx_ConfigDigitalFilter>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80022b6:	f000 fa1b 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000424 	.word	0x20000424
 80022c4:	40007800 	.word	0x40007800
 80022c8:	30a0a7fb 	.word	0x30a0a7fb

080022cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b09e      	sub	sp, #120	; 0x78
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	2254      	movs	r2, #84	; 0x54
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f009 feb8 	bl	800c062 <memset>
  if(i2cHandle->Instance==I2C3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a23      	ldr	r2, [pc, #140]	; (8002384 <HAL_I2C_MspInit+0xb8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d13f      	bne.n	800237c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002300:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	4618      	mov	r0, r3
 800230c:	f007 f85e 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002316:	f000 f9eb 	bl	80026f0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_I2C_MspInit+0xbc>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_I2C_MspInit+0xbc>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_I2C_MspInit+0xbc>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002336:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002338:	2312      	movs	r3, #18
 800233a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002344:	2308      	movs	r3, #8
 8002346:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002348:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800234c:	4619      	mov	r1, r3
 800234e:	480f      	ldr	r0, [pc, #60]	; (800238c <HAL_I2C_MspInit+0xc0>)
 8002350:	f005 fb0e 	bl	8007970 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_I2C_MspInit+0xbc>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <HAL_I2C_MspInit+0xbc>)
 800235a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800235e:	6593      	str	r3, [r2, #88]	; 0x58
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_I2C_MspInit+0xbc>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 3, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2103      	movs	r1, #3
 8002370:	205c      	movs	r0, #92	; 0x5c
 8002372:	f003 ff82 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002376:	205c      	movs	r0, #92	; 0x5c
 8002378:	f003 ff99 	bl	80062ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800237c:	bf00      	nop
 800237e:	3778      	adds	r7, #120	; 0x78
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40007800 	.word	0x40007800
 8002388:	40021000 	.word	0x40021000
 800238c:	48000800 	.word	0x48000800

08002390 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	e853 3f00 	ldrex	r3, [r3]
 80023a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f043 0320 	orr.w	r3, r3, #32
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	61ba      	str	r2, [r7, #24]
 80023b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b4:	6979      	ldr	r1, [r7, #20]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	e841 2300 	strex	r3, r2, [r1]
 80023bc:	613b      	str	r3, [r7, #16]
   return(result);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e9      	bne.n	8002398 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b089      	sub	sp, #36	; 0x24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3308      	adds	r3, #8
 80023de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	e853 3f00 	ldrex	r3, [r3]
 80023e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3308      	adds	r3, #8
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	61ba      	str	r2, [r7, #24]
 80023f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fa:	6979      	ldr	r1, [r7, #20]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	e841 2300 	strex	r3, r2, [r1]
 8002402:	613b      	str	r3, [r7, #16]
   return(result);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1e7      	bne.n	80023da <LL_USART_EnableIT_ERROR+0x8>
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3724      	adds	r7, #36	; 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//-------------------Temp---------------
	float alpha = 0.5f; // Definer alfa-verdi for EMA-filter
 8002420:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002424:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8002428:	6013      	str	r3, [r2, #0]
	//------------TRYKK----------------

	HAL_StatusTypeDef i2c_ret;
	uint8_t i2c_buffer[10];

	pressuresensor.i2c_address = 0x76; // Setter adressen til riktig adresse
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <main+0xbc>)
 800242c:	2276      	movs	r2, #118	; 0x76
 800242e:	721a      	strb	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002430:	f001 fd11 	bl	8003e56 <HAL_Init>

  /* USER CODE BEGIN Init */
  EMA_Init(&ema_filter, alpha);
 8002434:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8002438:	ed93 0a00 	vldr	s0, [r3]
 800243c:	4826      	ldr	r0, [pc, #152]	; (80024d8 <main+0xc0>)
 800243e:	f7fe fc3b 	bl	8000cb8 <EMA_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002442:	f000 f855 	bl	80024f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002446:	f7ff feb1 	bl	80021ac <MX_GPIO_Init>
  MX_DMA_Init();
 800244a:	f7ff fa1d 	bl	8001888 <MX_DMA_Init>
  MX_ADC1_Init();
 800244e:	f7ff f8a3 	bl	8001598 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8002452:	f7ff fa43 	bl	80018dc <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002456:	f7ff fef9 	bl	800224c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800245a:	f001 f8a5 	bl	80035a8 <MX_USART1_UART_Init>
  MX_CORDIC_Init();
 800245e:	f7ff f99d 	bl	800179c <MX_CORDIC_Init>
  MX_CRC_Init();
 8002462:	f7ff f9cf 	bl	8001804 <MX_CRC_Init>
  MX_FMAC_Init();
 8002466:	f7ff fe6d 	bl	8002144 <MX_FMAC_Init>
  MX_TIM2_Init();
 800246a:	f000 fded 	bl	8003048 <MX_TIM2_Init>
  MX_TIM3_Init();
 800246e:	f000 fe55 	bl	800311c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //-----------CANFD Oppstart--------------
  CANFD_Init();
 8002472:	f7ff fae5 	bl	8001a40 <CANFD_Init>

  //-----------UART Oppstart---------------
  LL_USART_EnableIT_RXNE(USART1);
 8002476:	4819      	ldr	r0, [pc, #100]	; (80024dc <main+0xc4>)
 8002478:	f7ff ff8a 	bl	8002390 <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_ERROR(USART1);
 800247c:	4817      	ldr	r0, [pc, #92]	; (80024dc <main+0xc4>)
 800247e:	f7ff ffa8 	bl	80023d2 <LL_USART_EnableIT_ERROR>
  //------------Temp oppstart---------------------------

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002482:	217f      	movs	r1, #127	; 0x7f
 8002484:	4816      	ldr	r0, [pc, #88]	; (80024e0 <main+0xc8>)
 8002486:	f003 fc4f 	bl	8005d28 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) tempBuf, numChannels);
 800248a:	2204      	movs	r2, #4
 800248c:	4915      	ldr	r1, [pc, #84]	; (80024e4 <main+0xcc>)
 800248e:	4814      	ldr	r0, [pc, #80]	; (80024e0 <main+0xc8>)
 8002490:	f002 f9be 	bl	8004810 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8002494:	4814      	ldr	r0, [pc, #80]	; (80024e8 <main+0xd0>)
 8002496:	f007 fa3f 	bl	8009918 <HAL_TIM_Base_Start>
  //-----------pressuresensor/I2C Oppstart----

  //Nullstill sensor
  ms5837_reset(&pressuresensor); // Nullstiller pressuresensoren
 800249a:	480e      	ldr	r0, [pc, #56]	; (80024d4 <main+0xbc>)
 800249c:	f7fe fcaa 	bl	8000df4 <ms5837_reset>
  HAL_Delay(30);
 80024a0:	201e      	movs	r0, #30
 80024a2:	f001 fd49 	bl	8003f38 <HAL_Delay>
  ms5837_read_calibration_data(&pressuresensor); // Henter ut kalibreringsverdier
 80024a6:	480b      	ldr	r0, [pc, #44]	; (80024d4 <main+0xbc>)
 80024a8:	f7fe fcb0 	bl	8000e0c <ms5837_read_calibration_data>
  ms5837_start_conversion(&pressuresensor, SENSOR_PRESSURE, OSR_4096);
 80024ac:	2204      	movs	r2, #4
 80024ae:	2100      	movs	r1, #0
 80024b0:	4808      	ldr	r0, [pc, #32]	; (80024d4 <main+0xbc>)
 80024b2:	f7fe fd0d 	bl	8000ed0 <ms5837_start_conversion>
    /* USER CODE BEGIN 3 */

	  //------------TRYKK---------------

	  //-----------TEMP-----------------
	  while (convCompleted !=1){
 80024b6:	bf00      	nop
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <main+0xd4>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d1fb      	bne.n	80024b8 <main+0xa0>

	  	  }

	  	  convCompleted = 0;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <main+0xd4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]

	  	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)tempBuf, numChannels);
 80024c6:	2204      	movs	r2, #4
 80024c8:	4906      	ldr	r1, [pc, #24]	; (80024e4 <main+0xcc>)
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <main+0xc8>)
 80024cc:	f002 f9a0 	bl	8004810 <HAL_ADC_Start_DMA>
	  while (convCompleted !=1){
 80024d0:	e7f1      	b.n	80024b6 <main+0x9e>
 80024d2:	bf00      	nop
 80024d4:	20003420 	.word	0x20003420
 80024d8:	2000047c 	.word	0x2000047c
 80024dc:	40013800 	.word	0x40013800
 80024e0:	2000020c 	.word	0x2000020c
 80024e4:	20000488 	.word	0x20000488
 80024e8:	200034f8 	.word	0x200034f8
 80024ec:	20000484 	.word	0x20000484

080024f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b094      	sub	sp, #80	; 0x50
 80024f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	2238      	movs	r2, #56	; 0x38
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f009 fdaf 	bl	800c062 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002512:	2000      	movs	r0, #0
 8002514:	f006 f9b0 	bl	8008878 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002518:	2301      	movs	r3, #1
 800251a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800251c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002520:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002522:	2302      	movs	r3, #2
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002526:	2303      	movs	r3, #3
 8002528:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800252a:	2302      	movs	r3, #2
 800252c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800252e:	2355      	movs	r3, #85	; 0x55
 8002530:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002532:	2302      	movs	r3, #2
 8002534:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002536:	2302      	movs	r3, #2
 8002538:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800253a:	2302      	movs	r3, #2
 800253c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253e:	f107 0318 	add.w	r3, r7, #24
 8002542:	4618      	mov	r0, r3
 8002544:	f006 fa4c 	bl	80089e0 <HAL_RCC_OscConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800254e:	f000 f8cf 	bl	80026f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002552:	230f      	movs	r3, #15
 8002554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002556:	2303      	movs	r3, #3
 8002558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	2104      	movs	r1, #4
 800256a:	4618      	mov	r0, r3
 800256c:	f006 fd4a 	bl	8009004 <HAL_RCC_ClockConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002576:	f000 f8bb 	bl	80026f0 <Error_Handler>
  }
}
 800257a:	bf00      	nop
 800257c:	3750      	adds	r7, #80	; 0x50
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

	convCompleted =1;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_ADC_ConvCpltCallback+0x80>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 8002592:	481d      	ldr	r0, [pc, #116]	; (8002608 <HAL_ADC_ConvCpltCallback+0x84>)
 8002594:	f002 fa10 	bl	80049b8 <HAL_ADC_Stop_DMA>


	  for (int i = 0; i < numChannels; i++) {
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e029      	b.n	80025f2 <HAL_ADC_ConvCpltCallback+0x6e>
		  // Konverter ADC-verdier til mv
	    float input_value = __HAL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE_, tempBuf[i], ADC_RESOLUTION12b);
 800259e:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_ADC_ConvCpltCallback+0x88>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f640 43e4 	movw	r3, #3300	; 0xce4
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_ADC_ConvCpltCallback+0x8c>)
 80025b4:	fba3 1302 	umull	r1, r3, r3, r2
 80025b8:	1ad2      	subs	r2, r2, r3
 80025ba:	0852      	lsrs	r2, r2, #1
 80025bc:	4413      	add	r3, r2
 80025be:	0adb      	lsrs	r3, r3, #11
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c8:	edc7 7a02 	vstr	s15, [r7, #8]
	    filtrertTemp[i] = EMA_Update(&ema_filter, input_value);
 80025cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80025d0:	4810      	ldr	r0, [pc, #64]	; (8002614 <HAL_ADC_ConvCpltCallback+0x90>)
 80025d2:	f7fe fbaa 	bl	8000d2a <EMA_Update>
 80025d6:	eef0 7a40 	vmov.f32	s15, s0
 80025da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025de:	ee17 3a90 	vmov	r3, s15
 80025e2:	b299      	uxth	r1, r3
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <HAL_ADC_ConvCpltCallback+0x94>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (int i = 0; i < numChannels; i++) {
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	ddd2      	ble.n	800259e <HAL_ADC_ConvCpltCallback+0x1a>
	    	// sensor i eksempel da den gir ut 0.5V ved 0 grader C, og den gir ut 10 mv/C
	   // float celsius = (filtrertTemp[i] - offset) *100;  // annet tall enn 100?

	  }

}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000484 	.word	0x20000484
 8002608:	2000020c 	.word	0x2000020c
 800260c:	20000488 	.word	0x20000488
 8002610:	00100101 	.word	0x00100101
 8002614:	2000047c 	.word	0x2000047c
 8002618:	20000490 	.word	0x20000490

0800261c <Lekk>:

/*Sjekker først om en av pinnene har logisk høy verdi */
void Lekk(void){
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
	if((GPIOB->IDR & LL_GPIO_PIN_11) || (GPIOB->IDR & LL_GPIO_PIN_12) || (GPIOB->IDR & LL_GPIO_PIN_13) || (GPIOB->IDR & LL_GPIO_PIN_14)  	|| (GPIOB->IDR & LL_GPIO_PIN_15)) {
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <Lekk+0xc8>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002628:	2b00      	cmp	r3, #0
 800262a:	d117      	bne.n	800265c <Lekk+0x40>
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <Lekk+0xc8>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d111      	bne.n	800265c <Lekk+0x40>
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <Lekk+0xc8>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <Lekk+0x40>
 8002644:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <Lekk+0xc8>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <Lekk+0x40>
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <Lekk+0xc8>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d033      	beq.n	80026c4 <Lekk+0xa8>

						/*Dersom en av pinnene er høy lages en maske som forteller hvor lekkasjen er. */
		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_11){
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <Lekk+0xc8>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <Lekk+0x5a>
		  		  		  lekkasje |= 0x1;
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <Lekk+0xcc>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <Lekk+0xcc>)
 8002674:	701a      	strb	r2, [r3, #0]
		  		  	  }
		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_12){
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <Lekk+0xc8>)
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <Lekk+0x74>
		  		  		  lekkasje |= 0x2;
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <Lekk+0xcc>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <Lekk+0xcc>)
 800268e:	701a      	strb	r2, [r3, #0]
		  		  	  }
		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_13){
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <Lekk+0xc8>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <Lekk+0x8e>
		  		  		  lekkasje |= 0x4;
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <Lekk+0xcc>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <Lekk+0xcc>)
 80026a8:	701a      	strb	r2, [r3, #0]
		  		  	  }
		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_14){
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <Lekk+0xc8>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <Lekk+0xa8>
		  		  		  lekkasje |= 0x8;
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <Lekk+0xcc>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	f043 0308 	orr.w	r3, r3, #8
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <Lekk+0xcc>)
 80026c2:	701a      	strb	r2, [r3, #0]
		  		  	  //knapp kun for testing
//		  		  	  if(GPIOB->IDR & LL_GPIO_PIN_15){
//		  		  		  lekkasje |= 0x10;
//		  		  	  }
	}
	  if (lekkasje > 0){
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <Lekk+0xcc>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <Lekk+0xbe>
		  send_msg |= 0x4;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <Lekk+0xd0>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <Lekk+0xd0>)
 80026d8:	701a      	strb	r2, [r3, #0]
	  }
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	48000400 	.word	0x48000400
 80026e8:	20000478 	.word	0x20000478
 80026ec:	20001618 	.word	0x20001618

080026f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026f4:	b672      	cpsid	i
}
 80026f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <Error_Handler+0x8>
	...

080026fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_MspInit+0x44>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_MspInit+0x44>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6613      	str	r3, [r2, #96]	; 0x60
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_MspInit+0x44>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_MspInit+0x44>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_MspInit+0x44>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	6593      	str	r3, [r2, #88]	; 0x58
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_MspInit+0x44>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002732:	f006 f945 	bl	80089c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000

08002744 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b20      	cmp	r3, #32
 8002756:	d101      	bne.n	800275c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	b2db      	uxtb	r3, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002788:	e7fe      	b.n	8002788 <NMI_Handler+0x4>

0800278a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <HardFault_Handler+0x4>

08002790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <MemManage_Handler+0x4>

08002796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279a:	e7fe      	b.n	800279a <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a4      	sub	sp, #144	; 0x90
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d2:	f001 fb93 	bl	8003efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  static uint8_t ms1_ticker, ms10_ticker, ms100_ticker = 0;

  //Skjer hvert 10ms
  if(ms1_ticker++>9){//if_ms			/* Teller til opp til 5 slik at det går 5ms for hver gang Lekk() kjører */
 80027d6:	4bb6      	ldr	r3, [pc, #728]	; (8002ab0 <SysTick_Handler+0x2e4>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	b2d1      	uxtb	r1, r2
 80027de:	4ab4      	ldr	r2, [pc, #720]	; (8002ab0 <SysTick_Handler+0x2e4>)
 80027e0:	7011      	strb	r1, [r2, #0]
 80027e2:	2b09      	cmp	r3, #9
 80027e4:	f240 8220 	bls.w	8002c28 <SysTick_Handler+0x45c>
	  ms1_ticker = 0;
 80027e8:	4bb1      	ldr	r3, [pc, #708]	; (8002ab0 <SysTick_Handler+0x2e4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
	  Lekk();
 80027ee:	f7ff ff15 	bl	800261c <Lekk>

	  if(send_dvl){//if_dvl
 80027f2:	4bb0      	ldr	r3, [pc, #704]	; (8002ab4 <SysTick_Handler+0x2e8>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 81a9 	beq.w	8002b4e <SysTick_Handler+0x382>
			  UART1_update(dvl_cmd);
 80027fc:	4bae      	ldr	r3, [pc, #696]	; (8002ab8 <SysTick_Handler+0x2ec>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f001 f9f5 	bl	8003bf0 <UART1_update>
			  send_dvl=0;
 8002806:	4bab      	ldr	r3, [pc, #684]	; (8002ab4 <SysTick_Handler+0x2e8>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]

			  Process_msg();
 800280c:	f000 ffbc 	bl	8003788 <Process_msg>
			  while (send_msg > 0){//_while
 8002810:	e198      	b.n	8002b44 <SysTick_Handler+0x378>
//			  	  	Hastighet
			  	  	if (send_msg & 0x01){//_if
 8002812:	4baa      	ldr	r3, [pc, #680]	; (8002abc <SysTick_Handler+0x2f0>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d05c      	beq.n	80028d8 <SysTick_Handler+0x10c>
			  	  			  float Vx = atof(wrz.vx);
 800281e:	48a8      	ldr	r0, [pc, #672]	; (8002ac0 <SysTick_Handler+0x2f4>)
 8002820:	f008 fc42 	bl	800b0a8 <atof>
 8002824:	ec53 2b10 	vmov	r2, r3, d0
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f9be 	bl	8000bac <__aeabi_d2f>
 8002830:	4603      	mov	r3, r0
 8002832:	66bb      	str	r3, [r7, #104]	; 0x68
			  	  			  float Vy = atof(wrz.vy);
 8002834:	48a3      	ldr	r0, [pc, #652]	; (8002ac4 <SysTick_Handler+0x2f8>)
 8002836:	f008 fc37 	bl	800b0a8 <atof>
 800283a:	ec53 2b10 	vmov	r2, r3, d0
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9b3 	bl	8000bac <__aeabi_d2f>
 8002846:	4603      	mov	r3, r0
 8002848:	667b      	str	r3, [r7, #100]	; 0x64
			  	  			  float Vz = atof(wrz.vz);
 800284a:	489f      	ldr	r0, [pc, #636]	; (8002ac8 <SysTick_Handler+0x2fc>)
 800284c:	f008 fc2c 	bl	800b0a8 <atof>
 8002850:	ec53 2b10 	vmov	r2, r3, d0
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f9a8 	bl	8000bac <__aeabi_d2f>
 800285c:	4603      	mov	r3, r0
 800285e:	663b      	str	r3, [r7, #96]	; 0x60
			  	  			  float altitude = atof(wrz.altitude);
 8002860:	489a      	ldr	r0, [pc, #616]	; (8002acc <SysTick_Handler+0x300>)
 8002862:	f008 fc21 	bl	800b0a8 <atof>
 8002866:	ec53 2b10 	vmov	r2, r3, d0
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f7fe f99d 	bl	8000bac <__aeabi_d2f>
 8002872:	4603      	mov	r3, r0
 8002874:	65fb      	str	r3, [r7, #92]	; 0x5c
			  	  			  float V_fom = atof(wrz.merit_figure);
 8002876:	4896      	ldr	r0, [pc, #600]	; (8002ad0 <SysTick_Handler+0x304>)
 8002878:	f008 fc16 	bl	800b0a8 <atof>
 800287c:	ec53 2b10 	vmov	r2, r3, d0
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f992 	bl	8000bac <__aeabi_d2f>
 8002888:	4603      	mov	r3, r0
 800288a:	65bb      	str	r3, [r7, #88]	; 0x58
			  	  			  float Tid_siste = atof(wrz.time_since_last_rep);
 800288c:	4891      	ldr	r0, [pc, #580]	; (8002ad4 <SysTick_Handler+0x308>)
 800288e:	f008 fc0b 	bl	800b0a8 <atof>
 8002892:	ec53 2b10 	vmov	r2, r3, d0
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe f987 	bl	8000bac <__aeabi_d2f>
 800289e:	4603      	mov	r3, r0
 80028a0:	657b      	str	r3, [r7, #84]	; 0x54
			  	  			  float poisition_msg[] = {Vx,Vy,Vz,altitude,V_fom, Tid_siste};
 80028a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a8:	643b      	str	r3, [r7, #64]	; 0x40
 80028aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44
 80028ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80028b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b8:	653b      	str	r3, [r7, #80]	; 0x50

			  	  			  SendData((Sensor_start + 0x01), poisition_msg, sizeof(poisition_msg), float32);
 80028ba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80028be:	2302      	movs	r3, #2
 80028c0:	2218      	movs	r2, #24
 80028c2:	2081      	movs	r0, #129	; 0x81
 80028c4:	f7ff f928 	bl	8001b18 <SendData>
			  	  			  send_msg &= 0xFE; //Nullstill respektiv bit i maske
 80028c8:	4b7c      	ldr	r3, [pc, #496]	; (8002abc <SysTick_Handler+0x2f0>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <SysTick_Handler+0x2f0>)
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e135      	b.n	8002b44 <SysTick_Handler+0x378>

			  	  	}//_if
			  	  		  //Posisjon
			  	  	else if (send_msg & 0x04){//_if_else
 80028d8:	4b78      	ldr	r3, [pc, #480]	; (8002abc <SysTick_Handler+0x2f0>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d07c      	beq.n	80029de <SysTick_Handler+0x212>
			  	  			  float time_stamp = atof(wrp.time_stamp);
 80028e4:	487c      	ldr	r0, [pc, #496]	; (8002ad8 <SysTick_Handler+0x30c>)
 80028e6:	f008 fbdf 	bl	800b0a8 <atof>
 80028ea:	ec53 2b10 	vmov	r2, r3, d0
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f7fe f95b 	bl	8000bac <__aeabi_d2f>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			  	  			  float Px = atof(wrp.px);
 80028fc:	4877      	ldr	r0, [pc, #476]	; (8002adc <SysTick_Handler+0x310>)
 80028fe:	f008 fbd3 	bl	800b0a8 <atof>
 8002902:	ec53 2b10 	vmov	r2, r3, d0
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe f94f 	bl	8000bac <__aeabi_d2f>
 800290e:	4603      	mov	r3, r0
 8002910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  	  			  float Py = atof(wrp.py);
 8002914:	4872      	ldr	r0, [pc, #456]	; (8002ae0 <SysTick_Handler+0x314>)
 8002916:	f008 fbc7 	bl	800b0a8 <atof>
 800291a:	ec53 2b10 	vmov	r2, r3, d0
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	f7fe f943 	bl	8000bac <__aeabi_d2f>
 8002926:	4603      	mov	r3, r0
 8002928:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			  	  			  float Pz = atof(wrp.pz);
 800292c:	486d      	ldr	r0, [pc, #436]	; (8002ae4 <SysTick_Handler+0x318>)
 800292e:	f008 fbbb 	bl	800b0a8 <atof>
 8002932:	ec53 2b10 	vmov	r2, r3, d0
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f937 	bl	8000bac <__aeabi_d2f>
 800293e:	4603      	mov	r3, r0
 8002940:	67fb      	str	r3, [r7, #124]	; 0x7c
			  	  			  float Roll = atof(wrp.roll);
 8002942:	4869      	ldr	r0, [pc, #420]	; (8002ae8 <SysTick_Handler+0x31c>)
 8002944:	f008 fbb0 	bl	800b0a8 <atof>
 8002948:	ec53 2b10 	vmov	r2, r3, d0
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f92c 	bl	8000bac <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	67bb      	str	r3, [r7, #120]	; 0x78
			  	  			  float Pitch = atof(wrp.pitch);
 8002958:	4864      	ldr	r0, [pc, #400]	; (8002aec <SysTick_Handler+0x320>)
 800295a:	f008 fba5 	bl	800b0a8 <atof>
 800295e:	ec53 2b10 	vmov	r2, r3, d0
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f7fe f921 	bl	8000bac <__aeabi_d2f>
 800296a:	4603      	mov	r3, r0
 800296c:	677b      	str	r3, [r7, #116]	; 0x74
			  	  			  float Yaw = atof(wrp.yaw);
 800296e:	4860      	ldr	r0, [pc, #384]	; (8002af0 <SysTick_Handler+0x324>)
 8002970:	f008 fb9a 	bl	800b0a8 <atof>
 8002974:	ec53 2b10 	vmov	r2, r3, d0
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f916 	bl	8000bac <__aeabi_d2f>
 8002980:	4603      	mov	r3, r0
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
			  	  			  float P_fom = atof(wrp.pos_std);
 8002984:	485b      	ldr	r0, [pc, #364]	; (8002af4 <SysTick_Handler+0x328>)
 8002986:	f008 fb8f 	bl	800b0a8 <atof>
 800298a:	ec53 2b10 	vmov	r2, r3, d0
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f7fe f90b 	bl	8000bac <__aeabi_d2f>
 8002996:	4603      	mov	r3, r0
 8002998:	66fb      	str	r3, [r7, #108]	; 0x6c

			  	  			  float heading_msg[] = {Px,Py,Pz,Roll,Pitch,Yaw,P_fom,time_stamp};
 800299a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
			  	  			  SendData(Sensor_start, heading_msg, sizeof(heading_msg), float32);
 80029c0:	f107 010c 	add.w	r1, r7, #12
 80029c4:	2302      	movs	r3, #2
 80029c6:	2220      	movs	r2, #32
 80029c8:	2080      	movs	r0, #128	; 0x80
 80029ca:	f7ff f8a5 	bl	8001b18 <SendData>
			  	  			  send_msg &= 0xFB; //Nullstill respektiv bit i maske
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <SysTick_Handler+0x2f0>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f023 0304 	bic.w	r3, r3, #4
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	4b38      	ldr	r3, [pc, #224]	; (8002abc <SysTick_Handler+0x2f0>)
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e0b2      	b.n	8002b44 <SysTick_Handler+0x378>

			  	  	}//_if_else
			  	  		  //Temp & Trykk
			  	  	else if (send_msg & 0x80){//_if_else
 80029de:	4b37      	ldr	r3, [pc, #220]	; (8002abc <SysTick_Handler+0x2f0>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f280 808f 	bge.w	8002b08 <SysTick_Handler+0x33c>
			  	  			// (Filtrert mV verdi)/(Ref spenning)*(Temp ved Max) = Temp
			  	  			  uint8_t temp1 = (filtrertTemp[0]/3300)*80;
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <SysTick_Handler+0x32c>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	4a42      	ldr	r2, [pc, #264]	; (8002afc <SysTick_Handler+0x330>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			  	  			  uint8_t temp2 = (filtrertTemp[1]/3300)*80;
 8002a08:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <SysTick_Handler+0x32c>)
 8002a0a:	885b      	ldrh	r3, [r3, #2]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	4a3b      	ldr	r2, [pc, #236]	; (8002afc <SysTick_Handler+0x330>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	0092      	lsls	r2, r2, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			  	  			  uint8_t temp3 = (filtrertTemp[2]/3300)*80;
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <SysTick_Handler+0x32c>)
 8002a28:	889b      	ldrh	r3, [r3, #4]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	4a33      	ldr	r2, [pc, #204]	; (8002afc <SysTick_Handler+0x330>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			  	  			  uint8_t temp4 = (filtrertTemp[3]/3300)*80;
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <SysTick_Handler+0x32c>)
 8002a46:	88db      	ldrh	r3, [r3, #6]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	4a2c      	ldr	r2, [pc, #176]	; (8002afc <SysTick_Handler+0x330>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			  	  			  uint8_t tp_msg[] = {temp1,temp2,temp3,temp4,vanntemp,trykk};
 8002a62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002a66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002a6a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002a6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002a72:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002a76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002a7a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002a7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <SysTick_Handler+0x334>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <SysTick_Handler+0x338>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			  	  			  SendData((Sensor_start + 0x02), tp_msg, sizeof(tp_msg), uint8);
 8002a92:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002a96:	2300      	movs	r3, #0
 8002a98:	2206      	movs	r2, #6
 8002a9a:	2082      	movs	r0, #130	; 0x82
 8002a9c:	f7ff f83c 	bl	8001b18 <SendData>
			  	  			  send_msg &= 0x7F;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <SysTick_Handler+0x2f0>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <SysTick_Handler+0x2f0>)
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e049      	b.n	8002b44 <SysTick_Handler+0x378>
 8002ab0:	200034a2 	.word	0x200034a2
 8002ab4:	20001619 	.word	0x20001619
 8002ab8:	2000344f 	.word	0x2000344f
 8002abc:	20001618 	.word	0x20001618
 8002ac0:	20000498 	.word	0x20000498
 8002ac4:	20000518 	.word	0x20000518
 8002ac8:	20000598 	.word	0x20000598
 8002acc:	20000698 	.word	0x20000698
 8002ad0:	20000718 	.word	0x20000718
 8002ad4:	20000918 	.word	0x20000918
 8002ad8:	20001198 	.word	0x20001198
 8002adc:	20001218 	.word	0x20001218
 8002ae0:	20001298 	.word	0x20001298
 8002ae4:	20001318 	.word	0x20001318
 8002ae8:	20001418 	.word	0x20001418
 8002aec:	20001498 	.word	0x20001498
 8002af0:	20001518 	.word	0x20001518
 8002af4:	20001398 	.word	0x20001398
 8002af8:	20000490 	.word	0x20000490
 8002afc:	09ee009f 	.word	0x09ee009f
 8002b00:	2000344d 	.word	0x2000344d
 8002b04:	2000344e 	.word	0x2000344e
			  	  	}//_if_else

			  	  		  //Feilmelding og "Catch-all"
			  	  	else if (send_msg){//_if_else
 8002b08:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <SysTick_Handler+0x464>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d019      	beq.n	8002b44 <SysTick_Handler+0x378>
			  	  			  uint8_t error_msg[] = {dvl_mask,dvl_mask2,lekkasje};
 8002b10:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <SysTick_Handler+0x468>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <SysTick_Handler+0x46c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002b20:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <SysTick_Handler+0x470>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  	  			  SendData((Sensor_start + 0x03), error_msg, sizeof(error_msg), uint8);
 8002b28:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2203      	movs	r2, #3
 8002b30:	2083      	movs	r0, #131	; 0x83
 8002b32:	f7fe fff1 	bl	8001b18 <SendData>
			  	  			  send_msg &= 0x85; //Nullstill alle bit som ikke stemmer med andre masker
 8002b36:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <SysTick_Handler+0x464>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <SysTick_Handler+0x464>)
 8002b42:	701a      	strb	r2, [r3, #0]
			  while (send_msg > 0){//_while
 8002b44:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <SysTick_Handler+0x464>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f47f ae62 	bne.w	8002812 <SysTick_Handler+0x46>
			  	  	}//_if_else
			  }//_while
	  }//if_dvl
	  				  ms10_ticker++;
 8002b4e:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <SysTick_Handler+0x474>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <SysTick_Handler+0x474>)
 8002b58:	701a      	strb	r2, [r3, #0]


	//-------------------Skjer hvert 100ms
					  if (ms10_ticker++ > 99){//_100ms
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <SysTick_Handler+0x474>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	b2d1      	uxtb	r1, r2
 8002b62:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <SysTick_Handler+0x474>)
 8002b64:	7011      	strb	r1, [r2, #0]
 8002b66:	2b63      	cmp	r3, #99	; 0x63
 8002b68:	d95e      	bls.n	8002c28 <SysTick_Handler+0x45c>
						  ms10_ticker = 0;
 8002b6a:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <SysTick_Handler+0x474>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]

						  if (pressure_ready++>0){
 8002b70:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <SysTick_Handler+0x478>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	b2d1      	uxtb	r1, r2
 8002b78:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <SysTick_Handler+0x478>)
 8002b7a:	7011      	strb	r1, [r2, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <SysTick_Handler+0x3c6>
								 //Hent Trykk
								 ms5837_read_conversion(&pressuresensor);
 8002b80:	4831      	ldr	r0, [pc, #196]	; (8002c48 <SysTick_Handler+0x47c>)
 8002b82:	f7fe f9e1 	bl	8000f48 <ms5837_read_conversion>
								 ms5837_start_conversion(&pressuresensor, SENSOR_PRESSURE, OSR_4096);
 8002b86:	2204      	movs	r2, #4
 8002b88:	2100      	movs	r1, #0
 8002b8a:	482f      	ldr	r0, [pc, #188]	; (8002c48 <SysTick_Handler+0x47c>)
 8002b8c:	f7fe f9a0 	bl	8000ed0 <ms5837_start_conversion>
 8002b90:	e02e      	b.n	8002bf0 <SysTick_Handler+0x424>
					  	  }
					  		else{

								 //Hent Vanntemp
								 pressure_ready = 0;
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <SysTick_Handler+0x478>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
								 ms5837_read_conversion(&pressuresensor);
 8002b98:	482b      	ldr	r0, [pc, #172]	; (8002c48 <SysTick_Handler+0x47c>)
 8002b9a:	f7fe f9d5 	bl	8000f48 <ms5837_read_conversion>
								 ms5837_calculate(&pressuresensor);
 8002b9e:	482a      	ldr	r0, [pc, #168]	; (8002c48 <SysTick_Handler+0x47c>)
 8002ba0:	f7fe fa0c 	bl	8000fbc <ms5837_calculate>
								 ms5837_start_conversion(&pressuresensor, SENSOR_PRESSURE, OSR_4096);
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4827      	ldr	r0, [pc, #156]	; (8002c48 <SysTick_Handler+0x47c>)
 8002baa:	f7fe f991 	bl	8000ed0 <ms5837_start_conversion>
								 vanntemp = ms5837_temperature_celcius(&pressuresensor);
 8002bae:	4826      	ldr	r0, [pc, #152]	; (8002c48 <SysTick_Handler+0x47c>)
 8002bb0:	f7fe fc5e 	bl	8001470 <ms5837_temperature_celcius>
 8002bb4:	eef0 7a40 	vmov.f32	s15, s0
 8002bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bc0:	793b      	ldrb	r3, [r7, #4]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <SysTick_Handler+0x480>)
 8002bc6:	701a      	strb	r2, [r3, #0]
								 trykk = ms5837_pressure_bar(&pressuresensor);
 8002bc8:	481f      	ldr	r0, [pc, #124]	; (8002c48 <SysTick_Handler+0x47c>)
 8002bca:	f7fe fc6b 	bl	80014a4 <ms5837_pressure_bar>
 8002bce:	eef0 7a40 	vmov.f32	s15, s0
 8002bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bda:	793b      	ldrb	r3, [r7, #4]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <SysTick_Handler+0x484>)
 8002be0:	701a      	strb	r2, [r3, #0]
								 send_msg = send_msg | 0x80;
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <SysTick_Handler+0x464>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <SysTick_Handler+0x464>)
 8002bee:	701a      	strb	r2, [r3, #0]
						  }

	//----------------Skjer hvert 1sek
						  if(ms100_ticker++>9){ //_1s
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <SysTick_Handler+0x488>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	b2d1      	uxtb	r1, r2
 8002bf8:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <SysTick_Handler+0x488>)
 8002bfa:	7011      	strb	r1, [r2, #0]
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	d913      	bls.n	8002c28 <SysTick_Handler+0x45c>
							uint8_t status_msg[] = {0x00,0x00,lekkasje};
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <SysTick_Handler+0x470>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							ms100_ticker = 0;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <SysTick_Handler+0x488>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
							SendData((Sensor_start + 0x03), status_msg, sizeof(status_msg), uint8);
 8002c1a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2203      	movs	r2, #3
 8002c22:	2083      	movs	r0, #131	; 0x83
 8002c24:	f7fe ff78 	bl	8001b18 <SendData>
					  }//_100ms

  }//if_ms

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	3790      	adds	r7, #144	; 0x90
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20001618 	.word	0x20001618
 8002c34:	2000161b 	.word	0x2000161b
 8002c38:	2000161c 	.word	0x2000161c
 8002c3c:	20000478 	.word	0x20000478
 8002c40:	200034a3 	.word	0x200034a3
 8002c44:	2000344c 	.word	0x2000344c
 8002c48:	20003420 	.word	0x20003420
 8002c4c:	2000344d 	.word	0x2000344d
 8002c50:	2000344e 	.word	0x2000344e
 8002c54:	200034a4 	.word	0x200034a4

08002c58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <DMA1_Channel1_IRQHandler+0x10>)
 8002c5e:	f003 fdaf 	bl	80067c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000278 	.word	0x20000278

08002c6c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <ADC1_2_IRQHandler+0x10>)
 8002c72:	f001 ff03 	bl	8004a7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000020c 	.word	0x2000020c

08002c80 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <FDCAN1_IT0_IRQHandler+0x10>)
 8002c86:	f004 fb5b 	bl	8007340 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000388 	.word	0x20000388

08002c94 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <FDCAN1_IT1_IRQHandler+0x10>)
 8002c9a:	f004 fb51 	bl	8007340 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000388 	.word	0x20000388

08002ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <TIM2_IRQHandler+0x10>)
 8002cae:	f006 fea3 	bl	80099f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200034ac 	.word	0x200034ac

08002cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	  if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8002cc2:	482a      	ldr	r0, [pc, #168]	; (8002d6c <USART1_IRQHandler+0xb0>)
 8002cc4:	f7ff fd3e 	bl	8002744 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d04a      	beq.n	8002d64 <USART1_IRQHandler+0xa8>
	      // Les motatt byte og initaliser variabler
	      char rx_data = LL_USART_ReceiveData8(USART1);
 8002cce:	4827      	ldr	r0, [pc, #156]	; (8002d6c <USART1_IRQHandler+0xb0>)
 8002cd0:	f7ff fd4b 	bl	800276a <LL_USART_ReceiveData8>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
	      static uint8_t rx_buffer_nr = 0, rx_index = 0;
	      // Sjekk om ny byte er Line feed eller Carriage return
	      if ((rx_data == '\r') || (rx_data == '\n')) {
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	2b0d      	cmp	r3, #13
 8002cdc:	d002      	beq.n	8002ce4 <USART1_IRQHandler+0x28>
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b0a      	cmp	r3, #10
 8002ce2:	d127      	bne.n	8002d34 <USART1_IRQHandler+0x78>
	    	  // Avslutt streng med \0 streng terminering
	    	  rx_buffer[rx_buffer_nr++][rx_index] = '\0';
 8002ce4:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <USART1_IRQHandler+0xb4>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	b2d1      	uxtb	r1, r2
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <USART1_IRQHandler+0xb4>)
 8002cee:	7011      	strb	r1, [r2, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <USART1_IRQHandler+0xb8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <USART1_IRQHandler+0xbc>)
 8002cfa:	01c3      	lsls	r3, r0, #7
 8002cfc:	4413      	add	r3, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
	          // Reset buffer index for neste melding
	          rx_index = 0;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <USART1_IRQHandler+0xb8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
	          new_uart++;
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <USART1_IRQHandler+0xc0>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <USART1_IRQHandler+0xc0>)
 8002d14:	701a      	strb	r2, [r3, #0]
	          if (new_uart>10){
 8002d16:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <USART1_IRQHandler+0xc0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b0a      	cmp	r3, #10
 8002d1c:	d902      	bls.n	8002d24 <USART1_IRQHandler+0x68>
	            new_uart=10;
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <USART1_IRQHandler+0xc0>)
 8002d20:	220a      	movs	r2, #10
 8002d22:	701a      	strb	r2, [r3, #0]
	            }
	          if(rx_buffer_nr>=MAX_AMOUNT_BUFFERS){
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <USART1_IRQHandler+0xb4>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d913      	bls.n	8002d54 <USART1_IRQHandler+0x98>
	             rx_buffer_nr = 0;
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <USART1_IRQHandler+0xb4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
	          if(rx_buffer_nr>=MAX_AMOUNT_BUFFERS){
 8002d32:	e00f      	b.n	8002d54 <USART1_IRQHandler+0x98>
	            }

	        }
	        else {
	            // Lagre motatt byte i buffer
	            rx_buffer[rx_buffer_nr][rx_index++] = rx_data;
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <USART1_IRQHandler+0xb4>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <USART1_IRQHandler+0xb8>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	b2d1      	uxtb	r1, r2
 8002d42:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <USART1_IRQHandler+0xb8>)
 8002d44:	7011      	strb	r1, [r2, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <USART1_IRQHandler+0xbc>)
 8002d4a:	01c3      	lsls	r3, r0, #7
 8002d4c:	4413      	add	r3, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	79fa      	ldrb	r2, [r7, #7]
 8002d52:	701a      	strb	r2, [r3, #0]
	        	}
	            // Se etter buffer overflow
	        if (rx_index >= RX_BUFFER_SIZE) {
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <USART1_IRQHandler+0xb8>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b25b      	sxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	da02      	bge.n	8002d64 <USART1_IRQHandler+0xa8>
	            // Reset buffer index
	            rx_index = 0;
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <USART1_IRQHandler+0xb8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	200034a5 	.word	0x200034a5
 8002d74:	200034a6 	.word	0x200034a6
 8002d78:	20001620 	.word	0x20001620
 8002d7c:	2000161a 	.word	0x2000161a

08002d80 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <I2C3_EV_IRQHandler+0x10>)
 8002d86:	f005 fa1f 	bl	80081c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000424 	.word	0x20000424

08002d94 <HAL_FDCAN_RxFifo0Callback>:
// Definering av verdilister som hentes fra CANFD nettverk
uint8_t testV[3];
uint8_t ping[7];
uint8_t CAN_buffer[6];

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
	// Går gjennom alle meldinger i fifo bufferen
	while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8002d9e:	e035      	b.n	8002e0c <HAL_FDCAN_RxFifo0Callback+0x78>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_FDCAN_RxFifo0Callback+0x94>)
 8002da4:	2140      	movs	r1, #64	; 0x40
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f004 f8ac 	bl	8006f04 <HAL_FDCAN_GetRxMessage>

		idValue = (uint16_t)(RxHeader.Identifier & 0xFFF);
 8002dac:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_FDCAN_RxFifo0Callback+0x94>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <HAL_FDCAN_RxFifo0Callback+0x98>)
 8002dba:	801a      	strh	r2, [r3, #0]
	    switch (idValue) {
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_FDCAN_RxFifo0Callback+0x98>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d014      	beq.n	8002dee <HAL_FDCAN_RxFifo0Callback+0x5a>
 8002dc4:	2b09      	cmp	r3, #9
 8002dc6:	d120      	bne.n	8002e0a <HAL_FDCAN_RxFifo0Callback+0x76>
	        case Lytting:
	        	hexToValues(ping, RxData, sizeof(ping), uint8);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2207      	movs	r2, #7
 8002dcc:	4915      	ldr	r1, [pc, #84]	; (8002e24 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8002dce:	4818      	ldr	r0, [pc, #96]	; (8002e30 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8002dd0:	f7ff f900 	bl	8001fd4 <hexToValues>
	        	ping[1] = ping[1] +1;
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8002dde:	705a      	strb	r2, [r3, #1]
	        	SendData(Sensor_slutt, ping, sizeof(ping), uint8);
 8002de0:	2300      	movs	r3, #0
 8002de2:	2207      	movs	r2, #7
 8002de4:	4912      	ldr	r1, [pc, #72]	; (8002e30 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8002de6:	20bf      	movs	r0, #191	; 0xbf
 8002de8:	f7fe fe96 	bl	8001b18 <SendData>
	            break;
 8002dec:	e00e      	b.n	8002e0c <HAL_FDCAN_RxFifo0Callback+0x78>
	        case Kommunikasjon_start:
	        	hexToValues(CAN_buffer, RxData, sizeof(CAN_buffer), uint8);
 8002dee:	2300      	movs	r3, #0
 8002df0:	2206      	movs	r2, #6
 8002df2:	490c      	ldr	r1, [pc, #48]	; (8002e24 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8002df4:	480f      	ldr	r0, [pc, #60]	; (8002e34 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8002df6:	f7ff f8ed 	bl	8001fd4 <hexToValues>
	        	dvl_cmd = CAN_buffer[0];
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8002e00:	701a      	strb	r2, [r3, #0]
	        	send_dvl = 1;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
				break;
 8002e08:	e000      	b.n	8002e0c <HAL_FDCAN_RxFifo0Callback+0x78>
	        default:
	            break;
 8002e0a:	bf00      	nop
	while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f004 f980 	bl	8007114 <HAL_FDCAN_GetRxFifoFillLevel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1c2      	bne.n	8002da0 <HAL_FDCAN_RxFifo0Callback+0xc>
	    }
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20003454 	.word	0x20003454
 8002e28:	20000360 	.word	0x20000360
 8002e2c:	20003450 	.word	0x20003450
 8002e30:	20003494 	.word	0x20003494
 8002e34:	2000349c 	.word	0x2000349c
 8002e38:	2000344f 	.word	0x2000344f
 8002e3c:	20001619 	.word	0x20001619

08002e40 <HAL_FDCAN_RxFifo1Callback>:


void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	// Går gjennom alle meldinger i fifo bufferen
	while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO1) > 0) {
 8002e4a:	e013      	b.n	8002e74 <HAL_FDCAN_RxFifo1Callback+0x34>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData);
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <HAL_FDCAN_RxFifo1Callback+0x4c>)
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <HAL_FDCAN_RxFifo1Callback+0x50>)
 8002e50:	2141      	movs	r1, #65	; 0x41
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f004 f856 	bl	8006f04 <HAL_FDCAN_GetRxMessage>

		idValue = (uint16_t)(RxHeader.Identifier & 0xFFF);
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_FDCAN_RxFifo1Callback+0x50>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_FDCAN_RxFifo1Callback+0x54>)
 8002e66:	801a      	strh	r2, [r3, #0]
	    switch (idValue) {
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_FDCAN_RxFifo1Callback+0x54>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d100      	bne.n	8002e72 <HAL_FDCAN_RxFifo1Callback+0x32>
	    	case 1:
	    		break;
 8002e70:	e000      	b.n	8002e74 <HAL_FDCAN_RxFifo1Callback+0x34>
	    	default:
	            break;
 8002e72:	bf00      	nop
	while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO1) > 0) {
 8002e74:	2141      	movs	r1, #65	; 0x41
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f004 f94c 	bl	8007114 <HAL_FDCAN_GetRxFifoFillLevel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e4      	bne.n	8002e4c <HAL_FDCAN_RxFifo1Callback+0xc>
	    }
	}
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20003454 	.word	0x20003454
 8002e90:	20000360 	.word	0x20000360
 8002e94:	20003450 	.word	0x20003450

08002e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return 1;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_kill>:

int _kill(int pid, int sig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eb2:	f009 f9a3 	bl	800c1fc <__errno>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2216      	movs	r2, #22
 8002eba:	601a      	str	r2, [r3, #0]
  return -1;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_exit>:

void _exit (int status)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ffe7 	bl	8002ea8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eda:	e7fe      	b.n	8002eda <_exit+0x12>

08002edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e00a      	b.n	8002f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eee:	f3af 8000 	nop.w
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	b2ca      	uxtb	r2, r1
 8002efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbf0      	blt.n	8002eee <_read+0x12>
  }

  return len;
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e009      	b.n	8002f3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	60ba      	str	r2, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	dbf1      	blt.n	8002f28 <_write+0x12>
  }
  return len;
 8002f44:	687b      	ldr	r3, [r7, #4]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_close>:

int _close(int file)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f76:	605a      	str	r2, [r3, #4]
  return 0;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <_isatty>:

int _isatty(int file)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <_sbrk+0x5c>)
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <_sbrk+0x60>)
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <_sbrk+0x64>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <_sbrk+0x64>)
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <_sbrk+0x68>)
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d207      	bcs.n	8002ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe8:	f009 f908 	bl	800c1fc <__errno>
 8002fec:	4603      	mov	r3, r0
 8002fee:	220c      	movs	r2, #12
 8002ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff6:	e009      	b.n	800300c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <_sbrk+0x64>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <_sbrk+0x64>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <_sbrk+0x64>)
 8003008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20020000 	.word	0x20020000
 8003018:	00000400 	.word	0x00000400
 800301c:	200034a8 	.word	0x200034a8
 8003020:	200036a0 	.word	0x200036a0

08003024 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <SystemInit+0x20>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <SystemInit+0x20>)
 8003030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304e:	f107 0320 	add.w	r3, r7, #32
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800306c:	463b      	mov	r3, r7
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003076:	4b28      	ldr	r3, [pc, #160]	; (8003118 <MX_TIM2_Init+0xd0>)
 8003078:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800307c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <MX_TIM2_Init+0xd0>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <MX_TIM2_Init+0xd0>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800308a:	4b23      	ldr	r3, [pc, #140]	; (8003118 <MX_TIM2_Init+0xd0>)
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <MX_TIM2_Init+0xd0>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003098:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <MX_TIM2_Init+0xd0>)
 800309a:	2200      	movs	r2, #0
 800309c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800309e:	481e      	ldr	r0, [pc, #120]	; (8003118 <MX_TIM2_Init+0xd0>)
 80030a0:	f006 fbe2 	bl	8009868 <HAL_TIM_Base_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80030aa:	f7ff fb21 	bl	80026f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80030ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030b2:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030c0:	f107 0320 	add.w	r3, r7, #32
 80030c4:	4619      	mov	r1, r3
 80030c6:	4814      	ldr	r0, [pc, #80]	; (8003118 <MX_TIM2_Init+0xd0>)
 80030c8:	f006 fde6 	bl	8009c98 <HAL_TIM_ConfigClockSource>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80030d2:	f7ff fb0d 	bl	80026f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	4619      	mov	r1, r3
 80030e4:	480c      	ldr	r0, [pc, #48]	; (8003118 <MX_TIM2_Init+0xd0>)
 80030e6:	f006 fee3 	bl	8009eb0 <HAL_TIM_SlaveConfigSynchro>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80030f0:	f7ff fafe 	bl	80026f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f4:	2300      	movs	r3, #0
 80030f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030fc:	463b      	mov	r3, r7
 80030fe:	4619      	mov	r1, r3
 8003100:	4805      	ldr	r0, [pc, #20]	; (8003118 <MX_TIM2_Init+0xd0>)
 8003102:	f007 f96f 	bl	800a3e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 800310c:	f7ff faf0 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003110:	bf00      	nop
 8003112:	3730      	adds	r7, #48	; 0x30
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	200034ac 	.word	0x200034ac

0800311c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <MX_TIM3_Init+0x98>)
 800313c:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <MX_TIM3_Init+0x9c>)
 800313e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8003140:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <MX_TIM3_Init+0x98>)
 8003142:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8003146:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <MX_TIM3_Init+0x98>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <MX_TIM3_Init+0x98>)
 8003150:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003154:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <MX_TIM3_Init+0x98>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800315c:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <MX_TIM3_Init+0x98>)
 800315e:	2200      	movs	r2, #0
 8003160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003162:	4814      	ldr	r0, [pc, #80]	; (80031b4 <MX_TIM3_Init+0x98>)
 8003164:	f006 fb80 	bl	8009868 <HAL_TIM_Base_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800316e:	f7ff fabf 	bl	80026f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003178:	f107 0310 	add.w	r3, r7, #16
 800317c:	4619      	mov	r1, r3
 800317e:	480d      	ldr	r0, [pc, #52]	; (80031b4 <MX_TIM3_Init+0x98>)
 8003180:	f006 fd8a 	bl	8009c98 <HAL_TIM_ConfigClockSource>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800318a:	f7ff fab1 	bl	80026f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4806      	ldr	r0, [pc, #24]	; (80031b4 <MX_TIM3_Init+0x98>)
 800319c:	f007 f922 	bl	800a3e4 <HAL_TIMEx_MasterConfigSynchronization>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80031a6:	f7ff faa3 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200034f8 	.word	0x200034f8
 80031b8:	40000400 	.word	0x40000400

080031bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d131      	bne.n	8003242 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031de:	4b23      	ldr	r3, [pc, #140]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	4a22      	ldr	r2, [pc, #136]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800320e:	2320      	movs	r3, #32
 8003210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800321e:	2302      	movs	r3, #2
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	4619      	mov	r1, r3
 8003228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800322c:	f004 fba0 	bl	8007970 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2105      	movs	r1, #5
 8003234:	201c      	movs	r0, #28
 8003236:	f003 f820 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800323a:	201c      	movs	r0, #28
 800323c:	f003 f837 	bl	80062ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003240:	e010      	b.n	8003264 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM3)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_TIM_Base_MspInit+0xb4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d10b      	bne.n	8003264 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	6593      	str	r3, [r2, #88]	; 0x58
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <HAL_TIM_Base_MspInit+0xb0>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
}
 8003264:	bf00      	nop
 8003266:	3728      	adds	r7, #40	; 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	40000400 	.word	0x40000400

08003274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <__NVIC_GetPriorityGrouping+0x18>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0307 	and.w	r3, r3, #7
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db0b      	blt.n	80032ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4907      	ldr	r1, [pc, #28]	; (80032c8 <__NVIC_EnableIRQ+0x38>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2001      	movs	r0, #1
 80032b2:	fa00 f202 	lsl.w	r2, r0, r2
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	; (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	; (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	; 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
         );
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_USART_Enable>:
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_USART_DisableFIFO>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_USART_SetTXFIFOThreshold>:
{
 80033c6:	b480      	push	{r7}
 80033c8:	b089      	sub	sp, #36	; 0x24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3308      	adds	r3, #8
 80033d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	075b      	lsls	r3, r3, #29
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3308      	adds	r3, #8
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	61ba      	str	r2, [r7, #24]
 80033f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6979      	ldr	r1, [r7, #20]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e4      	bne.n	80033d0 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	3724      	adds	r7, #36	; 0x24
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_USART_SetRXFIFOThreshold>:
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3308      	adds	r3, #8
 8003422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	60bb      	str	r3, [r7, #8]
   return(result);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	065b      	lsls	r3, r3, #25
 8003436:	4313      	orrs	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3308      	adds	r3, #8
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	61ba      	str	r2, [r7, #24]
 8003442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	6979      	ldr	r1, [r7, #20]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	613b      	str	r3, [r7, #16]
   return(result);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e4      	bne.n	800341e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_USART_ConfigAsyncMode>:
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	609a      	str	r2, [r3, #8]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <LL_USART_IsActiveFlag_TC>:
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d101      	bne.n	80034a6 <LL_USART_IsActiveFlag_TC+0x18>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_USART_IsActiveFlag_TC+0x1a>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d101      	bne.n	80034cc <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_USART_IsActiveFlag_TEACK>:
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ee:	d101      	bne.n	80034f4 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_USART_IsActiveFlag_REACK>:
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003516:	d101      	bne.n	800351c <LL_USART_IsActiveFlag_REACK+0x1a>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <LL_USART_IsActiveFlag_REACK+0x1c>
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003554:	4907      	ldr	r1, [pc, #28]	; (8003574 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4313      	orrs	r3, r2
 800355a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800355e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4013      	ands	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40021000 	.word	0x40021000

08003578 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003582:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4313      	orrs	r3, r2
 800358a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800358e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4013      	ands	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003596:	68fb      	ldr	r3, [r7, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40021000 	.word	0x40021000

080035a8 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b0a4      	sub	sp, #144	; 0x90
 80035ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */


  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80035ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035b2:	2220      	movs	r2, #32
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f008 fd53 	bl	800c062 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
 80035cc:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	2254      	movs	r2, #84	; 0x54
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f008 fd44 	bl	800c062 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035da:	2301      	movs	r3, #1
 80035dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f005 fef1 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
 80035f0:	f7ff f87e 	bl	80026f0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80035f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035f8:	f7ff ffbe 	bl	8003578 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80035fc:	2004      	movs	r0, #4
 80035fe:	f7ff ffa3 	bl	8003548 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PC4   ------> USART1_TX
  PC5   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8003602:	2310      	movs	r3, #16
 8003604:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003606:	2302      	movs	r3, #2
 8003608:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003612:	2300      	movs	r3, #0
 8003614:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003616:	2307      	movs	r3, #7
 8003618:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800361e:	4619      	mov	r1, r3
 8003620:	4831      	ldr	r0, [pc, #196]	; (80036e8 <MX_USART1_UART_Init+0x140>)
 8003622:	f007 f906 	bl	800a832 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003626:	2320      	movs	r3, #32
 8003628:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800362a:	2302      	movs	r3, #2
 800362c:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003636:	2300      	movs	r3, #0
 8003638:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800363a:	2307      	movs	r3, #7
 800363c:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800363e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003642:	4619      	mov	r1, r3
 8003644:	4828      	ldr	r0, [pc, #160]	; (80036e8 <MX_USART1_UART_Init+0x140>)
 8003646:	f007 f8f4 	bl	800a832 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800364a:	f7ff fe13 	bl	8003274 <__NVIC_GetPriorityGrouping>
 800364e:	4603      	mov	r3, r0
 8003650:	2200      	movs	r2, #0
 8003652:	2102      	movs	r1, #2
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fe63 	bl	8003320 <NVIC_EncodePriority>
 800365a:	4603      	mov	r3, r0
 800365c:	4619      	mov	r1, r3
 800365e:	2025      	movs	r0, #37	; 0x25
 8003660:	f7ff fe34 	bl	80032cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003664:	2025      	movs	r0, #37	; 0x25
 8003666:	f7ff fe13 	bl	8003290 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800366a:	2300      	movs	r3, #0
 800366c:	673b      	str	r3, [r7, #112]	; 0x70
  USART_InitStruct.BaudRate = 115200;
 800366e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003672:	677b      	str	r3, [r7, #116]	; 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003674:	2300      	movs	r3, #0
 8003676:	67bb      	str	r3, [r7, #120]	; 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003678:	2300      	movs	r3, #0
 800367a:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003682:	230c      	movs	r3, #12
 8003684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003694:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003698:	4619      	mov	r1, r3
 800369a:	4814      	ldr	r0, [pc, #80]	; (80036ec <MX_USART1_UART_Init+0x144>)
 800369c:	f007 fc7e 	bl	800af9c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80036a0:	2100      	movs	r1, #0
 80036a2:	4812      	ldr	r0, [pc, #72]	; (80036ec <MX_USART1_UART_Init+0x144>)
 80036a4:	f7ff fe8f 	bl	80033c6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80036a8:	2100      	movs	r1, #0
 80036aa:	4810      	ldr	r0, [pc, #64]	; (80036ec <MX_USART1_UART_Init+0x144>)
 80036ac:	f7ff feb2 	bl	8003414 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 80036b0:	480e      	ldr	r0, [pc, #56]	; (80036ec <MX_USART1_UART_Init+0x144>)
 80036b2:	f7ff fe78 	bl	80033a6 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 80036b6:	480d      	ldr	r0, [pc, #52]	; (80036ec <MX_USART1_UART_Init+0x144>)
 80036b8:	f7ff fed3 	bl	8003462 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 80036bc:	480b      	ldr	r0, [pc, #44]	; (80036ec <MX_USART1_UART_Init+0x144>)
 80036be:	f7ff fe62 	bl	8003386 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 80036c2:	bf00      	nop
 80036c4:	4809      	ldr	r0, [pc, #36]	; (80036ec <MX_USART1_UART_Init+0x144>)
 80036c6:	f7ff ff08 	bl	80034da <LL_USART_IsActiveFlag_TEACK>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f9      	beq.n	80036c4 <MX_USART1_UART_Init+0x11c>
 80036d0:	4806      	ldr	r0, [pc, #24]	; (80036ec <MX_USART1_UART_Init+0x144>)
 80036d2:	f7ff ff16 	bl	8003502 <LL_USART_IsActiveFlag_REACK>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f3      	beq.n	80036c4 <MX_USART1_UART_Init+0x11c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3790      	adds	r7, #144	; 0x90
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	48000800 	.word	0x48000800
 80036ec:	40013800 	.word	0x40013800

080036f0 <Parse_msg>:

/* USER CODE BEGIN 1 */
void Parse_msg(void){
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
	// Initialiserer indexer
	static uint8_t read_index = 0;
	uint8_t write_index = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
	// Definerer hvor strenger skal spittes
	const char delim[] = ",";
 80036fa:	232c      	movs	r3, #44	; 0x2c
 80036fc:	803b      	strh	r3, [r7, #0]
	// Henter streng fra buffer
	char* str= rx_buffer[read_index];
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <Parse_msg+0x8c>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	01db      	lsls	r3, r3, #7
 8003704:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <Parse_msg+0x90>)
 8003706:	4413      	add	r3, r2
 8003708:	607b      	str	r3, [r7, #4]
	//
	// Splitter streng
	char* token = strtok(str,delim);
 800370a:	463b      	mov	r3, r7
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f008 fcc2 	bl	800c098 <strtok>
 8003714:	60b8      	str	r0, [r7, #8]
	// For alle ord i streng
	while(token != NULL){
 8003716:	e01c      	b.n	8003752 <Parse_msg+0x62>
		strcpy(DVL_Parced[read_index][write_index++], token);
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <Parse_msg+0x8c>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	73f9      	strb	r1, [r7, #15]
 8003724:	4619      	mov	r1, r3
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	440b      	add	r3, r1
 8003732:	01db      	lsls	r3, r3, #7
 8003734:	4a13      	ldr	r2, [pc, #76]	; (8003784 <Parse_msg+0x94>)
 8003736:	4413      	add	r3, r2
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f008 fd8b 	bl	800c256 <strcpy>
		token = strtok(NULL,delim);
 8003740:	463b      	mov	r3, r7
 8003742:	4619      	mov	r1, r3
 8003744:	2000      	movs	r0, #0
 8003746:	f008 fca7 	bl	800c098 <strtok>
 800374a:	60b8      	str	r0, [r7, #8]
		if (write_index>MAX_WORD_LENGTH){
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d810      	bhi.n	8003774 <Parse_msg+0x84>
	while(token != NULL){
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1df      	bne.n	8003718 <Parse_msg+0x28>
			return;
		}
	}
	// Inkrementerer og sjekker for overflow
	read_index++;
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <Parse_msg+0x8c>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <Parse_msg+0x8c>)
 8003762:	701a      	strb	r2, [r3, #0]
	if (read_index>=MAX_AMOUNT_BUFFERS){
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <Parse_msg+0x8c>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d904      	bls.n	8003776 <Parse_msg+0x86>
		read_index = 0;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <Parse_msg+0x8c>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e000      	b.n	8003776 <Parse_msg+0x86>
			return;
 8003774:	bf00      	nop
	}
}
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20003544 	.word	0x20003544
 8003780:	20001620 	.word	0x20001620
 8003784:	200018a0 	.word	0x200018a0

08003788 <Process_msg>:

void Process_msg(void){
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
	// Index for kontroll av avlest melding
	static int process_index = 0;
	// Sjekk om ny melding er splittet
	if (new_uart > 0){
 800378e:	4b9f      	ldr	r3, [pc, #636]	; (8003a0c <Process_msg+0x284>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 820e 	beq.w	8003bb4 <Process_msg+0x42c>
		while (new_uart-- >=1){
 8003798:	e203      	b.n	8003ba2 <Process_msg+0x41a>
			Parse_msg();
 800379a:	f7ff ffa9 	bl	80036f0 <Parse_msg>
			int word=0;
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
			/* Alle motatte meldinger starter med W(waterlinked) og R(Response)
			vi trenger derfor bare se på det tredje tegnet for å finne ut hvilken meldingstype det er
			send_msg er en bitmaske som beskriver hvilke meldinger som er blitt oppdatert*/

			switch (DVL_Parced[process_index][0][2]) {
 80037a2:	4b9b      	ldr	r3, [pc, #620]	; (8003a10 <Process_msg+0x288>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a9b      	ldr	r2, [pc, #620]	; (8003a14 <Process_msg+0x28c>)
 80037a8:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	3302      	adds	r3, #2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b7a      	cmp	r3, #122	; 0x7a
 80037b8:	f300 81e9 	bgt.w	8003b8e <Process_msg+0x406>
 80037bc:	2b61      	cmp	r3, #97	; 0x61
 80037be:	da06      	bge.n	80037ce <Process_msg+0x46>
 80037c0:	2b21      	cmp	r3, #33	; 0x21
 80037c2:	f000 81cc 	beq.w	8003b5e <Process_msg+0x3d6>
 80037c6:	2b3f      	cmp	r3, #63	; 0x3f
 80037c8:	f000 81c1 	beq.w	8003b4e <Process_msg+0x3c6>
 80037cc:	e1df      	b.n	8003b8e <Process_msg+0x406>
 80037ce:	3b61      	subs	r3, #97	; 0x61
 80037d0:	2b19      	cmp	r3, #25
 80037d2:	f200 81dc 	bhi.w	8003b8e <Process_msg+0x406>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <Process_msg+0x54>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	08003b6f 	.word	0x08003b6f
 80037e0:	08003b8f 	.word	0x08003b8f
 80037e4:	08003b8f 	.word	0x08003b8f
 80037e8:	08003b8f 	.word	0x08003b8f
 80037ec:	08003b8f 	.word	0x08003b8f
 80037f0:	08003b8f 	.word	0x08003b8f
 80037f4:	08003b8f 	.word	0x08003b8f
 80037f8:	08003b8f 	.word	0x08003b8f
 80037fc:	08003b8f 	.word	0x08003b8f
 8003800:	08003b8f 	.word	0x08003b8f
 8003804:	08003b8f 	.word	0x08003b8f
 8003808:	08003b8f 	.word	0x08003b8f
 800380c:	08003b8f 	.word	0x08003b8f
 8003810:	08003b7f 	.word	0x08003b7f
 8003814:	08003b8f 	.word	0x08003b8f
 8003818:	08003a45 	.word	0x08003a45
 800381c:	08003b8f 	.word	0x08003b8f
 8003820:	08003b8f 	.word	0x08003b8f
 8003824:	08003b8f 	.word	0x08003b8f
 8003828:	08003b8f 	.word	0x08003b8f
 800382c:	0800394f 	.word	0x0800394f
 8003830:	08003b8f 	.word	0x08003b8f
 8003834:	08003b8f 	.word	0x08003b8f
 8003838:	08003b8f 	.word	0x08003b8f
 800383c:	08003b8f 	.word	0x08003b8f
 8003840:	08003845 	.word	0x08003845
			  case 'z': // Velocity report wrz

				  strcpy(wrz.vx,DVL_Parced[process_index][1]);
 8003844:	4b72      	ldr	r3, [pc, #456]	; (8003a10 <Process_msg+0x288>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	3380      	adds	r3, #128	; 0x80
 8003852:	4a70      	ldr	r2, [pc, #448]	; (8003a14 <Process_msg+0x28c>)
 8003854:	4413      	add	r3, r2
 8003856:	4619      	mov	r1, r3
 8003858:	486f      	ldr	r0, [pc, #444]	; (8003a18 <Process_msg+0x290>)
 800385a:	f008 fcfc 	bl	800c256 <strcpy>
				  strcpy(wrz.vy,DVL_Parced[process_index][2]);
 800385e:	4b6c      	ldr	r3, [pc, #432]	; (8003a10 <Process_msg+0x288>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800386e:	4a69      	ldr	r2, [pc, #420]	; (8003a14 <Process_msg+0x28c>)
 8003870:	4413      	add	r3, r2
 8003872:	4619      	mov	r1, r3
 8003874:	4869      	ldr	r0, [pc, #420]	; (8003a1c <Process_msg+0x294>)
 8003876:	f008 fcee 	bl	800c256 <strcpy>
				  strcpy(wrz.valid,DVL_Parced[process_index][3]);
 800387a:	4b65      	ldr	r3, [pc, #404]	; (8003a10 <Process_msg+0x288>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800388a:	4a62      	ldr	r2, [pc, #392]	; (8003a14 <Process_msg+0x28c>)
 800388c:	4413      	add	r3, r2
 800388e:	4619      	mov	r1, r3
 8003890:	4863      	ldr	r0, [pc, #396]	; (8003a20 <Process_msg+0x298>)
 8003892:	f008 fce0 	bl	800c256 <strcpy>
				  strcpy(wrz.altitude,DVL_Parced[process_index][4]);
 8003896:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <Process_msg+0x288>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80038a6:	4a5b      	ldr	r2, [pc, #364]	; (8003a14 <Process_msg+0x28c>)
 80038a8:	4413      	add	r3, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	485d      	ldr	r0, [pc, #372]	; (8003a24 <Process_msg+0x29c>)
 80038ae:	f008 fcd2 	bl	800c256 <strcpy>
				  strcpy(wrz.merit_figure,DVL_Parced[process_index][5]);
 80038b2:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <Process_msg+0x288>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038c2:	4a54      	ldr	r2, [pc, #336]	; (8003a14 <Process_msg+0x28c>)
 80038c4:	4413      	add	r3, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	4857      	ldr	r0, [pc, #348]	; (8003a28 <Process_msg+0x2a0>)
 80038ca:	f008 fcc4 	bl	800c256 <strcpy>
				  strcpy(wrz.covariance,DVL_Parced[process_index][6]);
 80038ce:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <Process_msg+0x288>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80038de:	4a4d      	ldr	r2, [pc, #308]	; (8003a14 <Process_msg+0x28c>)
 80038e0:	4413      	add	r3, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	4851      	ldr	r0, [pc, #324]	; (8003a2c <Process_msg+0x2a4>)
 80038e6:	f008 fcb6 	bl	800c256 <strcpy>
				  strcpy(wrz.time_of_reflection,DVL_Parced[process_index][7]);
 80038ea:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <Process_msg+0x288>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80038fa:	4a46      	ldr	r2, [pc, #280]	; (8003a14 <Process_msg+0x28c>)
 80038fc:	4413      	add	r3, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	484b      	ldr	r0, [pc, #300]	; (8003a30 <Process_msg+0x2a8>)
 8003902:	f008 fca8 	bl	800c256 <strcpy>
				  strcpy(wrz.time_since_last_rep,DVL_Parced[process_index][9]);
 8003906:	4b42      	ldr	r3, [pc, #264]	; (8003a10 <Process_msg+0x288>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003916:	4a3f      	ldr	r2, [pc, #252]	; (8003a14 <Process_msg+0x28c>)
 8003918:	4413      	add	r3, r2
 800391a:	4619      	mov	r1, r3
 800391c:	4845      	ldr	r0, [pc, #276]	; (8003a34 <Process_msg+0x2ac>)
 800391e:	f008 fc9a 	bl	800c256 <strcpy>
				  strcpy(wrz.status,DVL_Parced[process_index][10]);
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <Process_msg+0x288>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	4a38      	ldr	r2, [pc, #224]	; (8003a14 <Process_msg+0x28c>)
 8003934:	4413      	add	r3, r2
 8003936:	4619      	mov	r1, r3
 8003938:	483f      	ldr	r0, [pc, #252]	; (8003a38 <Process_msg+0x2b0>)
 800393a:	f008 fc8c 	bl	800c256 <strcpy>

				  send_msg |= 0x1;
 800393e:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <Process_msg+0x2b4>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <Process_msg+0x2b4>)
 800394a:	701a      	strb	r2, [r3, #0]

				break;
 800394c:	e129      	b.n	8003ba2 <Process_msg+0x41a>
			  case 'u':   // Transducer report wru
				  // Finner ut hvilken transducer rapporten gjelder og lagrer data i struct
				  uint8_t tra_num = DVL_Parced[process_index][1][0] - '0';
 800394e:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <Process_msg+0x288>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a30      	ldr	r2, [pc, #192]	; (8003a14 <Process_msg+0x28c>)
 8003954:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	3380      	adds	r3, #128	; 0x80
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	3b30      	subs	r3, #48	; 0x30
 8003964:	70fb      	strb	r3, [r7, #3]
				  strcpy(wru.velocity[tra_num],DVL_Parced[process_index][1]);
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	3303      	adds	r3, #3
 800396a:	01db      	lsls	r3, r3, #7
 800396c:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <Process_msg+0x2b8>)
 800396e:	441a      	add	r2, r3
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <Process_msg+0x288>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	3380      	adds	r3, #128	; 0x80
 800397e:	4925      	ldr	r1, [pc, #148]	; (8003a14 <Process_msg+0x28c>)
 8003980:	440b      	add	r3, r1
 8003982:	4619      	mov	r1, r3
 8003984:	4610      	mov	r0, r2
 8003986:	f008 fc66 	bl	800c256 <strcpy>
				  strcpy(wru.distance[tra_num],DVL_Parced[process_index][2]);
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	3306      	adds	r3, #6
 800398e:	01db      	lsls	r3, r3, #7
 8003990:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <Process_msg+0x2b8>)
 8003992:	441a      	add	r2, r3
 8003994:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <Process_msg+0x288>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039a4:	491b      	ldr	r1, [pc, #108]	; (8003a14 <Process_msg+0x28c>)
 80039a6:	440b      	add	r3, r1
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f008 fc53 	bl	800c256 <strcpy>
				  strcpy(wru.rssi[tra_num],DVL_Parced[process_index][3]);
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	3309      	adds	r3, #9
 80039b4:	01db      	lsls	r3, r3, #7
 80039b6:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <Process_msg+0x2b8>)
 80039b8:	441a      	add	r2, r3
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <Process_msg+0x288>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80039ca:	4912      	ldr	r1, [pc, #72]	; (8003a14 <Process_msg+0x28c>)
 80039cc:	440b      	add	r3, r1
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f008 fc40 	bl	800c256 <strcpy>
				  strcpy(wru.nsd[tra_num],DVL_Parced[process_index][4]);
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	330c      	adds	r3, #12
 80039da:	01db      	lsls	r3, r3, #7
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <Process_msg+0x2b8>)
 80039de:	441a      	add	r2, r3
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <Process_msg+0x288>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80039f0:	4908      	ldr	r1, [pc, #32]	; (8003a14 <Process_msg+0x28c>)
 80039f2:	440b      	add	r3, r1
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f008 fc2d 	bl	800c256 <strcpy>

				  send_msg |= 0x2;
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <Process_msg+0x2b4>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	f043 0302 	orr.w	r3, r3, #2
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <Process_msg+0x2b4>)
 8003a08:	701a      	strb	r2, [r3, #0]
				break;
 8003a0a:	e0ca      	b.n	8003ba2 <Process_msg+0x41a>
 8003a0c:	2000161a 	.word	0x2000161a
 8003a10:	20003548 	.word	0x20003548
 8003a14:	200018a0 	.word	0x200018a0
 8003a18:	20000498 	.word	0x20000498
 8003a1c:	20000518 	.word	0x20000518
 8003a20:	20000618 	.word	0x20000618
 8003a24:	20000698 	.word	0x20000698
 8003a28:	20000718 	.word	0x20000718
 8003a2c:	20000798 	.word	0x20000798
 8003a30:	20000818 	.word	0x20000818
 8003a34:	20000918 	.word	0x20000918
 8003a38:	20000998 	.word	0x20000998
 8003a3c:	20001618 	.word	0x20001618
 8003a40:	20000a18 	.word	0x20000a18
			  case 'p':   // Dead reckogning report wrp
				  strcpy(wrp.time_stamp,DVL_Parced[process_index][1]);
 8003a44:	4b5d      	ldr	r3, [pc, #372]	; (8003bbc <Process_msg+0x434>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	3380      	adds	r3, #128	; 0x80
 8003a52:	4a5b      	ldr	r2, [pc, #364]	; (8003bc0 <Process_msg+0x438>)
 8003a54:	4413      	add	r3, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	485a      	ldr	r0, [pc, #360]	; (8003bc4 <Process_msg+0x43c>)
 8003a5a:	f008 fbfc 	bl	800c256 <strcpy>
				  strcpy(wrp.px,DVL_Parced[process_index][2]);
 8003a5e:	4b57      	ldr	r3, [pc, #348]	; (8003bbc <Process_msg+0x434>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a6e:	4a54      	ldr	r2, [pc, #336]	; (8003bc0 <Process_msg+0x438>)
 8003a70:	4413      	add	r3, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	4854      	ldr	r0, [pc, #336]	; (8003bc8 <Process_msg+0x440>)
 8003a76:	f008 fbee 	bl	800c256 <strcpy>
				  strcpy(wrp.py,DVL_Parced[process_index][3]);
 8003a7a:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <Process_msg+0x434>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a8a:	4a4d      	ldr	r2, [pc, #308]	; (8003bc0 <Process_msg+0x438>)
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	484e      	ldr	r0, [pc, #312]	; (8003bcc <Process_msg+0x444>)
 8003a92:	f008 fbe0 	bl	800c256 <strcpy>
				  strcpy(wrp.pz,DVL_Parced[process_index][4]);
 8003a96:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <Process_msg+0x434>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003aa6:	4a46      	ldr	r2, [pc, #280]	; (8003bc0 <Process_msg+0x438>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4848      	ldr	r0, [pc, #288]	; (8003bd0 <Process_msg+0x448>)
 8003aae:	f008 fbd2 	bl	800c256 <strcpy>
				  strcpy(wrp.pos_std,DVL_Parced[process_index][5]);
 8003ab2:	4b42      	ldr	r3, [pc, #264]	; (8003bbc <Process_msg+0x434>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ac2:	4a3f      	ldr	r2, [pc, #252]	; (8003bc0 <Process_msg+0x438>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4842      	ldr	r0, [pc, #264]	; (8003bd4 <Process_msg+0x44c>)
 8003aca:	f008 fbc4 	bl	800c256 <strcpy>
				  strcpy(wrp.roll,DVL_Parced[process_index][6]);
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <Process_msg+0x434>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003ade:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <Process_msg+0x438>)
 8003ae0:	4413      	add	r3, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	483c      	ldr	r0, [pc, #240]	; (8003bd8 <Process_msg+0x450>)
 8003ae6:	f008 fbb6 	bl	800c256 <strcpy>
				  strcpy(wrp.pitch,DVL_Parced[process_index][7]);
 8003aea:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <Process_msg+0x434>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8003afa:	4a31      	ldr	r2, [pc, #196]	; (8003bc0 <Process_msg+0x438>)
 8003afc:	4413      	add	r3, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	4836      	ldr	r0, [pc, #216]	; (8003bdc <Process_msg+0x454>)
 8003b02:	f008 fba8 	bl	800c256 <strcpy>
				  strcpy(wrp.yaw,DVL_Parced[process_index][8]);
 8003b06:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <Process_msg+0x434>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b16:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <Process_msg+0x438>)
 8003b18:	4413      	add	r3, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4830      	ldr	r0, [pc, #192]	; (8003be0 <Process_msg+0x458>)
 8003b1e:	f008 fb9a 	bl	800c256 <strcpy>
				  strcpy(wrp.status,DVL_Parced[process_index][9]);
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <Process_msg+0x434>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003b32:	4a23      	ldr	r2, [pc, #140]	; (8003bc0 <Process_msg+0x438>)
 8003b34:	4413      	add	r3, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	482a      	ldr	r0, [pc, #168]	; (8003be4 <Process_msg+0x45c>)
 8003b3a:	f008 fb8c 	bl	800c256 <strcpy>

				  send_msg |= 0x4;
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <Process_msg+0x460>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <Process_msg+0x460>)
 8003b4a:	701a      	strb	r2, [r3, #0]
				break;
 8003b4c:	e029      	b.n	8003ba2 <Process_msg+0x41a>
			  case '?':   // Malformed request, Request failed Unable to read request wr?

				  send_msg |= 0x8;
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <Process_msg+0x460>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	f043 0308 	orr.w	r3, r3, #8
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <Process_msg+0x460>)
 8003b5a:	701a      	strb	r2, [r3, #0]
				break;
 8003b5c:	e021      	b.n	8003ba2 <Process_msg+0x41a>
			  case '!':   // Malformed request, Request failed, Checksum error wr!

				  send_msg |= 0x10;
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <Process_msg+0x460>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	f043 0310 	orr.w	r3, r3, #16
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <Process_msg+0x460>)
 8003b6a:	701a      	strb	r2, [r3, #0]

				break;
 8003b6c:	e019      	b.n	8003ba2 <Process_msg+0x41a>
			  case 'a':   // Command recived and successfully applied wra
				  send_msg |= 0x20;
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <Process_msg+0x460>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	f043 0320 	orr.w	r3, r3, #32
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <Process_msg+0x460>)
 8003b7a:	701a      	strb	r2, [r3, #0]

				break;
 8003b7c:	e011      	b.n	8003ba2 <Process_msg+0x41a>
			  case 'n':   // Command recived but failed to apply wrn

				  send_msg |= 0x40;
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <Process_msg+0x460>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <Process_msg+0x460>)
 8003b8a:	701a      	strb	r2, [r3, #0]

				break;
 8003b8c:	e009      	b.n	8003ba2 <Process_msg+0x41a>
			  default:  // Feil i mottak av melding

			if (process_index++>MAX_AMOUNT_BUFFERS){//Overflow
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <Process_msg+0x434>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	4909      	ldr	r1, [pc, #36]	; (8003bbc <Process_msg+0x434>)
 8003b96:	600a      	str	r2, [r1, #0]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	dd02      	ble.n	8003ba2 <Process_msg+0x41a>
				process_index=0;
 8003b9c:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <Process_msg+0x434>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
		while (new_uart-- >=1){
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <Process_msg+0x464>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	1e5a      	subs	r2, r3, #1
 8003ba8:	b2d1      	uxtb	r1, r2
 8003baa:	4a10      	ldr	r2, [pc, #64]	; (8003bec <Process_msg+0x464>)
 8003bac:	7011      	strb	r1, [r2, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f47f adf3 	bne.w	800379a <Process_msg+0x12>
				}
			}
		}
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20003548 	.word	0x20003548
 8003bc0:	200018a0 	.word	0x200018a0
 8003bc4:	20001198 	.word	0x20001198
 8003bc8:	20001218 	.word	0x20001218
 8003bcc:	20001298 	.word	0x20001298
 8003bd0:	20001318 	.word	0x20001318
 8003bd4:	20001398 	.word	0x20001398
 8003bd8:	20001418 	.word	0x20001418
 8003bdc:	20001498 	.word	0x20001498
 8003be0:	20001518 	.word	0x20001518
 8003be4:	20001598 	.word	0x20001598
 8003be8:	20001618 	.word	0x20001618
 8003bec:	2000161a 	.word	0x2000161a

08003bf0 <UART1_update>:

void UART1_update(uint8_t cmd){
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b0a5      	sub	sp, #148	; 0x94
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	71fb      	strb	r3, [r7, #7]
	static uint8_t current_config = 0x01;
	if (cmd&0x04){
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <UART1_update+0x24>
		char cal_gyro[] = "wrg";
 8003c04:	4b55      	ldr	r3, [pc, #340]	; (8003d5c <UART1_update+0x16c>)
 8003c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		UART1_sendcmd(cal_gyro);
 8003c0a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f8ba 	bl	8003d88 <UART1_sendcmd>
		}
	if (cmd&0x08){
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <UART1_update+0x3e>
		char reset_dr[]= "wcr";
 8003c1e:	4b50      	ldr	r3, [pc, #320]	; (8003d60 <UART1_update+0x170>)
 8003c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			UART1_sendcmd(reset_dr);
 8003c24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f8ad 	bl	8003d88 <UART1_sendcmd>
	}

	//[][][][fresh_water][Reset_DR][Calibrate_gyro][Dark_mode_enable],[Acoustic_enable]
	//wcs = wrc,[speed_of_sound],[mounting_rotation_offset],[acoustic_enabled],[dark_mode_enabled],[range_mode],[periodic_cycling_enabled]
	current_config = (cmd & 0x13);
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	f003 0313 	and.w	r3, r3, #19
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <UART1_update+0x174>)
 8003c38:	701a      	strb	r2, [r3, #0]
	switch (current_config & 0x13){
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <UART1_update+0x174>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f003 0313 	and.w	r3, r3, #19
 8003c42:	2b13      	cmp	r3, #19
 8003c44:	f200 8084 	bhi.w	8003d50 <UART1_update+0x160>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART1_update+0x60>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003cb7 	.word	0x08003cb7
 8003c58:	08003ccd 	.word	0x08003ccd
 8003c5c:	08003ce3 	.word	0x08003ce3
 8003c60:	08003d51 	.word	0x08003d51
 8003c64:	08003d51 	.word	0x08003d51
 8003c68:	08003d51 	.word	0x08003d51
 8003c6c:	08003d51 	.word	0x08003d51
 8003c70:	08003cf9 	.word	0x08003cf9
 8003c74:	08003d51 	.word	0x08003d51
 8003c78:	08003d51 	.word	0x08003d51
 8003c7c:	08003d51 	.word	0x08003d51
 8003c80:	08003d51 	.word	0x08003d51
 8003c84:	08003d51 	.word	0x08003d51
 8003c88:	08003d51 	.word	0x08003d51
 8003c8c:	08003d51 	.word	0x08003d51
 8003c90:	08003d51 	.word	0x08003d51
 8003c94:	08003d0f 	.word	0x08003d0f
 8003c98:	08003d25 	.word	0x08003d25
 8003c9c:	08003d3b 	.word	0x08003d3b
		case 0b00000000:
			const char fresh_nn[] = "wcs,1481,,n,n,,";
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <UART1_update+0x178>)
 8003ca2:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8003ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(fresh_nn);
 8003cac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f869 	bl	8003d88 <UART1_sendcmd>
		case 0b00000001:
			const char fresh_yn[] = "wcs,1481,,y,n,,";
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <UART1_update+0x17c>)
 8003cb8:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8003cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(fresh_yn);
 8003cc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f85e 	bl	8003d88 <UART1_sendcmd>
		case 0b00000010:
			const char fresh_ny[] = "wcs,1481,,n,y,,";
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <UART1_update+0x180>)
 8003cce:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(fresh_ny);
 8003cd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f853 	bl	8003d88 <UART1_sendcmd>
		case 0b00000011:
			const char fresh_yy[] = "wcs,1481,,y,y,,";
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <UART1_update+0x184>)
 8003ce4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003ce8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(fresh_yy);
 8003cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f848 	bl	8003d88 <UART1_sendcmd>
		case 0b0001000:
			const char salt_nn[] = "wcs,1570,,n,n,,";
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <UART1_update+0x188>)
 8003cfa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(salt_nn);
 8003d04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f83d 	bl	8003d88 <UART1_sendcmd>
		case 0b00010001:
			const char salt_yn[] = "wcs,1570,,y,n,,";
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <UART1_update+0x18c>)
 8003d10:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(salt_yn);
 8003d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f832 	bl	8003d88 <UART1_sendcmd>
		case 0b00010010:
			const char salt_ny[] = "wcs,1570,,n,y,,";
 8003d24:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <UART1_update+0x190>)
 8003d26:	f107 0418 	add.w	r4, r7, #24
 8003d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(salt_ny);
 8003d30:	f107 0318 	add.w	r3, r7, #24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f827 	bl	8003d88 <UART1_sendcmd>
		case 0b00010011:
			const char salt_yy[] = "wcs,1570,,y,y,,";
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <UART1_update+0x194>)
 8003d3c:	f107 0408 	add.w	r4, r7, #8
 8003d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			UART1_sendcmd(salt_yy);
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f81c 	bl	8003d88 <UART1_sendcmd>
		default:
			break;
 8003d50:	bf00      	nop
	}


}
 8003d52:	bf00      	nop
 8003d54:	3794      	adds	r7, #148	; 0x94
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd90      	pop	{r4, r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	00677277 	.word	0x00677277
 8003d60:	00726377 	.word	0x00726377
 8003d64:	2000001c 	.word	0x2000001c
 8003d68:	0800ddec 	.word	0x0800ddec
 8003d6c:	0800ddfc 	.word	0x0800ddfc
 8003d70:	0800de0c 	.word	0x0800de0c
 8003d74:	0800de1c 	.word	0x0800de1c
 8003d78:	0800de2c 	.word	0x0800de2c
 8003d7c:	0800de3c 	.word	0x0800de3c
 8003d80:	0800de4c 	.word	0x0800de4c
 8003d84:	0800de5c 	.word	0x0800de5c

08003d88 <UART1_sendcmd>:

void UART1_sendcmd(const char *string){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	while(!LL_USART_IsActiveFlag_TXE(USART1)) {
 8003d90:	bf00      	nop
 8003d92:	481b      	ldr	r0, [pc, #108]	; (8003e00 <UART1_sendcmd+0x78>)
 8003d94:	f7ff fb8e 	bl	80034b4 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f9      	beq.n	8003d92 <UART1_sendcmd+0xa>

	    }
	    while(*string != '\0') {
 8003d9e:	e00f      	b.n	8003dc0 <UART1_sendcmd+0x38>
	        // Send tegn i strengen over UART1
	        LL_USART_TransmitData8(USART1, *string);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	4816      	ldr	r0, [pc, #88]	; (8003e00 <UART1_sendcmd+0x78>)
 8003da8:	f7ff fbbf 	bl	800352a <LL_USART_TransmitData8>

	        // Vent til sending av tegnet er ferdig
	        while(!LL_USART_IsActiveFlag_TC(USART1)) {
 8003dac:	bf00      	nop
 8003dae:	4814      	ldr	r0, [pc, #80]	; (8003e00 <UART1_sendcmd+0x78>)
 8003db0:	f7ff fb6d 	bl	800348e <LL_USART_IsActiveFlag_TC>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f9      	beq.n	8003dae <UART1_sendcmd+0x26>
	        }

	        // Gå til neste tegn i strengen
	        string++;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	607b      	str	r3, [r7, #4]
	    while(*string != '\0') {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1eb      	bne.n	8003da0 <UART1_sendcmd+0x18>
	    }
	    // Send carrige return ('\r') når hele strengen er sendt
	        LL_USART_TransmitData8(USART1, '\r');
 8003dc8:	210d      	movs	r1, #13
 8003dca:	480d      	ldr	r0, [pc, #52]	; (8003e00 <UART1_sendcmd+0x78>)
 8003dcc:	f7ff fbad 	bl	800352a <LL_USART_TransmitData8>

	        // Vent til hele sendingen er fullført
	        while(!LL_USART_IsActiveFlag_TC(USART1)) {
 8003dd0:	bf00      	nop
 8003dd2:	480b      	ldr	r0, [pc, #44]	; (8003e00 <UART1_sendcmd+0x78>)
 8003dd4:	f7ff fb5b 	bl	800348e <LL_USART_IsActiveFlag_TC>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f9      	beq.n	8003dd2 <UART1_sendcmd+0x4a>

	        }
		// Send line feed ('\n') når hele strengen er sendt
		    LL_USART_TransmitData8(USART1, '\n');
 8003dde:	210a      	movs	r1, #10
 8003de0:	4807      	ldr	r0, [pc, #28]	; (8003e00 <UART1_sendcmd+0x78>)
 8003de2:	f7ff fba2 	bl	800352a <LL_USART_TransmitData8>

		    // Vent til hele sendingen er fullført
		    while(!LL_USART_IsActiveFlag_TC(USART1)) {
 8003de6:	bf00      	nop
 8003de8:	4805      	ldr	r0, [pc, #20]	; (8003e00 <UART1_sendcmd+0x78>)
 8003dea:	f7ff fb50 	bl	800348e <LL_USART_IsActiveFlag_TC>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f9      	beq.n	8003de8 <UART1_sendcmd+0x60>

		    }
	}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40013800 	.word	0x40013800

08003e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e04:	480d      	ldr	r0, [pc, #52]	; (8003e3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e08:	f7ff f90c 	bl	8003024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e0c:	480c      	ldr	r0, [pc, #48]	; (8003e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e0e:	490d      	ldr	r1, [pc, #52]	; (8003e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e10:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <LoopForever+0xe>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e14:	e002      	b.n	8003e1c <LoopCopyDataInit>

08003e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1a:	3304      	adds	r3, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e20:	d3f9      	bcc.n	8003e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e24:	4c0a      	ldr	r4, [pc, #40]	; (8003e50 <LoopForever+0x16>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e28:	e001      	b.n	8003e2e <LoopFillZerobss>

08003e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e2c:	3204      	adds	r2, #4

08003e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e30:	d3fb      	bcc.n	8003e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e32:	f008 f9e9 	bl	800c208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e36:	f7fe faef 	bl	8002418 <main>

08003e3a <LoopForever>:

LoopForever:
    b LoopForever
 8003e3a:	e7fe      	b.n	8003e3a <LoopForever>
  ldr   r0, =_estack
 8003e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e44:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003e48:	0800e2e0 	.word	0x0800e2e0
  ldr r2, =_sbss
 8003e4c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003e50:	2000369c 	.word	0x2000369c

08003e54 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e54:	e7fe      	b.n	8003e54 <ADC3_IRQHandler>

08003e56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e60:	2003      	movs	r0, #3
 8003e62:	f002 f9ff 	bl	8006264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e66:	200f      	movs	r0, #15
 8003e68:	f000 f80e 	bl	8003e88 <HAL_InitTick>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	71fb      	strb	r3, [r7, #7]
 8003e76:	e001      	b.n	8003e7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e78:	f7fe fc40 	bl	80026fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e7c:	79fb      	ldrb	r3, [r7, #7]

}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <HAL_InitTick+0x68>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d022      	beq.n	8003ee2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003e9c:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <HAL_InitTick+0x6c>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_InitTick+0x68>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f002 fa0a 	bl	80062ca <HAL_SYSTICK_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	d809      	bhi.n	8003ed6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	f002 f9d6 	bl	800627a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <HAL_InitTick+0x70>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e007      	b.n	8003ee6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
 8003eda:	e004      	b.n	8003ee6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
 8003ee0:	e001      	b.n	8003ee6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000024 	.word	0x20000024
 8003ef4:	20000018 	.word	0x20000018
 8003ef8:	20000020 	.word	0x20000020

08003efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_IncTick+0x1c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_IncTick+0x20>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4413      	add	r3, r2
 8003f0a:	4a03      	ldr	r2, [pc, #12]	; (8003f18 <HAL_IncTick+0x1c>)
 8003f0c:	6013      	str	r3, [r2, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	2000354c 	.word	0x2000354c
 8003f1c:	20000024 	.word	0x20000024

08003f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return uwTick;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_GetTick+0x14>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2000354c 	.word	0x2000354c

08003f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f40:	f7ff ffee 	bl	8003f20 <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d004      	beq.n	8003f5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_Delay+0x40>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f5c:	bf00      	nop
 8003f5e:	f7ff ffdf 	bl	8003f20 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d8f7      	bhi.n	8003f5e <HAL_Delay+0x26>
  {
  }
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000024 	.word	0x20000024

08003f7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3360      	adds	r3, #96	; 0x60
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <LL_ADC_SetOffset+0x44>)
 8004006:	4013      	ands	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	03fff000 	.word	0x03fff000

0800402c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3360      	adds	r3, #96	; 0x60
 800403a:	461a      	mov	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3360      	adds	r3, #96	; 0x60
 8004068:	461a      	mov	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	431a      	orrs	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800408e:	b480      	push	{r7}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3360      	adds	r3, #96	; 0x60
 800409e:	461a      	mov	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3360      	adds	r3, #96	; 0x60
 80040d4:	461a      	mov	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	615a      	str	r2, [r3, #20]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3330      	adds	r3, #48	; 0x30
 8004156:	461a      	mov	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	4413      	add	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	211f      	movs	r1, #31
 8004172:	fa01 f303 	lsl.w	r3, r1, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	401a      	ands	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0e9b      	lsrs	r3, r3, #26
 800417e:	f003 011f 	and.w	r1, r3, #31
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	431a      	orrs	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041aa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3314      	adds	r3, #20
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	0e5b      	lsrs	r3, r3, #25
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	4413      	add	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	0d1b      	lsrs	r3, r3, #20
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2107      	movs	r1, #7
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	401a      	ands	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	0d1b      	lsrs	r3, r3, #20
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	431a      	orrs	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004234:	43db      	mvns	r3, r3
 8004236:	401a      	ands	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0318 	and.w	r3, r3, #24
 800423e:	4908      	ldr	r1, [pc, #32]	; (8004260 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004240:	40d9      	lsrs	r1, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	400b      	ands	r3, r1
 8004246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424a:	431a      	orrs	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	0007ffff 	.word	0x0007ffff

08004264 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 031f 	and.w	r3, r3, #31
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80042ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6093      	str	r3, [r2, #8]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d4:	d101      	bne.n	80042da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80042f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004324:	d101      	bne.n	800432a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800434c:	f043 0201 	orr.w	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004374:	f043 0202 	orr.w	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <LL_ADC_IsEnabled+0x18>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <LL_ADC_IsEnabled+0x1a>
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d101      	bne.n	80043c6 <LL_ADC_IsDisableOngoing+0x18>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <LL_ADC_IsDisableOngoing+0x1a>
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043e8:	f043 0204 	orr.w	r2, r3, #4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800440c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004410:	f043 0210 	orr.w	r2, r3, #16
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d101      	bne.n	800443c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800445a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b08      	cmp	r3, #8
 8004484:	d101      	bne.n	800448a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e1a9      	b.n	8004806 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd f8e1 	bl	8001688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fef1 	bl	80042c0 <LL_ADC_IsDeepPowerDownEnabled>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fed7 	bl	800429c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff ff0c 	bl	8004310 <LL_ADC_IsInternalRegulatorEnabled>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d115      	bne.n	800452a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fef0 	bl	80042e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004508:	4b9c      	ldr	r3, [pc, #624]	; (800477c <HAL_ADC_Init+0x2e4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	099b      	lsrs	r3, r3, #6
 800450e:	4a9c      	ldr	r2, [pc, #624]	; (8004780 <HAL_ADC_Init+0x2e8>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	3301      	adds	r3, #1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800451c:	e002      	b.n	8004524 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b01      	subs	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f9      	bne.n	800451e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff feee 	bl	8004310 <LL_ADC_IsInternalRegulatorEnabled>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff ff62 	bl	8004424 <LL_ADC_REG_IsConversionOngoing>
 8004560:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 8142 	bne.w	80047f4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 813e 	bne.w	80047f4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004580:	f043 0202 	orr.w	r2, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fefb 	bl	8004388 <LL_ADC_IsEnabled>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d141      	bne.n	800461c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a0:	d004      	beq.n	80045ac <HAL_ADC_Init+0x114>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a77      	ldr	r2, [pc, #476]	; (8004784 <HAL_ADC_Init+0x2ec>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10f      	bne.n	80045cc <HAL_ADC_Init+0x134>
 80045ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045b0:	f7ff feea 	bl	8004388 <LL_ADC_IsEnabled>
 80045b4:	4604      	mov	r4, r0
 80045b6:	4873      	ldr	r0, [pc, #460]	; (8004784 <HAL_ADC_Init+0x2ec>)
 80045b8:	f7ff fee6 	bl	8004388 <LL_ADC_IsEnabled>
 80045bc:	4603      	mov	r3, r0
 80045be:	4323      	orrs	r3, r4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e012      	b.n	80045f2 <HAL_ADC_Init+0x15a>
 80045cc:	486e      	ldr	r0, [pc, #440]	; (8004788 <HAL_ADC_Init+0x2f0>)
 80045ce:	f7ff fedb 	bl	8004388 <LL_ADC_IsEnabled>
 80045d2:	4604      	mov	r4, r0
 80045d4:	486d      	ldr	r0, [pc, #436]	; (800478c <HAL_ADC_Init+0x2f4>)
 80045d6:	f7ff fed7 	bl	8004388 <LL_ADC_IsEnabled>
 80045da:	4603      	mov	r3, r0
 80045dc:	431c      	orrs	r4, r3
 80045de:	486c      	ldr	r0, [pc, #432]	; (8004790 <HAL_ADC_Init+0x2f8>)
 80045e0:	f7ff fed2 	bl	8004388 <LL_ADC_IsEnabled>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4323      	orrs	r3, r4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d012      	beq.n	800461c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045fe:	d004      	beq.n	800460a <HAL_ADC_Init+0x172>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5f      	ldr	r2, [pc, #380]	; (8004784 <HAL_ADC_Init+0x2ec>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_ADC_Init+0x176>
 800460a:	4a62      	ldr	r2, [pc, #392]	; (8004794 <HAL_ADC_Init+0x2fc>)
 800460c:	e000      	b.n	8004610 <HAL_ADC_Init+0x178>
 800460e:	4a62      	ldr	r2, [pc, #392]	; (8004798 <HAL_ADC_Init+0x300>)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f7ff fcb0 	bl	8003f7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	7f5b      	ldrb	r3, [r3, #29]
 8004620:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004626:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800462c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004632:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800463a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004646:	2b01      	cmp	r3, #1
 8004648:	d106      	bne.n	8004658 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	3b01      	subs	r3, #1
 8004650:	045b      	lsls	r3, r3, #17
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	4b48      	ldr	r3, [pc, #288]	; (800479c <HAL_ADC_Init+0x304>)
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	430b      	orrs	r3, r1
 8004686:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fee5 	bl	8004472 <LL_ADC_INJ_IsConversionOngoing>
 80046a8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d17f      	bne.n	80047b0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d17c      	bne.n	80047b0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80046ba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d2:	f023 0302 	bic.w	r3, r3, #2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	430b      	orrs	r3, r1
 80046de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d017      	beq.n	8004718 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004700:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004704:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6911      	ldr	r1, [r2, #16]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	430b      	orrs	r3, r1
 8004712:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004716:	e013      	b.n	8004740 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004726:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800473c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004746:	2b01      	cmp	r3, #1
 8004748:	d12a      	bne.n	80047a0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004760:	4311      	orrs	r1, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004766:	4311      	orrs	r1, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800476c:	430a      	orrs	r2, r1
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	611a      	str	r2, [r3, #16]
 800477a:	e019      	b.n	80047b0 <HAL_ADC_Init+0x318>
 800477c:	20000018 	.word	0x20000018
 8004780:	053e2d63 	.word	0x053e2d63
 8004784:	50000100 	.word	0x50000100
 8004788:	50000400 	.word	0x50000400
 800478c:	50000500 	.word	0x50000500
 8004790:	50000600 	.word	0x50000600
 8004794:	50000300 	.word	0x50000300
 8004798:	50000700 	.word	0x50000700
 800479c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d10c      	bne.n	80047d2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f023 010f 	bic.w	r1, r3, #15
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	1e5a      	subs	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
 80047d0:	e007      	b.n	80047e2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 020f 	bic.w	r2, r2, #15
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	f043 0201 	orr.w	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80047f2:	e007      	b.n	8004804 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	f043 0210 	orr.w	r2, r3, #16
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004804:	7ffb      	ldrb	r3, [r7, #31]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3724      	adds	r7, #36	; 0x24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd90      	pop	{r4, r7, pc}
 800480e:	bf00      	nop

08004810 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004824:	d004      	beq.n	8004830 <HAL_ADC_Start_DMA+0x20>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a5a      	ldr	r2, [pc, #360]	; (8004994 <HAL_ADC_Start_DMA+0x184>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_ADC_Start_DMA+0x24>
 8004830:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_ADC_Start_DMA+0x188>)
 8004832:	e000      	b.n	8004836 <HAL_ADC_Start_DMA+0x26>
 8004834:	4b59      	ldr	r3, [pc, #356]	; (800499c <HAL_ADC_Start_DMA+0x18c>)
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fd14 	bl	8004264 <LL_ADC_GetMultimode>
 800483c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fdee 	bl	8004424 <LL_ADC_REG_IsConversionOngoing>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 809b 	bne.w	8004986 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_ADC_Start_DMA+0x4e>
 800485a:	2302      	movs	r3, #2
 800485c:	e096      	b.n	800498c <HAL_ADC_Start_DMA+0x17c>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a4d      	ldr	r2, [pc, #308]	; (80049a0 <HAL_ADC_Start_DMA+0x190>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d008      	beq.n	8004882 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b05      	cmp	r3, #5
 800487a:	d002      	beq.n	8004882 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b09      	cmp	r3, #9
 8004880:	d17a      	bne.n	8004978 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f001 f874 	bl	8005970 <ADC_Enable>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d16d      	bne.n	800496e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3a      	ldr	r2, [pc, #232]	; (8004994 <HAL_ADC_Start_DMA+0x184>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <HAL_ADC_Start_DMA+0xb4>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a3b      	ldr	r2, [pc, #236]	; (80049a4 <HAL_ADC_Start_DMA+0x194>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d002      	beq.n	80048c0 <HAL_ADC_Start_DMA+0xb0>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	e003      	b.n	80048c8 <HAL_ADC_Start_DMA+0xb8>
 80048c0:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <HAL_ADC_Start_DMA+0x198>)
 80048c2:	e001      	b.n	80048c8 <HAL_ADC_Start_DMA+0xb8>
 80048c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d002      	beq.n	80048d6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f2:	f023 0206 	bic.w	r2, r3, #6
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	661a      	str	r2, [r3, #96]	; 0x60
 80048fa:	e002      	b.n	8004902 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	4a29      	ldr	r2, [pc, #164]	; (80049ac <HAL_ADC_Start_DMA+0x19c>)
 8004908:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <HAL_ADC_Start_DMA+0x1a0>)
 8004910:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <HAL_ADC_Start_DMA+0x1a4>)
 8004918:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	221c      	movs	r2, #28
 8004920:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0210 	orr.w	r2, r2, #16
 8004938:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3340      	adds	r3, #64	; 0x40
 8004954:	4619      	mov	r1, r3
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f001 fe5d 	bl	8006618 <HAL_DMA_Start_IT>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fd34 	bl	80043d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800496c:	e00d      	b.n	800498a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004976:	e008      	b.n	800498a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004984:	e001      	b.n	800498a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004986:	2302      	movs	r3, #2
 8004988:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	50000100 	.word	0x50000100
 8004998:	50000300 	.word	0x50000300
 800499c:	50000700 	.word	0x50000700
 80049a0:	50000600 	.word	0x50000600
 80049a4:	50000500 	.word	0x50000500
 80049a8:	50000400 	.word	0x50000400
 80049ac:	08005b5b 	.word	0x08005b5b
 80049b0:	08005c33 	.word	0x08005c33
 80049b4:	08005c4f 	.word	0x08005c4f

080049b8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_Stop_DMA+0x16>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e051      	b.n	8004a72 <HAL_ADC_Stop_DMA+0xba>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80049d6:	2103      	movs	r1, #3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 ff0d 	bl	80057f8 <ADC_ConversionStop>
 80049de:	4603      	mov	r3, r0
 80049e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d13f      	bne.n	8004a68 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d10f      	bne.n	8004a26 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 fe7f 	bl	800670e <HAL_DMA_Abort>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0210 	bic.w	r2, r2, #16
 8004a34:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 f82d 	bl	8005a9c <ADC_Disable>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	e002      	b.n	8004a4e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f001 f827 	bl	8005a9c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aa0:	d004      	beq.n	8004aac <HAL_ADC_IRQHandler+0x30>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a8e      	ldr	r2, [pc, #568]	; (8004ce0 <HAL_ADC_IRQHandler+0x264>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADC_IRQHandler+0x34>
 8004aac:	4b8d      	ldr	r3, [pc, #564]	; (8004ce4 <HAL_ADC_IRQHandler+0x268>)
 8004aae:	e000      	b.n	8004ab2 <HAL_ADC_IRQHandler+0x36>
 8004ab0:	4b8d      	ldr	r3, [pc, #564]	; (8004ce8 <HAL_ADC_IRQHandler+0x26c>)
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fbd6 	bl	8004264 <LL_ADC_GetMultimode>
 8004ab8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d017      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x78>
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f001 f9a8 	bl	8005e3c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2202      	movs	r2, #2
 8004af2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_ADC_IRQHandler+0x8c>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8094 	beq.w	8004c3c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 808e 	beq.w	8004c3c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff faef 	bl	8004120 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d072      	beq.n	8004c2e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a64      	ldr	r2, [pc, #400]	; (8004ce0 <HAL_ADC_IRQHandler+0x264>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d009      	beq.n	8004b66 <HAL_ADC_IRQHandler+0xea>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a65      	ldr	r2, [pc, #404]	; (8004cec <HAL_ADC_IRQHandler+0x270>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d002      	beq.n	8004b62 <HAL_ADC_IRQHandler+0xe6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	e003      	b.n	8004b6a <HAL_ADC_IRQHandler+0xee>
 8004b62:	4b63      	ldr	r3, [pc, #396]	; (8004cf0 <HAL_ADC_IRQHandler+0x274>)
 8004b64:	e001      	b.n	8004b6a <HAL_ADC_IRQHandler+0xee>
 8004b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d008      	beq.n	8004b84 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d002      	beq.n	8004b84 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b09      	cmp	r3, #9
 8004b82:	d104      	bne.n	8004b8e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	623b      	str	r3, [r7, #32]
 8004b8c:	e014      	b.n	8004bb8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a53      	ldr	r2, [pc, #332]	; (8004ce0 <HAL_ADC_IRQHandler+0x264>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_ADC_IRQHandler+0x130>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a53      	ldr	r2, [pc, #332]	; (8004cec <HAL_ADC_IRQHandler+0x270>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d002      	beq.n	8004ba8 <HAL_ADC_IRQHandler+0x12c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	e003      	b.n	8004bb0 <HAL_ADC_IRQHandler+0x134>
 8004ba8:	4b51      	ldr	r3, [pc, #324]	; (8004cf0 <HAL_ADC_IRQHandler+0x274>)
 8004baa:	e001      	b.n	8004bb0 <HAL_ADC_IRQHandler+0x134>
 8004bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bb0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d135      	bne.n	8004c2e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d12e      	bne.n	8004c2e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fc25 	bl	8004424 <LL_ADC_REG_IsConversionOngoing>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11a      	bne.n	8004c16 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 020c 	bic.w	r2, r2, #12
 8004bee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d112      	bne.n	8004c2e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	f043 0201 	orr.w	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c14:	e00b      	b.n	8004c2e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	f043 0210 	orr.w	r2, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c26:	f043 0201 	orr.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd fca8 	bl	8002584 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	220c      	movs	r2, #12
 8004c3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <HAL_ADC_IRQHandler+0x1d4>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80b3 	beq.w	8004dc2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80ad 	beq.w	8004dc2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fa8a 	bl	800419e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004c8a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff fa45 	bl	8004120 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c96:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <HAL_ADC_IRQHandler+0x264>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_ADC_IRQHandler+0x23a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a11      	ldr	r2, [pc, #68]	; (8004cec <HAL_ADC_IRQHandler+0x270>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d002      	beq.n	8004cb2 <HAL_ADC_IRQHandler+0x236>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	e003      	b.n	8004cba <HAL_ADC_IRQHandler+0x23e>
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <HAL_ADC_IRQHandler+0x274>)
 8004cb4:	e001      	b.n	8004cba <HAL_ADC_IRQHandler+0x23e>
 8004cb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d008      	beq.n	8004cd4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d002      	beq.n	8004cd4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b07      	cmp	r3, #7
 8004cd2:	d10f      	bne.n	8004cf4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	623b      	str	r3, [r7, #32]
 8004cdc:	e01f      	b.n	8004d1e <HAL_ADC_IRQHandler+0x2a2>
 8004cde:	bf00      	nop
 8004ce0:	50000100 	.word	0x50000100
 8004ce4:	50000300 	.word	0x50000300
 8004ce8:	50000700 	.word	0x50000700
 8004cec:	50000500 	.word	0x50000500
 8004cf0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a8b      	ldr	r2, [pc, #556]	; (8004f28 <HAL_ADC_IRQHandler+0x4ac>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_ADC_IRQHandler+0x296>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a8a      	ldr	r2, [pc, #552]	; (8004f2c <HAL_ADC_IRQHandler+0x4b0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d002      	beq.n	8004d0e <HAL_ADC_IRQHandler+0x292>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	e003      	b.n	8004d16 <HAL_ADC_IRQHandler+0x29a>
 8004d0e:	4b88      	ldr	r3, [pc, #544]	; (8004f30 <HAL_ADC_IRQHandler+0x4b4>)
 8004d10:	e001      	b.n	8004d16 <HAL_ADC_IRQHandler+0x29a>
 8004d12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d16:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d047      	beq.n	8004db4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_ADC_IRQHandler+0x2c2>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d03f      	beq.n	8004db4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d13a      	bne.n	8004db4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d133      	bne.n	8004db4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d12e      	bne.n	8004db4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fb89 	bl	8004472 <LL_ADC_INJ_IsConversionOngoing>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d11a      	bne.n	8004d9c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d74:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d112      	bne.n	8004db4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d9a:	e00b      	b.n	8004db4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	f043 0210 	orr.w	r2, r3, #16
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 f819 	bl	8005dec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2260      	movs	r2, #96	; 0x60
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d011      	beq.n	8004df0 <HAL_ADC_IRQHandler+0x374>
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f8b4 	bl	8004f50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <HAL_ADC_IRQHandler+0x3a4>
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 ffff 	bl	8005e14 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d012      	beq.n	8004e50 <HAL_ADC_IRQHandler+0x3d4>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fff1 	bl	8005e28 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d043      	beq.n	8004ee2 <HAL_ADC_IRQHandler+0x466>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d03e      	beq.n	8004ee2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e70:	e021      	b.n	8004eb6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d015      	beq.n	8004ea4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e80:	d004      	beq.n	8004e8c <HAL_ADC_IRQHandler+0x410>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a28      	ldr	r2, [pc, #160]	; (8004f28 <HAL_ADC_IRQHandler+0x4ac>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADC_IRQHandler+0x414>
 8004e8c:	4b29      	ldr	r3, [pc, #164]	; (8004f34 <HAL_ADC_IRQHandler+0x4b8>)
 8004e8e:	e000      	b.n	8004e92 <HAL_ADC_IRQHandler+0x416>
 8004e90:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <HAL_ADC_IRQHandler+0x4bc>)
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff f9f4 	bl	8004280 <LL_ADC_GetMultiDMATransfer>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea2:	e008      	b.n	8004eb6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10e      	bne.n	8004eda <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ecc:	f043 0202 	orr.w	r2, r3, #2
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f845 	bl	8004f64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2210      	movs	r2, #16
 8004ee0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d018      	beq.n	8004f1e <HAL_ADC_IRQHandler+0x4a2>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f06:	f043 0208 	orr.w	r2, r3, #8
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f16:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 ff71 	bl	8005e00 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004f1e:	bf00      	nop
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	50000100 	.word	0x50000100
 8004f2c:	50000500 	.word	0x50000500
 8004f30:	50000400 	.word	0x50000400
 8004f34:	50000300 	.word	0x50000300
 8004f38:	50000700 	.word	0x50000700

08004f3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b0b6      	sub	sp, #216	; 0xd8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d102      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x24>
 8004f96:	2302      	movs	r3, #2
 8004f98:	f000 bc13 	b.w	80057c2 <HAL_ADC_ConfigChannel+0x84a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fa3b 	bl	8004424 <LL_ADC_REG_IsConversionOngoing>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 83f3 	bne.w	800579c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7ff f8bf 	bl	8004146 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fa29 	bl	8004424 <LL_ADC_REG_IsConversionOngoing>
 8004fd2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fa49 	bl	8004472 <LL_ADC_INJ_IsConversionOngoing>
 8004fe0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fe4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f040 81d9 	bne.w	80053a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 81d4 	bne.w	80053a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005000:	d10f      	bne.n	8005022 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2200      	movs	r2, #0
 800500c:	4619      	mov	r1, r3
 800500e:	f7ff f8d9 	bl	80041c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff f86d 	bl	80040fa <LL_ADC_SetSamplingTimeCommonConfig>
 8005020:	e00e      	b.n	8005040 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	461a      	mov	r2, r3
 8005030:	f7ff f8c8 	bl	80041c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff f85d 	bl	80040fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695a      	ldr	r2, [r3, #20]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	08db      	lsrs	r3, r3, #3
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b04      	cmp	r3, #4
 8005060:	d022      	beq.n	80050a8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6919      	ldr	r1, [r3, #16]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005072:	f7fe ffb7 	bl	8003fe4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6919      	ldr	r1, [r3, #16]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	461a      	mov	r2, r3
 8005084:	f7ff f803 	bl	800408e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005094:	2b01      	cmp	r3, #1
 8005096:	d102      	bne.n	800509e <HAL_ADC_ConfigChannel+0x126>
 8005098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800509c:	e000      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x128>
 800509e:	2300      	movs	r3, #0
 80050a0:	461a      	mov	r2, r3
 80050a2:	f7ff f80f 	bl	80040c4 <LL_ADC_SetOffsetSaturation>
 80050a6:	e17b      	b.n	80053a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe ffbc 	bl	800402c <LL_ADC_GetOffsetChannel>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x15c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe ffb1 	bl	800402c <LL_ADC_GetOffsetChannel>
 80050ca:	4603      	mov	r3, r0
 80050cc:	0e9b      	lsrs	r3, r3, #26
 80050ce:	f003 021f 	and.w	r2, r3, #31
 80050d2:	e01e      	b.n	8005112 <HAL_ADC_ConfigChannel+0x19a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe ffa6 	bl	800402c <LL_ADC_GetOffsetChannel>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80050f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 80050fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x18e>
    return 32U;
 8005102:	2320      	movs	r3, #32
 8005104:	e004      	b.n	8005110 <HAL_ADC_ConfigChannel+0x198>
  return __builtin_clz(value);
 8005106:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511a:	2b00      	cmp	r3, #0
 800511c:	d105      	bne.n	800512a <HAL_ADC_ConfigChannel+0x1b2>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	0e9b      	lsrs	r3, r3, #26
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	e018      	b.n	800515c <HAL_ADC_ConfigChannel+0x1e4>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005136:	fa93 f3a3 	rbit	r3, r3
 800513a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800513e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800514e:	2320      	movs	r3, #32
 8005150:	e004      	b.n	800515c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005156:	fab3 f383 	clz	r3, r3
 800515a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800515c:	429a      	cmp	r2, r3
 800515e:	d106      	bne.n	800516e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2200      	movs	r2, #0
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe ff75 	bl	8004058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2101      	movs	r1, #1
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe ff59 	bl	800402c <LL_ADC_GetOffsetChannel>
 800517a:	4603      	mov	r3, r0
 800517c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <HAL_ADC_ConfigChannel+0x222>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2101      	movs	r1, #1
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe ff4e 	bl	800402c <LL_ADC_GetOffsetChannel>
 8005190:	4603      	mov	r3, r0
 8005192:	0e9b      	lsrs	r3, r3, #26
 8005194:	f003 021f 	and.w	r2, r3, #31
 8005198:	e01e      	b.n	80051d8 <HAL_ADC_ConfigChannel+0x260>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fe ff43 	bl	800402c <LL_ADC_GetOffsetChannel>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051b0:	fa93 f3a3 	rbit	r3, r3
 80051b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80051b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80051c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80051c8:	2320      	movs	r3, #32
 80051ca:	e004      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80051cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051d0:	fab3 f383 	clz	r3, r3
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x278>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	0e9b      	lsrs	r3, r3, #26
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	e018      	b.n	8005222 <HAL_ADC_ConfigChannel+0x2aa>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051fc:	fa93 f3a3 	rbit	r3, r3
 8005200:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005204:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800520c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005214:	2320      	movs	r3, #32
 8005216:	e004      	b.n	8005222 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800521c:	fab3 f383 	clz	r3, r3
 8005220:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005222:	429a      	cmp	r2, r3
 8005224:	d106      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	2101      	movs	r1, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe ff12 	bl	8004058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2102      	movs	r1, #2
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe fef6 	bl	800402c <LL_ADC_GetOffsetChannel>
 8005240:	4603      	mov	r3, r0
 8005242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x2e8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2102      	movs	r1, #2
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe feeb 	bl	800402c <LL_ADC_GetOffsetChannel>
 8005256:	4603      	mov	r3, r0
 8005258:	0e9b      	lsrs	r3, r3, #26
 800525a:	f003 021f 	and.w	r2, r3, #31
 800525e:	e01e      	b.n	800529e <HAL_ADC_ConfigChannel+0x326>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2102      	movs	r1, #2
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fee0 	bl	800402c <LL_ADC_GetOffsetChannel>
 800526c:	4603      	mov	r3, r0
 800526e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005276:	fa93 f3a3 	rbit	r3, r3
 800527a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800527e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800528e:	2320      	movs	r3, #32
 8005290:	e004      	b.n	800529c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005292:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005296:	fab3 f383 	clz	r3, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x33e>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	0e9b      	lsrs	r3, r3, #26
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	e016      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x36c>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052c2:	fa93 f3a3 	rbit	r3, r3
 80052c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80052c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80052ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80052d6:	2320      	movs	r3, #32
 80052d8:	e004      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80052da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052de:	fab3 f383 	clz	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d106      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2102      	movs	r1, #2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fe feb1 	bl	8004058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2103      	movs	r1, #3
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fe95 	bl	800402c <LL_ADC_GetOffsetChannel>
 8005302:	4603      	mov	r3, r0
 8005304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x3aa>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2103      	movs	r1, #3
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fe8a 	bl	800402c <LL_ADC_GetOffsetChannel>
 8005318:	4603      	mov	r3, r0
 800531a:	0e9b      	lsrs	r3, r3, #26
 800531c:	f003 021f 	and.w	r2, r3, #31
 8005320:	e017      	b.n	8005352 <HAL_ADC_ConfigChannel+0x3da>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2103      	movs	r1, #3
 8005328:	4618      	mov	r0, r3
 800532a:	f7fe fe7f 	bl	800402c <LL_ADC_GetOffsetChannel>
 800532e:	4603      	mov	r3, r0
 8005330:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005334:	fa93 f3a3 	rbit	r3, r3
 8005338:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800533a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800533c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800533e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005344:	2320      	movs	r3, #32
 8005346:	e003      	b.n	8005350 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_ADC_ConfigChannel+0x3f2>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0e9b      	lsrs	r3, r3, #26
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	e011      	b.n	800538e <HAL_ADC_ConfigChannel+0x416>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005372:	fa93 f3a3 	rbit	r3, r3
 8005376:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800537a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800537c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005382:	2320      	movs	r3, #32
 8005384:	e003      	b.n	800538e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005388:	fab3 f383 	clz	r3, r3
 800538c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800538e:	429a      	cmp	r2, r3
 8005390:	d106      	bne.n	80053a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	2103      	movs	r1, #3
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fe5c 	bl	8004058 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe ffef 	bl	8004388 <LL_ADC_IsEnabled>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f040 813d 	bne.w	800562c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6819      	ldr	r1, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	461a      	mov	r2, r3
 80053c0:	f7fe ff2c 	bl	800421c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4aa2      	ldr	r2, [pc, #648]	; (8005654 <HAL_ADC_ConfigChannel+0x6dc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	f040 812e 	bne.w	800562c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x480>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	0e9b      	lsrs	r3, r3, #26
 80053e6:	3301      	adds	r3, #1
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2b09      	cmp	r3, #9
 80053ee:	bf94      	ite	ls
 80053f0:	2301      	movls	r3, #1
 80053f2:	2300      	movhi	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e019      	b.n	800542c <HAL_ADC_ConfigChannel+0x4b4>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005408:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800540a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005410:	2320      	movs	r3, #32
 8005412:	e003      	b.n	800541c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005416:	fab3 f383 	clz	r3, r3
 800541a:	b2db      	uxtb	r3, r3
 800541c:	3301      	adds	r3, #1
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	2b09      	cmp	r3, #9
 8005424:	bf94      	ite	ls
 8005426:	2301      	movls	r3, #1
 8005428:	2300      	movhi	r3, #0
 800542a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800542c:	2b00      	cmp	r3, #0
 800542e:	d079      	beq.n	8005524 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005438:	2b00      	cmp	r3, #0
 800543a:	d107      	bne.n	800544c <HAL_ADC_ConfigChannel+0x4d4>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	0e9b      	lsrs	r3, r3, #26
 8005442:	3301      	adds	r3, #1
 8005444:	069b      	lsls	r3, r3, #26
 8005446:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800544a:	e015      	b.n	8005478 <HAL_ADC_ConfigChannel+0x500>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005454:	fa93 f3a3 	rbit	r3, r3
 8005458:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800545a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800545e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005464:	2320      	movs	r3, #32
 8005466:	e003      	b.n	8005470 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	fab3 f383 	clz	r3, r3
 800546e:	b2db      	uxtb	r3, r3
 8005470:	3301      	adds	r3, #1
 8005472:	069b      	lsls	r3, r3, #26
 8005474:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005480:	2b00      	cmp	r3, #0
 8005482:	d109      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x520>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	0e9b      	lsrs	r3, r3, #26
 800548a:	3301      	adds	r3, #1
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	e017      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x550>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80054a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80054aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80054b0:	2320      	movs	r3, #32
 80054b2:	e003      	b.n	80054bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80054b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	3301      	adds	r3, #1
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2101      	movs	r1, #1
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	ea42 0103 	orr.w	r1, r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x576>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	0e9b      	lsrs	r3, r3, #26
 80054de:	3301      	adds	r3, #1
 80054e0:	f003 021f 	and.w	r2, r3, #31
 80054e4:	4613      	mov	r3, r2
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	4413      	add	r3, r2
 80054ea:	051b      	lsls	r3, r3, #20
 80054ec:	e018      	b.n	8005520 <HAL_ADC_ConfigChannel+0x5a8>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	fa93 f3a3 	rbit	r3, r3
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005506:	2320      	movs	r3, #32
 8005508:	e003      	b.n	8005512 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550c:	fab3 f383 	clz	r3, r3
 8005510:	b2db      	uxtb	r3, r3
 8005512:	3301      	adds	r3, #1
 8005514:	f003 021f 	and.w	r2, r3, #31
 8005518:	4613      	mov	r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	4413      	add	r3, r2
 800551e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005520:	430b      	orrs	r3, r1
 8005522:	e07e      	b.n	8005622 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x5c8>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0e9b      	lsrs	r3, r3, #26
 8005536:	3301      	adds	r3, #1
 8005538:	069b      	lsls	r3, r3, #26
 800553a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800553e:	e015      	b.n	800556c <HAL_ADC_ConfigChannel+0x5f4>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	fa93 f3a3 	rbit	r3, r3
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005558:	2320      	movs	r3, #32
 800555a:	e003      	b.n	8005564 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	fab3 f383 	clz	r3, r3
 8005562:	b2db      	uxtb	r3, r3
 8005564:	3301      	adds	r3, #1
 8005566:	069b      	lsls	r3, r3, #26
 8005568:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <HAL_ADC_ConfigChannel+0x614>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	0e9b      	lsrs	r3, r3, #26
 800557e:	3301      	adds	r3, #1
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	2101      	movs	r1, #1
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	e017      	b.n	80055bc <HAL_ADC_ConfigChannel+0x644>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	fa93 f3a3 	rbit	r3, r3
 8005598:	61fb      	str	r3, [r7, #28]
  return result;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80055a4:	2320      	movs	r3, #32
 80055a6:	e003      	b.n	80055b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	fab3 f383 	clz	r3, r3
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	3301      	adds	r3, #1
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	2101      	movs	r1, #1
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	ea42 0103 	orr.w	r1, r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10d      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x670>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	0e9b      	lsrs	r3, r3, #26
 80055d2:	3301      	adds	r3, #1
 80055d4:	f003 021f 	and.w	r2, r3, #31
 80055d8:	4613      	mov	r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4413      	add	r3, r2
 80055de:	3b1e      	subs	r3, #30
 80055e0:	051b      	lsls	r3, r3, #20
 80055e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055e6:	e01b      	b.n	8005620 <HAL_ADC_ConfigChannel+0x6a8>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	fa93 f3a3 	rbit	r3, r3
 80055f4:	613b      	str	r3, [r7, #16]
  return result;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005600:	2320      	movs	r3, #32
 8005602:	e003      	b.n	800560c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	fab3 f383 	clz	r3, r3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	3301      	adds	r3, #1
 800560e:	f003 021f 	and.w	r2, r3, #31
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	3b1e      	subs	r3, #30
 800561a:	051b      	lsls	r3, r3, #20
 800561c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005620:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005626:	4619      	mov	r1, r3
 8005628:	f7fe fdcc 	bl	80041c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <HAL_ADC_ConfigChannel+0x6e0>)
 8005632:	4013      	ands	r3, r2
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80be 	beq.w	80057b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005642:	d004      	beq.n	800564e <HAL_ADC_ConfigChannel+0x6d6>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a04      	ldr	r2, [pc, #16]	; (800565c <HAL_ADC_ConfigChannel+0x6e4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10a      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x6ec>
 800564e:	4b04      	ldr	r3, [pc, #16]	; (8005660 <HAL_ADC_ConfigChannel+0x6e8>)
 8005650:	e009      	b.n	8005666 <HAL_ADC_ConfigChannel+0x6ee>
 8005652:	bf00      	nop
 8005654:	407f0000 	.word	0x407f0000
 8005658:	80080000 	.word	0x80080000
 800565c:	50000100 	.word	0x50000100
 8005660:	50000300 	.word	0x50000300
 8005664:	4b59      	ldr	r3, [pc, #356]	; (80057cc <HAL_ADC_ConfigChannel+0x854>)
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fcae 	bl	8003fc8 <LL_ADC_GetCommonPathInternalCh>
 800566c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a56      	ldr	r2, [pc, #344]	; (80057d0 <HAL_ADC_ConfigChannel+0x858>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_ADC_ConfigChannel+0x70c>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a55      	ldr	r2, [pc, #340]	; (80057d4 <HAL_ADC_ConfigChannel+0x85c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d13a      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d134      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005698:	d005      	beq.n	80056a6 <HAL_ADC_ConfigChannel+0x72e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a4e      	ldr	r2, [pc, #312]	; (80057d8 <HAL_ADC_ConfigChannel+0x860>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	f040 8085 	bne.w	80057b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ae:	d004      	beq.n	80056ba <HAL_ADC_ConfigChannel+0x742>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a49      	ldr	r2, [pc, #292]	; (80057dc <HAL_ADC_ConfigChannel+0x864>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <HAL_ADC_ConfigChannel+0x746>
 80056ba:	4a49      	ldr	r2, [pc, #292]	; (80057e0 <HAL_ADC_ConfigChannel+0x868>)
 80056bc:	e000      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x748>
 80056be:	4a43      	ldr	r2, [pc, #268]	; (80057cc <HAL_ADC_ConfigChannel+0x854>)
 80056c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f7fe fc69 	bl	8003fa2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056d0:	4b44      	ldr	r3, [pc, #272]	; (80057e4 <HAL_ADC_ConfigChannel+0x86c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	099b      	lsrs	r3, r3, #6
 80056d6:	4a44      	ldr	r2, [pc, #272]	; (80057e8 <HAL_ADC_ConfigChannel+0x870>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	099b      	lsrs	r3, r3, #6
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	4613      	mov	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80056ea:	e002      	b.n	80056f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f9      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056f8:	e05a      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a3b      	ldr	r2, [pc, #236]	; (80057ec <HAL_ADC_ConfigChannel+0x874>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d125      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d11f      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a31      	ldr	r2, [pc, #196]	; (80057dc <HAL_ADC_ConfigChannel+0x864>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d104      	bne.n	8005724 <HAL_ADC_ConfigChannel+0x7ac>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a34      	ldr	r2, [pc, #208]	; (80057f0 <HAL_ADC_ConfigChannel+0x878>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d047      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800572c:	d004      	beq.n	8005738 <HAL_ADC_ConfigChannel+0x7c0>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <HAL_ADC_ConfigChannel+0x864>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d101      	bne.n	800573c <HAL_ADC_ConfigChannel+0x7c4>
 8005738:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <HAL_ADC_ConfigChannel+0x868>)
 800573a:	e000      	b.n	800573e <HAL_ADC_ConfigChannel+0x7c6>
 800573c:	4a23      	ldr	r2, [pc, #140]	; (80057cc <HAL_ADC_ConfigChannel+0x854>)
 800573e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f7fe fc2a 	bl	8003fa2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800574e:	e031      	b.n	80057b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <HAL_ADC_ConfigChannel+0x87c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d12d      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800575a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800575e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d127      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <HAL_ADC_ConfigChannel+0x864>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d022      	beq.n	80057b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005778:	d004      	beq.n	8005784 <HAL_ADC_ConfigChannel+0x80c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a17      	ldr	r2, [pc, #92]	; (80057dc <HAL_ADC_ConfigChannel+0x864>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d101      	bne.n	8005788 <HAL_ADC_ConfigChannel+0x810>
 8005784:	4a16      	ldr	r2, [pc, #88]	; (80057e0 <HAL_ADC_ConfigChannel+0x868>)
 8005786:	e000      	b.n	800578a <HAL_ADC_ConfigChannel+0x812>
 8005788:	4a10      	ldr	r2, [pc, #64]	; (80057cc <HAL_ADC_ConfigChannel+0x854>)
 800578a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800578e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f7fe fc04 	bl	8003fa2 <LL_ADC_SetCommonPathInternalCh>
 800579a:	e00c      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80057ae:	e002      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80057be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	37d8      	adds	r7, #216	; 0xd8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	50000700 	.word	0x50000700
 80057d0:	c3210000 	.word	0xc3210000
 80057d4:	90c00010 	.word	0x90c00010
 80057d8:	50000600 	.word	0x50000600
 80057dc:	50000100 	.word	0x50000100
 80057e0:	50000300 	.word	0x50000300
 80057e4:	20000018 	.word	0x20000018
 80057e8:	053e2d63 	.word	0x053e2d63
 80057ec:	c7520000 	.word	0xc7520000
 80057f0:	50000500 	.word	0x50000500
 80057f4:	cb840000 	.word	0xcb840000

080057f8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fe08 	bl	8004424 <LL_ADC_REG_IsConversionOngoing>
 8005814:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fe29 	bl	8004472 <LL_ADC_INJ_IsConversionOngoing>
 8005820:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8098 	beq.w	8005960 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d02a      	beq.n	8005894 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	7f5b      	ldrb	r3, [r3, #29]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d126      	bne.n	8005894 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7f1b      	ldrb	r3, [r3, #28]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d122      	bne.n	8005894 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800584e:	2301      	movs	r3, #1
 8005850:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005852:	e014      	b.n	800587e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4a45      	ldr	r2, [pc, #276]	; (800596c <ADC_ConversionStop+0x174>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d90d      	bls.n	8005878 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	f043 0210 	orr.w	r2, r3, #16
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586c:	f043 0201 	orr.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e074      	b.n	8005962 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d1e3      	bne.n	8005854 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2240      	movs	r2, #64	; 0x40
 8005892:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d014      	beq.n	80058c4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe fdc0 	bl	8004424 <LL_ADC_REG_IsConversionOngoing>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fd7d 	bl	80043ae <LL_ADC_IsDisableOngoing>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe fd9c 	bl	80043fc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d014      	beq.n	80058f4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fdcf 	bl	8004472 <LL_ADC_INJ_IsConversionOngoing>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fd65 	bl	80043ae <LL_ADC_IsDisableOngoing>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fdab 	bl	800444a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d005      	beq.n	8005906 <ADC_ConversionStop+0x10e>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d105      	bne.n	800590c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005900:	230c      	movs	r3, #12
 8005902:	617b      	str	r3, [r7, #20]
        break;
 8005904:	e005      	b.n	8005912 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005906:	2308      	movs	r3, #8
 8005908:	617b      	str	r3, [r7, #20]
        break;
 800590a:	e002      	b.n	8005912 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800590c:	2304      	movs	r3, #4
 800590e:	617b      	str	r3, [r7, #20]
        break;
 8005910:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005912:	f7fe fb05 	bl	8003f20 <HAL_GetTick>
 8005916:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005918:	e01b      	b.n	8005952 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800591a:	f7fe fb01 	bl	8003f20 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b05      	cmp	r3, #5
 8005926:	d914      	bls.n	8005952 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	f043 0210 	orr.w	r2, r3, #16
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005946:	f043 0201 	orr.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e007      	b.n	8005962 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1dc      	bne.n	800591a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	a33fffff 	.word	0xa33fffff

08005970 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005978:	2300      	movs	r3, #0
 800597a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe fd01 	bl	8004388 <LL_ADC_IsEnabled>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d176      	bne.n	8005a7a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	4b3c      	ldr	r3, [pc, #240]	; (8005a84 <ADC_Enable+0x114>)
 8005994:	4013      	ands	r3, r2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00d      	beq.n	80059b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	f043 0210 	orr.w	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	f043 0201 	orr.w	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e062      	b.n	8005a7c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fcbc 	bl	8004338 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059c8:	d004      	beq.n	80059d4 <ADC_Enable+0x64>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2e      	ldr	r2, [pc, #184]	; (8005a88 <ADC_Enable+0x118>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d101      	bne.n	80059d8 <ADC_Enable+0x68>
 80059d4:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <ADC_Enable+0x11c>)
 80059d6:	e000      	b.n	80059da <ADC_Enable+0x6a>
 80059d8:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <ADC_Enable+0x120>)
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe faf4 	bl	8003fc8 <LL_ADC_GetCommonPathInternalCh>
 80059e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80059e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d013      	beq.n	8005a12 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059ea:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <ADC_Enable+0x124>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	099b      	lsrs	r3, r3, #6
 80059f0:	4a29      	ldr	r2, [pc, #164]	; (8005a98 <ADC_Enable+0x128>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	4613      	mov	r3, r2
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a04:	e002      	b.n	8005a0c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f9      	bne.n	8005a06 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a12:	f7fe fa85 	bl	8003f20 <HAL_GetTick>
 8005a16:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a18:	e028      	b.n	8005a6c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fcb2 	bl	8004388 <LL_ADC_IsEnabled>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fc82 	bl	8004338 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a34:	f7fe fa74 	bl	8003f20 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d914      	bls.n	8005a6c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d00d      	beq.n	8005a6c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	f043 0210 	orr.w	r2, r3, #16
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a60:	f043 0201 	orr.w	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e007      	b.n	8005a7c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d1cf      	bne.n	8005a1a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	8000003f 	.word	0x8000003f
 8005a88:	50000100 	.word	0x50000100
 8005a8c:	50000300 	.word	0x50000300
 8005a90:	50000700 	.word	0x50000700
 8005a94:	20000018 	.word	0x20000018
 8005a98:	053e2d63 	.word	0x053e2d63

08005a9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe fc80 	bl	80043ae <LL_ADC_IsDisableOngoing>
 8005aae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fc67 	bl	8004388 <LL_ADC_IsEnabled>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d047      	beq.n	8005b50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d144      	bne.n	8005b50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 030d 	and.w	r3, r3, #13
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10c      	bne.n	8005aee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe fc41 	bl	8004360 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005ae6:	f7fe fa1b 	bl	8003f20 <HAL_GetTick>
 8005aea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005aec:	e029      	b.n	8005b42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af2:	f043 0210 	orr.w	r2, r3, #16
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afe:	f043 0201 	orr.w	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e023      	b.n	8005b52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b0a:	f7fe fa09 	bl	8003f20 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d914      	bls.n	8005b42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2a:	f043 0210 	orr.w	r2, r3, #16
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b36:	f043 0201 	orr.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e007      	b.n	8005b52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1dc      	bne.n	8005b0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d14b      	bne.n	8005c0c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d021      	beq.n	8005bd2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe fac4 	bl	8004120 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d032      	beq.n	8005c04 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d12b      	bne.n	8005c04 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11f      	bne.n	8005c04 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc8:	f043 0201 	orr.w	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	65da      	str	r2, [r3, #92]	; 0x5c
 8005bd0:	e018      	b.n	8005c04 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d111      	bne.n	8005c04 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d105      	bne.n	8005c04 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfc:	f043 0201 	orr.w	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7fc fcbd 	bl	8002584 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c0a:	e00e      	b.n	8005c2a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff f9a3 	bl	8004f64 <HAL_ADC_ErrorCallback>
}
 8005c1e:	e004      	b.n	8005c2a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	4798      	blx	r3
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff f97b 	bl	8004f3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6c:	f043 0204 	orr.w	r2, r3, #4
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff f975 	bl	8004f64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <LL_ADC_IsEnabled>:
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <LL_ADC_IsEnabled+0x18>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <LL_ADC_IsEnabled+0x1a>
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <LL_ADC_StartCalibration>:
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005cba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	609a      	str	r2, [r3, #8]
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <LL_ADC_IsCalibrationOnGoing>:
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cee:	d101      	bne.n	8005cf4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <LL_ADC_REG_IsConversionOngoing>:
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d101      	bne.n	8005d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_ADCEx_Calibration_Start+0x1c>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e04d      	b.n	8005de0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fea5 	bl	8005a9c <ADC_Disable>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d136      	bne.n	8005dca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d64:	f023 0302 	bic.w	r3, r3, #2
 8005d68:	f043 0202 	orr.w	r2, r3, #2
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff ff96 	bl	8005ca8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d7c:	e014      	b.n	8005da8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d90d      	bls.n	8005da8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d90:	f023 0312 	bic.w	r3, r3, #18
 8005d94:	f043 0210 	orr.w	r2, r3, #16
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e01b      	b.n	8005de0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff ff94 	bl	8005cda <LL_ADC_IsCalibrationOnGoing>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e2      	bne.n	8005d7e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	f023 0303 	bic.w	r3, r3, #3
 8005dc0:	f043 0201 	orr.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dc8:	e005      	b.n	8005dd6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	f043 0210 	orr.w	r2, r3, #16
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	0004de01 	.word	0x0004de01

08005dec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005e50:	b590      	push	{r4, r7, lr}
 8005e52:	b0a1      	sub	sp, #132	; 0x84
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e0e7      	b.n	800603e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e76:	2300      	movs	r3, #0
 8005e78:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e86:	d102      	bne.n	8005e8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e88:	4b6f      	ldr	r3, [pc, #444]	; (8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	e009      	b.n	8005ea2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6e      	ldr	r2, [pc, #440]	; (800604c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d102      	bne.n	8005e9e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005e98:	4b6d      	ldr	r3, [pc, #436]	; (8006050 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	e001      	b.n	8005ea2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10b      	bne.n	8005ec0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eac:	f043 0220 	orr.w	r2, r3, #32
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0be      	b.n	800603e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ff1d 	bl	8005d02 <LL_ADC_REG_IsConversionOngoing>
 8005ec8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff ff17 	bl	8005d02 <LL_ADC_REG_IsConversionOngoing>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 80a0 	bne.w	800601c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 809c 	bne.w	800601c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eec:	d004      	beq.n	8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a55      	ldr	r2, [pc, #340]	; (8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005ef8:	4b56      	ldr	r3, [pc, #344]	; (8006054 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005efa:	e000      	b.n	8005efe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005efc:	4b56      	ldr	r3, [pc, #344]	; (8006058 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005efe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d04b      	beq.n	8005fa0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6859      	ldr	r1, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f1a:	035b      	lsls	r3, r3, #13
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f2c:	d004      	beq.n	8005f38 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a45      	ldr	r2, [pc, #276]	; (8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10f      	bne.n	8005f58 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005f38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005f3c:	f7ff fea1 	bl	8005c82 <LL_ADC_IsEnabled>
 8005f40:	4604      	mov	r4, r0
 8005f42:	4841      	ldr	r0, [pc, #260]	; (8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f44:	f7ff fe9d 	bl	8005c82 <LL_ADC_IsEnabled>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4323      	orrs	r3, r4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	e012      	b.n	8005f7e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005f58:	483c      	ldr	r0, [pc, #240]	; (800604c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f5a:	f7ff fe92 	bl	8005c82 <LL_ADC_IsEnabled>
 8005f5e:	4604      	mov	r4, r0
 8005f60:	483b      	ldr	r0, [pc, #236]	; (8006050 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f62:	f7ff fe8e 	bl	8005c82 <LL_ADC_IsEnabled>
 8005f66:	4603      	mov	r3, r0
 8005f68:	431c      	orrs	r4, r3
 8005f6a:	483c      	ldr	r0, [pc, #240]	; (800605c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f6c:	f7ff fe89 	bl	8005c82 <LL_ADC_IsEnabled>
 8005f70:	4603      	mov	r3, r0
 8005f72:	4323      	orrs	r3, r4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d056      	beq.n	8006030 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f8a:	f023 030f 	bic.w	r3, r3, #15
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	6811      	ldr	r1, [r2, #0]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	6892      	ldr	r2, [r2, #8]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f9e:	e047      	b.n	8006030 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005faa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fb4:	d004      	beq.n	8005fc0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a23      	ldr	r2, [pc, #140]	; (8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10f      	bne.n	8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005fc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005fc4:	f7ff fe5d 	bl	8005c82 <LL_ADC_IsEnabled>
 8005fc8:	4604      	mov	r4, r0
 8005fca:	481f      	ldr	r0, [pc, #124]	; (8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fcc:	f7ff fe59 	bl	8005c82 <LL_ADC_IsEnabled>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4323      	orrs	r3, r4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2301      	moveq	r3, #1
 8005fda:	2300      	movne	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e012      	b.n	8006006 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005fe0:	481a      	ldr	r0, [pc, #104]	; (800604c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005fe2:	f7ff fe4e 	bl	8005c82 <LL_ADC_IsEnabled>
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4819      	ldr	r0, [pc, #100]	; (8006050 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005fea:	f7ff fe4a 	bl	8005c82 <LL_ADC_IsEnabled>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	431c      	orrs	r4, r3
 8005ff2:	481a      	ldr	r0, [pc, #104]	; (800605c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ff4:	f7ff fe45 	bl	8005c82 <LL_ADC_IsEnabled>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4323      	orrs	r3, r4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d012      	beq.n	8006030 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800600a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006012:	f023 030f 	bic.w	r3, r3, #15
 8006016:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006018:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800601a:	e009      	b.n	8006030 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006020:	f043 0220 	orr.w	r2, r3, #32
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800602e:	e000      	b.n	8006032 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006030:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800603a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800603e:	4618      	mov	r0, r3
 8006040:	3784      	adds	r7, #132	; 0x84
 8006042:	46bd      	mov	sp, r7
 8006044:	bd90      	pop	{r4, r7, pc}
 8006046:	bf00      	nop
 8006048:	50000100 	.word	0x50000100
 800604c:	50000400 	.word	0x50000400
 8006050:	50000500 	.word	0x50000500
 8006054:	50000300 	.word	0x50000300
 8006058:	50000700 	.word	0x50000700
 800605c:	50000600 	.word	0x50000600

08006060 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e023      	b.n	80060ba <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fb fb9c 	bl	80017c4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <__NVIC_SetPriorityGrouping>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <__NVIC_SetPriorityGrouping+0x44>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060e0:	4013      	ands	r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060f6:	4a04      	ldr	r2, [pc, #16]	; (8006108 <__NVIC_SetPriorityGrouping+0x44>)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	60d3      	str	r3, [r2, #12]
}
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <__NVIC_GetPriorityGrouping>:
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <__NVIC_GetPriorityGrouping+0x18>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	f003 0307 	and.w	r3, r3, #7
}
 800611a:	4618      	mov	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	e000ed00 	.word	0xe000ed00

08006128 <__NVIC_EnableIRQ>:
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	db0b      	blt.n	8006152 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	f003 021f 	and.w	r2, r3, #31
 8006140:	4907      	ldr	r1, [pc, #28]	; (8006160 <__NVIC_EnableIRQ+0x38>)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2001      	movs	r0, #1
 800614a:	fa00 f202 	lsl.w	r2, r0, r2
 800614e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	e000e100 	.word	0xe000e100

08006164 <__NVIC_SetPriority>:
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006174:	2b00      	cmp	r3, #0
 8006176:	db0a      	blt.n	800618e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	b2da      	uxtb	r2, r3
 800617c:	490c      	ldr	r1, [pc, #48]	; (80061b0 <__NVIC_SetPriority+0x4c>)
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	0112      	lsls	r2, r2, #4
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	440b      	add	r3, r1
 8006188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800618c:	e00a      	b.n	80061a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4908      	ldr	r1, [pc, #32]	; (80061b4 <__NVIC_SetPriority+0x50>)
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	3b04      	subs	r3, #4
 800619c:	0112      	lsls	r2, r2, #4
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	440b      	add	r3, r1
 80061a2:	761a      	strb	r2, [r3, #24]
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	e000e100 	.word	0xe000e100
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <NVIC_EncodePriority>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	b089      	sub	sp, #36	; 0x24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f1c3 0307 	rsb	r3, r3, #7
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	bf28      	it	cs
 80061d6:	2304      	movcs	r3, #4
 80061d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3304      	adds	r3, #4
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d902      	bls.n	80061e8 <NVIC_EncodePriority+0x30>
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3b03      	subs	r3, #3
 80061e6:	e000      	b.n	80061ea <NVIC_EncodePriority+0x32>
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43da      	mvns	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	401a      	ands	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006200:	f04f 31ff 	mov.w	r1, #4294967295
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	43d9      	mvns	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006210:	4313      	orrs	r3, r2
}
 8006212:	4618      	mov	r0, r3
 8006214:	3724      	adds	r7, #36	; 0x24
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3b01      	subs	r3, #1
 800622c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006230:	d301      	bcc.n	8006236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006232:	2301      	movs	r3, #1
 8006234:	e00f      	b.n	8006256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006236:	4a0a      	ldr	r2, [pc, #40]	; (8006260 <SysTick_Config+0x40>)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3b01      	subs	r3, #1
 800623c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800623e:	210f      	movs	r1, #15
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	f7ff ff8e 	bl	8006164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <SysTick_Config+0x40>)
 800624a:	2200      	movs	r2, #0
 800624c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800624e:	4b04      	ldr	r3, [pc, #16]	; (8006260 <SysTick_Config+0x40>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000e010 	.word	0xe000e010

08006264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ff29 	bl	80060c4 <__NVIC_SetPriorityGrouping>
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	4603      	mov	r3, r0
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006288:	f7ff ff40 	bl	800610c <__NVIC_GetPriorityGrouping>
 800628c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	6978      	ldr	r0, [r7, #20]
 8006294:	f7ff ff90 	bl	80061b8 <NVIC_EncodePriority>
 8006298:	4602      	mov	r2, r0
 800629a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff ff5f 	bl	8006164 <__NVIC_SetPriority>
}
 80062a6:	bf00      	nop
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	4603      	mov	r3, r0
 80062b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff ff33 	bl	8006128 <__NVIC_EnableIRQ>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ffa4 	bl	8006220 <SysTick_Config>
 80062d8:	4603      	mov	r3, r0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e054      	b.n	80063a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7f5b      	ldrb	r3, [r3, #29]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb fa9e 	bl	8001848 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10c      	bne.n	8006334 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a22      	ldr	r2, [pc, #136]	; (80063a8 <HAL_CRC_Init+0xc4>)
 8006320:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0218 	bic.w	r2, r2, #24
 8006330:	609a      	str	r2, [r3, #8]
 8006332:	e00c      	b.n	800634e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6899      	ldr	r1, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	461a      	mov	r2, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f834 	bl	80063ac <HAL_CRCEx_Polynomial_Set>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e028      	b.n	80063a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	795b      	ldrb	r3, [r3, #5]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d105      	bne.n	8006362 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f04f 32ff 	mov.w	r2, #4294967295
 800635e:	611a      	str	r2, [r3, #16]
 8006360:	e004      	b.n	800636c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6912      	ldr	r2, [r2, #16]
 800636a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	04c11db7 	.word	0x04c11db7

080063ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80063bc:	231f      	movs	r3, #31
 80063be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
 80063ce:	e063      	b.n	8006498 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80063d0:	bf00      	nop
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1e5a      	subs	r2, r3, #1
 80063d6:	613a      	str	r2, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <HAL_CRCEx_Polynomial_Set+0x44>
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b18      	cmp	r3, #24
 80063f4:	d846      	bhi.n	8006484 <HAL_CRCEx_Polynomial_Set+0xd8>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <HAL_CRCEx_Polynomial_Set+0x50>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	0800648b 	.word	0x0800648b
 8006400:	08006485 	.word	0x08006485
 8006404:	08006485 	.word	0x08006485
 8006408:	08006485 	.word	0x08006485
 800640c:	08006485 	.word	0x08006485
 8006410:	08006485 	.word	0x08006485
 8006414:	08006485 	.word	0x08006485
 8006418:	08006485 	.word	0x08006485
 800641c:	08006479 	.word	0x08006479
 8006420:	08006485 	.word	0x08006485
 8006424:	08006485 	.word	0x08006485
 8006428:	08006485 	.word	0x08006485
 800642c:	08006485 	.word	0x08006485
 8006430:	08006485 	.word	0x08006485
 8006434:	08006485 	.word	0x08006485
 8006438:	08006485 	.word	0x08006485
 800643c:	0800646d 	.word	0x0800646d
 8006440:	08006485 	.word	0x08006485
 8006444:	08006485 	.word	0x08006485
 8006448:	08006485 	.word	0x08006485
 800644c:	08006485 	.word	0x08006485
 8006450:	08006485 	.word	0x08006485
 8006454:	08006485 	.word	0x08006485
 8006458:	08006485 	.word	0x08006485
 800645c:	08006461 	.word	0x08006461
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b06      	cmp	r3, #6
 8006464:	d913      	bls.n	800648e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800646a:	e010      	b.n	800648e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b07      	cmp	r3, #7
 8006470:	d90f      	bls.n	8006492 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006476:	e00c      	b.n	8006492 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	2b0f      	cmp	r3, #15
 800647c:	d90b      	bls.n	8006496 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006482:	e008      	b.n	8006496 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
        break;
 8006488:	e006      	b.n	8006498 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800648a:	bf00      	nop
 800648c:	e004      	b.n	8006498 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800648e:	bf00      	nop
 8006490:	e002      	b.n	8006498 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006492:	bf00      	nop
 8006494:	e000      	b.n	8006498 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006496:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006498:	7dfb      	ldrb	r3, [r7, #23]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10d      	bne.n	80064ba <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f023 0118 	bic.w	r1, r3, #24
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e08d      	b.n	80065f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	4b47      	ldr	r3, [pc, #284]	; (8006600 <HAL_DMA_Init+0x138>)
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d80f      	bhi.n	8006506 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	4b45      	ldr	r3, [pc, #276]	; (8006604 <HAL_DMA_Init+0x13c>)
 80064ee:	4413      	add	r3, r2
 80064f0:	4a45      	ldr	r2, [pc, #276]	; (8006608 <HAL_DMA_Init+0x140>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	009a      	lsls	r2, r3, #2
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a42      	ldr	r2, [pc, #264]	; (800660c <HAL_DMA_Init+0x144>)
 8006502:	641a      	str	r2, [r3, #64]	; 0x40
 8006504:	e00e      	b.n	8006524 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	4b40      	ldr	r3, [pc, #256]	; (8006610 <HAL_DMA_Init+0x148>)
 800650e:	4413      	add	r3, r2
 8006510:	4a3d      	ldr	r2, [pc, #244]	; (8006608 <HAL_DMA_Init+0x140>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	091b      	lsrs	r3, r3, #4
 8006518:	009a      	lsls	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a3c      	ldr	r2, [pc, #240]	; (8006614 <HAL_DMA_Init+0x14c>)
 8006522:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa10 	bl	800699c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006584:	d102      	bne.n	800658c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d010      	beq.n	80065cc <HAL_DMA_Init+0x104>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d80c      	bhi.n	80065cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa30 	bl	8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	e008      	b.n	80065de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40020407 	.word	0x40020407
 8006604:	bffdfff8 	.word	0xbffdfff8
 8006608:	cccccccd 	.word	0xcccccccd
 800660c:	40020000 	.word	0x40020000
 8006610:	bffdfbf8 	.word	0xbffdfbf8
 8006614:	40020400 	.word	0x40020400

08006618 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_DMA_Start_IT+0x20>
 8006634:	2302      	movs	r3, #2
 8006636:	e066      	b.n	8006706 <HAL_DMA_Start_IT+0xee>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d155      	bne.n	80066f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f954 	bl	800691e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	2b00      	cmp	r3, #0
 800667c:	d008      	beq.n	8006690 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 020e 	orr.w	r2, r2, #14
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e00f      	b.n	80066b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0204 	bic.w	r2, r2, #4
 800669e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 020a 	orr.w	r2, r2, #10
 80066ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0201 	orr.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e005      	b.n	8006704 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006700:	2302      	movs	r3, #2
 8006702:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d005      	beq.n	8006732 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2204      	movs	r2, #4
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
 8006730:	e037      	b.n	80067a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 020e 	bic.w	r2, r2, #14
 8006740:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006750:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	f003 021f 	and.w	r2, r3, #31
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2101      	movs	r1, #1
 8006770:	fa01 f202 	lsl.w	r2, r1, r2
 8006774:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800677e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006796:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80067a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	2204      	movs	r2, #4
 80067e2:	409a      	lsls	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d026      	beq.n	800683a <HAL_DMA_IRQHandler+0x7a>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d021      	beq.n	800683a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d107      	bne.n	8006814 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0204 	bic.w	r2, r2, #4
 8006812:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	f003 021f 	and.w	r2, r3, #31
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	2104      	movs	r1, #4
 8006822:	fa01 f202 	lsl.w	r2, r1, r2
 8006826:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	2b00      	cmp	r3, #0
 800682e:	d071      	beq.n	8006914 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006838:	e06c      	b.n	8006914 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2202      	movs	r2, #2
 8006844:	409a      	lsls	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4013      	ands	r3, r2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d02e      	beq.n	80068ac <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d029      	beq.n	80068ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10b      	bne.n	800687e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 020a 	bic.w	r2, r2, #10
 8006874:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006882:	f003 021f 	and.w	r2, r3, #31
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	2102      	movs	r1, #2
 800688c:	fa01 f202 	lsl.w	r2, r1, r2
 8006890:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d038      	beq.n	8006914 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80068aa:	e033      	b.n	8006914 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2208      	movs	r2, #8
 80068b6:	409a      	lsls	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d02a      	beq.n	8006916 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d025      	beq.n	8006916 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 020e 	bic.w	r2, r2, #14
 80068d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	f003 021f 	and.w	r2, r3, #31
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	2101      	movs	r1, #1
 80068e8:	fa01 f202 	lsl.w	r2, r1, r2
 80068ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006914:	bf00      	nop
 8006916:	bf00      	nop
}
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	607a      	str	r2, [r7, #4]
 800692a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006934:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006946:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	f003 021f 	and.w	r2, r3, #31
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f202 	lsl.w	r2, r1, r2
 800695a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b10      	cmp	r3, #16
 800696a:	d108      	bne.n	800697e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800697c:	e007      	b.n	800698e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]
}
 800698e:	bf00      	nop
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	4b16      	ldr	r3, [pc, #88]	; (8006a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d802      	bhi.n	80069b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80069b0:	4b15      	ldr	r3, [pc, #84]	; (8006a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e001      	b.n	80069ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80069b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	3b08      	subs	r3, #8
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80069c8:	fba2 2303 	umull	r2, r3, r2, r3
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d4:	089b      	lsrs	r3, r3, #2
 80069d6:	009a      	lsls	r2, r3, #2
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	461a      	mov	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a0b      	ldr	r2, [pc, #44]	; (8006a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80069e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2201      	movs	r2, #1
 80069f0:	409a      	lsls	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40020407 	.word	0x40020407
 8006a08:	40020800 	.word	0x40020800
 8006a0c:	40020820 	.word	0x40020820
 8006a10:	cccccccd 	.word	0xcccccccd
 8006a14:	40020880 	.word	0x40020880

08006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	461a      	mov	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a3a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	2201      	movs	r2, #1
 8006a46:	409a      	lsls	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	1000823f 	.word	0x1000823f
 8006a5c:	40020940 	.word	0x40020940

08006a60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e147      	b.n	8006d02 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fa ff70 	bl	800196c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0210 	bic.w	r2, r2, #16
 8006a9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a9c:	f7fd fa40 	bl	8003f20 <HAL_GetTick>
 8006aa0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006aa2:	e012      	b.n	8006aca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006aa4:	f7fd fa3c 	bl	8003f20 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b0a      	cmp	r3, #10
 8006ab0:	d90b      	bls.n	8006aca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e11b      	b.n	8006d02 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d0e5      	beq.n	8006aa4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ae8:	f7fd fa1a 	bl	8003f20 <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006aee:	e012      	b.n	8006b16 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006af0:	f7fd fa16 	bl	8003f20 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b0a      	cmp	r3, #10
 8006afc:	d90b      	bls.n	8006b16 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b02:	f043 0201 	orr.w	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e0f5      	b.n	8006d02 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0e5      	beq.n	8006af0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0202 	orr.w	r2, r2, #2
 8006b32:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a74      	ldr	r2, [pc, #464]	; (8006d0c <HAL_FDCAN_Init+0x2ac>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d103      	bne.n	8006b46 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006b3e:	4a74      	ldr	r2, [pc, #464]	; (8006d10 <HAL_FDCAN_Init+0x2b0>)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7c1b      	ldrb	r3, [r3, #16]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d108      	bne.n	8006b60 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5c:	619a      	str	r2, [r3, #24]
 8006b5e:	e007      	b.n	8006b70 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7c5b      	ldrb	r3, [r3, #17]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d108      	bne.n	8006b8a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b86:	619a      	str	r2, [r3, #24]
 8006b88:	e007      	b.n	8006b9a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b98:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	7c9b      	ldrb	r3, [r3, #18]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d108      	bne.n	8006bb4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bb0:	619a      	str	r2, [r3, #24]
 8006bb2:	e007      	b.n	8006bc4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bc2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	699a      	ldr	r2, [r3, #24]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006be8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0210 	bic.w	r2, r2, #16
 8006bf8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d108      	bne.n	8006c14 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699a      	ldr	r2, [r3, #24]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0204 	orr.w	r2, r2, #4
 8006c10:	619a      	str	r2, [r3, #24]
 8006c12:	e02c      	b.n	8006c6e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d028      	beq.n	8006c6e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d01c      	beq.n	8006c5e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c32:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0210 	orr.w	r2, r2, #16
 8006c42:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d110      	bne.n	8006c6e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0220 	orr.w	r2, r2, #32
 8006c5a:	619a      	str	r2, [r3, #24]
 8006c5c:	e007      	b.n	8006c6e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0220 	orr.w	r2, r2, #32
 8006c6c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c7e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c86:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c96:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c98:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca2:	d115      	bne.n	8006cd0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cb2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006cbc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006ccc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fcae 	bl	8007648 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40006400 	.word	0x40006400
 8006d10:	40006500 	.word	0x40006500

08006d14 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d24:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d002      	beq.n	8006d32 <HAL_FDCAN_ConfigFilter+0x1e>
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d13d      	bne.n	8006dae <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d119      	bne.n	8006d6e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d46:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006d4e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e01d      	b.n	8006daa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	075a      	lsls	r2, r3, #29
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	079a      	lsls	r2, r3, #30
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	3304      	adds	r3, #4
 8006da2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e006      	b.n	8006dbc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db2:	f043 0202 	orr.w	r2, r3, #2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
  }
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d116      	bne.n	8006e10 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dea:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	011a      	lsls	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	431a      	orrs	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e006      	b.n	8006e1e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e14:	f043 0204 	orr.w	r2, r3, #4
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
  }
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d110      	bne.n	8006e60 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e006      	b.n	8006e6e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e64:	f043 0204 	orr.w	r2, r3, #4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b086      	sub	sp, #24
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d12c      	bne.n	8006eec <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e023      	b.n	8006efa <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fc29 	bl	8007720 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8006eda:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006ede:	2201      	movs	r2, #1
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	409a      	lsls	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e006      	b.n	8006efa <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef0:	f043 0208 	orr.w	r2, r3, #8
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b08b      	sub	sp, #44	; 0x2c
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f1c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006f1e:	7efb      	ldrb	r3, [r7, #27]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	f040 80e8 	bne.w	80070f6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d137      	bne.n	8006f9c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d107      	bne.n	8006f4c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0db      	b.n	8007104 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	0e1b      	lsrs	r3, r3, #24
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d10a      	bne.n	8006f74 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f66:	0a5b      	lsrs	r3, r3, #9
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006f70:	2301      	movs	r3, #1
 8006f72:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	4413      	add	r3, r2
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	440b      	add	r3, r1
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9a:	e036      	b.n	800700a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0a3      	b.n	8007104 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fc4:	0e1b      	lsrs	r3, r3, #24
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d10a      	bne.n	8006fe4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	4613      	mov	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4413      	add	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	440b      	add	r3, r1
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d107      	bne.n	800702e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	0c9b      	lsrs	r3, r3, #18
 8007024:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	e005      	b.n	800703a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	3304      	adds	r3, #4
 8007056:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	0c1b      	lsrs	r3, r3, #16
 8007068:	f003 020f 	and.w	r2, r3, #15
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	0e1b      	lsrs	r3, r3, #24
 800708e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	0fda      	lsrs	r2, r3, #31
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	3304      	adds	r3, #4
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80070aa:	2300      	movs	r3, #0
 80070ac:	623b      	str	r3, [r7, #32]
 80070ae:	e00a      	b.n	80070c6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	441a      	add	r2, r3
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	440b      	add	r3, r1
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	3301      	adds	r3, #1
 80070c4:	623b      	str	r3, [r7, #32]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	4a11      	ldr	r2, [pc, #68]	; (8007110 <HAL_FDCAN_GetRxMessage+0x20c>)
 80070cc:	5cd3      	ldrb	r3, [r2, r3]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d3ec      	bcc.n	80070b0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d105      	bne.n	80070e8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80070e6:	e004      	b.n	80070f2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e006      	b.n	8007104 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fa:	f043 0208 	orr.w	r2, r3, #8
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
  }
}
 8007104:	4618      	mov	r0, r3
 8007106:	372c      	adds	r7, #44	; 0x2c
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	0800de84 	.word	0x0800de84

08007114 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b40      	cmp	r3, #64	; 0x40
 8007122:	d107      	bne.n	8007134 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	e006      	b.n	8007142 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8007166:	68fb      	ldr	r3, [r7, #12]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007186:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d003      	beq.n	8007196 <HAL_FDCAN_ActivateNotification+0x22>
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	2b02      	cmp	r3, #2
 8007192:	f040 80c8 	bne.w	8007326 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d03b      	beq.n	800722a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d031      	beq.n	800722a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d027      	beq.n	800722a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01d      	beq.n	800722a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f003 0310 	and.w	r3, r3, #16
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d013      	beq.n	800722a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00c      	beq.n	800723a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d107      	bne.n	800723a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0201 	orr.w	r2, r2, #1
 8007238:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d13b      	bne.n	80072c6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d131      	bne.n	80072c6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007268:	2b00      	cmp	r3, #0
 800726a:	d004      	beq.n	8007276 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d127      	bne.n	80072c6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d11d      	bne.n	80072c6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b00      	cmp	r3, #0
 800729c:	d113      	bne.n	80072c6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00c      	beq.n	80072d6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f042 0202 	orr.w	r2, r2, #2
 80072d4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d009      	beq.n	80072f4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	430a      	orrs	r2, r1
 800730e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	430a      	orrs	r2, r1
 8007320:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	e006      	b.n	8007334 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732a:	f043 0202 	orr.w	r2, r3, #2
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
  }
}
 8007334:	4618      	mov	r0, r3
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08c      	sub	sp, #48	; 0x30
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800735c:	4013      	ands	r3, r2
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007374:	4013      	ands	r3, r2
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738c:	4013      	ands	r3, r2
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800739a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a2:	6a3a      	ldr	r2, [r7, #32]
 80073a4:	4013      	ands	r3, r2
 80073a6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80073b2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	4013      	ands	r3, r2
 80073be:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ce:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d006      	beq.n	80073f2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2240      	movs	r2, #64	; 0x40
 80073ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f90b 	bl	8007608 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d019      	beq.n	8007430 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d014      	beq.n	8007430 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800740e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4013      	ands	r3, r2
 800741c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007426:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007428:	6939      	ldr	r1, [r7, #16]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f8cd 	bl	80075ca <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d007      	beq.n	8007446 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800743e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f8a2 	bl	800758a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007452:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fb fc9c 	bl	8002d94 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007468:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800746a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7fb fce7 	bl	8002e40 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800748e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f885 	bl	80075a0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749c:	2b00      	cmp	r3, #0
 800749e:	d018      	beq.n	80074d2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d013      	beq.n	80074d2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80074b2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4013      	ands	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2280      	movs	r2, #128	; 0x80
 80074c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f871 	bl	80075b4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f875 	bl	80075e0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00c      	beq.n	800751a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007512:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f86d 	bl	80075f4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007536:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007552:	69f9      	ldr	r1, [r7, #28]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f86b 	bl	8007630 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6a3a      	ldr	r2, [r7, #32]
 8007566:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f84d 	bl	800761c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007582:	bf00      	nop
 8007584:	3730      	adds	r7, #48	; 0x30
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007650:	4b30      	ldr	r3, [pc, #192]	; (8007714 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8007652:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2f      	ldr	r2, [pc, #188]	; (8007718 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d103      	bne.n	8007666 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007664:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2c      	ldr	r2, [pc, #176]	; (800771c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d103      	bne.n	8007678 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8007676:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007686:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768e:	041a      	lsls	r2, r3, #16
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ac:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	061a      	lsls	r2, r3, #24
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	e005      	b.n	80076fa <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3304      	adds	r3, #4
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	429a      	cmp	r2, r3
 8007704:	d3f3      	bcc.n	80076ee <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	4000a400 	.word	0x4000a400
 8007718:	40006800 	.word	0x40006800
 800771c:	40006c00 	.word	0x40006c00

08007720 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007720:	b480      	push	{r7}
 8007722:	b089      	sub	sp, #36	; 0x24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800773e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007746:	4313      	orrs	r3, r2
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	e00a      	b.n	8007762 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007754:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800775a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800775c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007760:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800776c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007772:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007778:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007780:	4313      	orrs	r3, r2
 8007782:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	4613      	mov	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	440b      	add	r3, r1
 8007794:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	3304      	adds	r3, #4
 80077a0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	3304      	adds	r3, #4
 80077ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	e020      	b.n	80077f6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	3303      	adds	r3, #3
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	3302      	adds	r3, #2
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	440b      	add	r3, r1
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077cc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	3301      	adds	r3, #1
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	440b      	add	r3, r1
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80077da:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	440a      	add	r2, r1
 80077e2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80077e4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	3304      	adds	r3, #4
 80077ee:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	3304      	adds	r3, #4
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	4a06      	ldr	r2, [pc, #24]	; (8007814 <FDCAN_CopyMessageToRAM+0xf4>)
 80077fc:	5cd3      	ldrb	r3, [r2, r3]
 80077fe:	461a      	mov	r2, r3
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	4293      	cmp	r3, r2
 8007804:	d3d6      	bcc.n	80077b4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	3724      	adds	r7, #36	; 0x24
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	0800de84 	.word	0x0800de84

08007818 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e033      	b.n	8007892 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fa fc94 	bl	800216c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f854 	bl	80078f8 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f822 	bl	800789a <FMAC_Reset>
 8007856:	4603      	mov	r3, r0
 8007858:	2b01      	cmp	r3, #1
 800785a:	d10c      	bne.n	8007876 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007860:	f043 0210 	orr.w	r2, r3, #16
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	22a0      	movs	r2, #160	; 0xa0
 800786c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
 8007874:	e008      	b.n	8007888 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a2:	f7fc fb3d 	bl	8003f20 <HAL_GetTick>
 80078a6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80078b6:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80078b8:	e00f      	b.n	80078da <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80078ba:	f7fc fb31 	bl	8003f20 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80078c8:	d907      	bls.n	80078da <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e00a      	b.n	80078f0 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e8      	bne.n	80078ba <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f807 	bl	8007914 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f81b 	bl	8007942 <FMAC_ResetOutputStateAndDataPointers>
}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800797e:	e15a      	b.n	8007c36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	2101      	movs	r1, #1
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	fa01 f303 	lsl.w	r3, r1, r3
 800798c:	4013      	ands	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 814c 	beq.w	8007c30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 0303 	and.w	r3, r3, #3
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d005      	beq.n	80079b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d130      	bne.n	8007a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	2203      	movs	r2, #3
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	43db      	mvns	r3, r3
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4013      	ands	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	fa02 f303 	lsl.w	r3, r2, r3
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079e6:	2201      	movs	r2, #1
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	fa02 f303 	lsl.w	r3, r2, r3
 80079ee:	43db      	mvns	r3, r3
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4013      	ands	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	091b      	lsrs	r3, r3, #4
 80079fc:	f003 0201 	and.w	r2, r3, #1
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d017      	beq.n	8007a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	2203      	movs	r2, #3
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	43db      	mvns	r3, r3
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4013      	ands	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d123      	bne.n	8007aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	08da      	lsrs	r2, r3, #3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3208      	adds	r2, #8
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	220f      	movs	r2, #15
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	43db      	mvns	r3, r3
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	08da      	lsrs	r2, r3, #3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3208      	adds	r2, #8
 8007a9c:	6939      	ldr	r1, [r7, #16]
 8007a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	2203      	movs	r2, #3
 8007aae:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f003 0203 	and.w	r2, r3, #3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80a6 	beq.w	8007c30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ae4:	4b5b      	ldr	r3, [pc, #364]	; (8007c54 <HAL_GPIO_Init+0x2e4>)
 8007ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae8:	4a5a      	ldr	r2, [pc, #360]	; (8007c54 <HAL_GPIO_Init+0x2e4>)
 8007aea:	f043 0301 	orr.w	r3, r3, #1
 8007aee:	6613      	str	r3, [r2, #96]	; 0x60
 8007af0:	4b58      	ldr	r3, [pc, #352]	; (8007c54 <HAL_GPIO_Init+0x2e4>)
 8007af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	60bb      	str	r3, [r7, #8]
 8007afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007afc:	4a56      	ldr	r2, [pc, #344]	; (8007c58 <HAL_GPIO_Init+0x2e8>)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	089b      	lsrs	r3, r3, #2
 8007b02:	3302      	adds	r3, #2
 8007b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	220f      	movs	r2, #15
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b26:	d01f      	beq.n	8007b68 <HAL_GPIO_Init+0x1f8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a4c      	ldr	r2, [pc, #304]	; (8007c5c <HAL_GPIO_Init+0x2ec>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d019      	beq.n	8007b64 <HAL_GPIO_Init+0x1f4>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a4b      	ldr	r2, [pc, #300]	; (8007c60 <HAL_GPIO_Init+0x2f0>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d013      	beq.n	8007b60 <HAL_GPIO_Init+0x1f0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a4a      	ldr	r2, [pc, #296]	; (8007c64 <HAL_GPIO_Init+0x2f4>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00d      	beq.n	8007b5c <HAL_GPIO_Init+0x1ec>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a49      	ldr	r2, [pc, #292]	; (8007c68 <HAL_GPIO_Init+0x2f8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d007      	beq.n	8007b58 <HAL_GPIO_Init+0x1e8>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a48      	ldr	r2, [pc, #288]	; (8007c6c <HAL_GPIO_Init+0x2fc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d101      	bne.n	8007b54 <HAL_GPIO_Init+0x1e4>
 8007b50:	2305      	movs	r3, #5
 8007b52:	e00a      	b.n	8007b6a <HAL_GPIO_Init+0x1fa>
 8007b54:	2306      	movs	r3, #6
 8007b56:	e008      	b.n	8007b6a <HAL_GPIO_Init+0x1fa>
 8007b58:	2304      	movs	r3, #4
 8007b5a:	e006      	b.n	8007b6a <HAL_GPIO_Init+0x1fa>
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e004      	b.n	8007b6a <HAL_GPIO_Init+0x1fa>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e002      	b.n	8007b6a <HAL_GPIO_Init+0x1fa>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <HAL_GPIO_Init+0x1fa>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	f002 0203 	and.w	r2, r2, #3
 8007b70:	0092      	lsls	r2, r2, #2
 8007b72:	4093      	lsls	r3, r2
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b7a:	4937      	ldr	r1, [pc, #220]	; (8007c58 <HAL_GPIO_Init+0x2e8>)
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	089b      	lsrs	r3, r3, #2
 8007b80:	3302      	adds	r3, #2
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b88:	4b39      	ldr	r3, [pc, #228]	; (8007c70 <HAL_GPIO_Init+0x300>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	43db      	mvns	r3, r3
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4013      	ands	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007bac:	4a30      	ldr	r2, [pc, #192]	; (8007c70 <HAL_GPIO_Init+0x300>)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007bb2:	4b2f      	ldr	r3, [pc, #188]	; (8007c70 <HAL_GPIO_Init+0x300>)
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007bd6:	4a26      	ldr	r2, [pc, #152]	; (8007c70 <HAL_GPIO_Init+0x300>)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007bdc:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <HAL_GPIO_Init+0x300>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4013      	ands	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007c00:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <HAL_GPIO_Init+0x300>)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007c06:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <HAL_GPIO_Init+0x300>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4013      	ands	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c2a:	4a11      	ldr	r2, [pc, #68]	; (8007c70 <HAL_GPIO_Init+0x300>)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	3301      	adds	r3, #1
 8007c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f47f ae9d 	bne.w	8007980 <HAL_GPIO_Init+0x10>
  }
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40021000 	.word	0x40021000
 8007c58:	40010000 	.word	0x40010000
 8007c5c:	48000400 	.word	0x48000400
 8007c60:	48000800 	.word	0x48000800
 8007c64:	48000c00 	.word	0x48000c00
 8007c68:	48001000 	.word	0x48001000
 8007c6c:	48001400 	.word	0x48001400
 8007c70:	40010400 	.word	0x40010400

08007c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e08d      	b.n	8007da2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fa fb16 	bl	80022cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2224      	movs	r2, #36	; 0x24
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0201 	bic.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d107      	bne.n	8007cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689a      	ldr	r2, [r3, #8]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cea:	609a      	str	r2, [r3, #8]
 8007cec:	e006      	b.n	8007cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d108      	bne.n	8007d16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d12:	605a      	str	r2, [r3, #4]
 8007d14:	e007      	b.n	8007d26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6812      	ldr	r2, [r2, #0]
 8007d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69d9      	ldr	r1, [r3, #28]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a1a      	ldr	r2, [r3, #32]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	607a      	str	r2, [r7, #4]
 8007db6:	461a      	mov	r2, r3
 8007db8:	460b      	mov	r3, r1
 8007dba:	817b      	strh	r3, [r7, #10]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	f040 80fd 	bne.w	8007fc8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_I2C_Master_Transmit+0x30>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e0f6      	b.n	8007fca <HAL_I2C_Master_Transmit+0x21e>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007de4:	f7fc f89c 	bl	8003f20 <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	2319      	movs	r3, #25
 8007df0:	2201      	movs	r2, #1
 8007df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 fa24 	bl	8008244 <I2C_WaitOnFlagUntilTimeout>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e0e1      	b.n	8007fca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2221      	movs	r2, #33	; 0x21
 8007e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2210      	movs	r2, #16
 8007e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	893a      	ldrh	r2, [r7, #8]
 8007e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2bff      	cmp	r3, #255	; 0xff
 8007e36:	d906      	bls.n	8007e46 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	22ff      	movs	r2, #255	; 0xff
 8007e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007e3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	e007      	b.n	8007e56 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e54:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d024      	beq.n	8007ea8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	781a      	ldrb	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	3301      	adds	r3, #1
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	8979      	ldrh	r1, [r7, #10]
 8007e9a:	4b4e      	ldr	r3, [pc, #312]	; (8007fd4 <HAL_I2C_Master_Transmit+0x228>)
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fc1f 	bl	80086e4 <I2C_TransferConfig>
 8007ea6:	e066      	b.n	8007f76 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	8979      	ldrh	r1, [r7, #10]
 8007eb0:	4b48      	ldr	r3, [pc, #288]	; (8007fd4 <HAL_I2C_Master_Transmit+0x228>)
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fc14 	bl	80086e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ebc:	e05b      	b.n	8007f76 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	6a39      	ldr	r1, [r7, #32]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 fa17 	bl	80082f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e07b      	b.n	8007fca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	781a      	ldrb	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d034      	beq.n	8007f76 <HAL_I2C_Master_Transmit+0x1ca>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d130      	bne.n	8007f76 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2180      	movs	r1, #128	; 0x80
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f990 	bl	8008244 <I2C_WaitOnFlagUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e04d      	b.n	8007fca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2bff      	cmp	r3, #255	; 0xff
 8007f36:	d90e      	bls.n	8007f56 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	22ff      	movs	r2, #255	; 0xff
 8007f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	8979      	ldrh	r1, [r7, #10]
 8007f46:	2300      	movs	r3, #0
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 fbc8 	bl	80086e4 <I2C_TransferConfig>
 8007f54:	e00f      	b.n	8007f76 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	8979      	ldrh	r1, [r7, #10]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fbb7 	bl	80086e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d19e      	bne.n	8007ebe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	6a39      	ldr	r1, [r7, #32]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f9fd 	bl	8008384 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e01a      	b.n	8007fca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <HAL_I2C_Master_Transmit+0x22c>)
 8007fa8:	400b      	ands	r3, r1
 8007faa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e000      	b.n	8007fca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007fc8:	2302      	movs	r3, #2
  }
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	80002000 	.word	0x80002000
 8007fd8:	fe00e800 	.word	0xfe00e800

08007fdc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	460b      	mov	r3, r1
 8007fea:	817b      	strh	r3, [r7, #10]
 8007fec:	4613      	mov	r3, r2
 8007fee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	f040 80db 	bne.w	80081b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_I2C_Master_Receive+0x30>
 8008008:	2302      	movs	r3, #2
 800800a:	e0d4      	b.n	80081b6 <HAL_I2C_Master_Receive+0x1da>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008014:	f7fb ff84 	bl	8003f20 <HAL_GetTick>
 8008018:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	2319      	movs	r3, #25
 8008020:	2201      	movs	r2, #1
 8008022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f90c 	bl	8008244 <I2C_WaitOnFlagUntilTimeout>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e0bf      	b.n	80081b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2222      	movs	r2, #34	; 0x22
 800803a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2210      	movs	r2, #16
 8008042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	893a      	ldrh	r2, [r7, #8]
 8008056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008062:	b29b      	uxth	r3, r3
 8008064:	2bff      	cmp	r3, #255	; 0xff
 8008066:	d90e      	bls.n	8008086 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	22ff      	movs	r2, #255	; 0xff
 800806c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008072:	b2da      	uxtb	r2, r3
 8008074:	8979      	ldrh	r1, [r7, #10]
 8008076:	4b52      	ldr	r3, [pc, #328]	; (80081c0 <HAL_I2C_Master_Receive+0x1e4>)
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fb30 	bl	80086e4 <I2C_TransferConfig>
 8008084:	e06d      	b.n	8008162 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008094:	b2da      	uxtb	r2, r3
 8008096:	8979      	ldrh	r1, [r7, #10]
 8008098:	4b49      	ldr	r3, [pc, #292]	; (80081c0 <HAL_I2C_Master_Receive+0x1e4>)
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 fb1f 	bl	80086e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80080a6:	e05c      	b.n	8008162 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	6a39      	ldr	r1, [r7, #32]
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 f9ad 	bl	800840c <I2C_WaitOnRXNEFlagUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e07c      	b.n	80081b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d034      	beq.n	8008162 <HAL_I2C_Master_Receive+0x186>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d130      	bne.n	8008162 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	2200      	movs	r2, #0
 8008108:	2180      	movs	r1, #128	; 0x80
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 f89a 	bl	8008244 <I2C_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e04d      	b.n	80081b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811e:	b29b      	uxth	r3, r3
 8008120:	2bff      	cmp	r3, #255	; 0xff
 8008122:	d90e      	bls.n	8008142 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	22ff      	movs	r2, #255	; 0xff
 8008128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800812e:	b2da      	uxtb	r2, r3
 8008130:	8979      	ldrh	r1, [r7, #10]
 8008132:	2300      	movs	r3, #0
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 fad2 	bl	80086e4 <I2C_TransferConfig>
 8008140:	e00f      	b.n	8008162 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008150:	b2da      	uxtb	r2, r3
 8008152:	8979      	ldrh	r1, [r7, #10]
 8008154:	2300      	movs	r3, #0
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 fac1 	bl	80086e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d19d      	bne.n	80080a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	6a39      	ldr	r1, [r7, #32]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f907 	bl	8008384 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e01a      	b.n	80081b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2220      	movs	r2, #32
 8008186:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6859      	ldr	r1, [r3, #4]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <HAL_I2C_Master_Receive+0x1e8>)
 8008194:	400b      	ands	r3, r1
 8008196:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	e000      	b.n	80081b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80081b4:	2302      	movs	r3, #2
  }
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	80002400 	.word	0x80002400
 80081c4:	fe00e800 	.word	0xfe00e800

080081c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	68f9      	ldr	r1, [r7, #12]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
  }
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b02      	cmp	r3, #2
 8008210:	d103      	bne.n	800821a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b01      	cmp	r3, #1
 8008226:	d007      	beq.n	8008238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0201 	orr.w	r2, r2, #1
 8008236:	619a      	str	r2, [r3, #24]
  }
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008254:	e03b      	b.n	80082ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f962 	bl	8008524 <I2C_IsErrorOccurred>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e041      	b.n	80082ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d02d      	beq.n	80082ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008272:	f7fb fe55 	bl	8003f20 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	429a      	cmp	r2, r3
 8008280:	d302      	bcc.n	8008288 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d122      	bne.n	80082ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	4013      	ands	r3, r2
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	429a      	cmp	r2, r3
 8008296:	bf0c      	ite	eq
 8008298:	2301      	moveq	r3, #1
 800829a:	2300      	movne	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d113      	bne.n	80082ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082aa:	f043 0220 	orr.w	r2, r3, #32
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e00f      	b.n	80082ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4013      	ands	r3, r2
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	429a      	cmp	r2, r3
 80082dc:	bf0c      	ite	eq
 80082de:	2301      	moveq	r3, #1
 80082e0:	2300      	movne	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d0b4      	beq.n	8008256 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008302:	e033      	b.n	800836c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 f90b 	bl	8008524 <I2C_IsErrorOccurred>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e031      	b.n	800837c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	d025      	beq.n	800836c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008320:	f7fb fdfe 	bl	8003f20 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	429a      	cmp	r2, r3
 800832e:	d302      	bcc.n	8008336 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d11a      	bne.n	800836c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b02      	cmp	r3, #2
 8008342:	d013      	beq.n	800836c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008348:	f043 0220 	orr.w	r2, r3, #32
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2220      	movs	r2, #32
 8008354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e007      	b.n	800837c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b02      	cmp	r3, #2
 8008378:	d1c4      	bne.n	8008304 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008390:	e02f      	b.n	80083f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 f8c4 	bl	8008524 <I2C_IsErrorOccurred>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e02d      	b.n	8008402 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a6:	f7fb fdbb 	bl	8003f20 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d302      	bcc.n	80083bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d11a      	bne.n	80083f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	d013      	beq.n	80083f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ce:	f043 0220 	orr.w	r2, r3, #32
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2220      	movs	r2, #32
 80083da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e007      	b.n	8008402 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	f003 0320 	and.w	r3, r3, #32
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	d1c8      	bne.n	8008392 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800841c:	e071      	b.n	8008502 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f87e 	bl	8008524 <I2C_IsErrorOccurred>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b20      	cmp	r3, #32
 800843e:	d13b      	bne.n	80084b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d138      	bne.n	80084b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b04      	cmp	r3, #4
 8008452:	d105      	bne.n	8008460 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f003 0310 	and.w	r3, r3, #16
 800846a:	2b10      	cmp	r3, #16
 800846c:	d121      	bne.n	80084b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2210      	movs	r2, #16
 8008474:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2204      	movs	r2, #4
 800847a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2220      	movs	r2, #32
 8008482:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6859      	ldr	r1, [r3, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	4b24      	ldr	r3, [pc, #144]	; (8008520 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008490:	400b      	ands	r3, r1
 8008492:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
 80084b0:	e002      	b.n	80084b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80084b8:	f7fb fd32 	bl	8003f20 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d302      	bcc.n	80084ce <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d119      	bne.n	8008502 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d116      	bne.n	8008502 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d00f      	beq.n	8008502 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	f043 0220 	orr.w	r2, r3, #32
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b04      	cmp	r3, #4
 800850e:	d002      	beq.n	8008516 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008510:	7dfb      	ldrb	r3, [r7, #23]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d083      	beq.n	800841e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	fe00e800 	.word	0xfe00e800

08008524 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b00      	cmp	r3, #0
 800854e:	d068      	beq.n	8008622 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2210      	movs	r2, #16
 8008556:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008558:	e049      	b.n	80085ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d045      	beq.n	80085ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008562:	f7fb fcdd 	bl	8003f20 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	429a      	cmp	r2, r3
 8008570:	d302      	bcc.n	8008578 <I2C_IsErrorOccurred+0x54>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d13a      	bne.n	80085ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008582:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800858a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800859a:	d121      	bne.n	80085e0 <I2C_IsErrorOccurred+0xbc>
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085a2:	d01d      	beq.n	80085e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80085a4:	7cfb      	ldrb	r3, [r7, #19]
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d01a      	beq.n	80085e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80085ba:	f7fb fcb1 	bl	8003f20 <HAL_GetTick>
 80085be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085c0:	e00e      	b.n	80085e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80085c2:	f7fb fcad 	bl	8003f20 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b19      	cmp	r3, #25
 80085ce:	d907      	bls.n	80085e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	f043 0320 	orr.w	r3, r3, #32
 80085d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80085de:	e006      	b.n	80085ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	d1e9      	bne.n	80085c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d003      	beq.n	8008604 <I2C_IsErrorOccurred+0xe0>
 80085fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0aa      	beq.n	800855a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008608:	2b00      	cmp	r3, #0
 800860a:	d103      	bne.n	8008614 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2220      	movs	r2, #32
 8008612:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	f043 0304 	orr.w	r3, r3, #4
 800861a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	f043 0308 	orr.w	r3, r3, #8
 800865c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008666:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	f043 0302 	orr.w	r3, r3, #2
 800867e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01c      	beq.n	80086d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff fdaf 	bl	80081fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6859      	ldr	r1, [r3, #4]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <I2C_IsErrorOccurred+0x1bc>)
 80086aa:	400b      	ands	r3, r1
 80086ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2220      	movs	r2, #32
 80086be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80086d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3728      	adds	r7, #40	; 0x28
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	fe00e800 	.word	0xfe00e800

080086e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	817b      	strh	r3, [r7, #10]
 80086f2:	4613      	mov	r3, r2
 80086f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086f6:	897b      	ldrh	r3, [r7, #10]
 80086f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086fc:	7a7b      	ldrb	r3, [r7, #9]
 80086fe:	041b      	lsls	r3, r3, #16
 8008700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008704:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	4313      	orrs	r3, r2
 800870e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008712:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	0d5b      	lsrs	r3, r3, #21
 800871e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008722:	4b08      	ldr	r3, [pc, #32]	; (8008744 <I2C_TransferConfig+0x60>)
 8008724:	430b      	orrs	r3, r1
 8008726:	43db      	mvns	r3, r3
 8008728:	ea02 0103 	and.w	r1, r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	03ff63ff 	.word	0x03ff63ff

08008748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b20      	cmp	r3, #32
 800875c:	d138      	bne.n	80087d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008764:	2b01      	cmp	r3, #1
 8008766:	d101      	bne.n	800876c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008768:	2302      	movs	r3, #2
 800876a:	e032      	b.n	80087d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2224      	movs	r2, #36	; 0x24
 8008778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0201 	bic.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800879a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6819      	ldr	r1, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e000      	b.n	80087d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087d0:	2302      	movs	r3, #2
  }
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087de:	b480      	push	{r7}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	d139      	bne.n	8008868 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087fe:	2302      	movs	r3, #2
 8008800:	e033      	b.n	800886a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2224      	movs	r2, #36	; 0x24
 800880e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008830:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	021b      	lsls	r3, r3, #8
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4313      	orrs	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	e000      	b.n	800886a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008868:	2302      	movs	r3, #2
  }
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d141      	bne.n	800890a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008886:	4b4b      	ldr	r3, [pc, #300]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800888e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008892:	d131      	bne.n	80088f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008894:	4b47      	ldr	r3, [pc, #284]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800889a:	4a46      	ldr	r2, [pc, #280]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800889c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80088a4:	4b43      	ldr	r3, [pc, #268]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80088ac:	4a41      	ldr	r2, [pc, #260]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80088b4:	4b40      	ldr	r3, [pc, #256]	; (80089b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2232      	movs	r2, #50	; 0x32
 80088ba:	fb02 f303 	mul.w	r3, r2, r3
 80088be:	4a3f      	ldr	r2, [pc, #252]	; (80089bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80088c0:	fba2 2303 	umull	r2, r3, r2, r3
 80088c4:	0c9b      	lsrs	r3, r3, #18
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088ca:	e002      	b.n	80088d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088d2:	4b38      	ldr	r3, [pc, #224]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088de:	d102      	bne.n	80088e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f2      	bne.n	80088cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80088e6:	4b33      	ldr	r3, [pc, #204]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088f2:	d158      	bne.n	80089a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e057      	b.n	80089a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088f8:	4b2e      	ldr	r3, [pc, #184]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088fe:	4a2d      	ldr	r2, [pc, #180]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008908:	e04d      	b.n	80089a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008910:	d141      	bne.n	8008996 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008912:	4b28      	ldr	r3, [pc, #160]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800891a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800891e:	d131      	bne.n	8008984 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008920:	4b24      	ldr	r3, [pc, #144]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008926:	4a23      	ldr	r2, [pc, #140]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800892c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008930:	4b20      	ldr	r3, [pc, #128]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008938:	4a1e      	ldr	r2, [pc, #120]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800893a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800893e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008940:	4b1d      	ldr	r3, [pc, #116]	; (80089b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2232      	movs	r2, #50	; 0x32
 8008946:	fb02 f303 	mul.w	r3, r2, r3
 800894a:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800894c:	fba2 2303 	umull	r2, r3, r2, r3
 8008950:	0c9b      	lsrs	r3, r3, #18
 8008952:	3301      	adds	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008956:	e002      	b.n	800895e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3b01      	subs	r3, #1
 800895c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800895e:	4b15      	ldr	r3, [pc, #84]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800896a:	d102      	bne.n	8008972 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f2      	bne.n	8008958 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008972:	4b10      	ldr	r3, [pc, #64]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800897a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800897e:	d112      	bne.n	80089a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e011      	b.n	80089a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008984:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800898a:	4a0a      	ldr	r2, [pc, #40]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800898c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008990:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008994:	e007      	b.n	80089a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008996:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800899e:	4a05      	ldr	r2, [pc, #20]	; (80089b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	40007000 	.word	0x40007000
 80089b8:	20000018 	.word	0x20000018
 80089bc:	431bde83 	.word	0x431bde83

080089c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	4a04      	ldr	r2, [pc, #16]	; (80089dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089ce:	6093      	str	r3, [r2, #8]
}
 80089d0:	bf00      	nop
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40007000 	.word	0x40007000

080089e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e2fe      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d075      	beq.n	8008aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089fe:	4b97      	ldr	r3, [pc, #604]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f003 030c 	and.w	r3, r3, #12
 8008a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a08:	4b94      	ldr	r3, [pc, #592]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b0c      	cmp	r3, #12
 8008a16:	d102      	bne.n	8008a1e <HAL_RCC_OscConfig+0x3e>
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d002      	beq.n	8008a24 <HAL_RCC_OscConfig+0x44>
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d10b      	bne.n	8008a3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a24:	4b8d      	ldr	r3, [pc, #564]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d05b      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x108>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d157      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e2d9      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a44:	d106      	bne.n	8008a54 <HAL_RCC_OscConfig+0x74>
 8008a46:	4b85      	ldr	r3, [pc, #532]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a84      	ldr	r2, [pc, #528]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	e01d      	b.n	8008a90 <HAL_RCC_OscConfig+0xb0>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a5c:	d10c      	bne.n	8008a78 <HAL_RCC_OscConfig+0x98>
 8008a5e:	4b7f      	ldr	r3, [pc, #508]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a7e      	ldr	r2, [pc, #504]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	4b7c      	ldr	r3, [pc, #496]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a7b      	ldr	r2, [pc, #492]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	e00b      	b.n	8008a90 <HAL_RCC_OscConfig+0xb0>
 8008a78:	4b78      	ldr	r3, [pc, #480]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a77      	ldr	r2, [pc, #476]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	4b75      	ldr	r3, [pc, #468]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a74      	ldr	r2, [pc, #464]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d013      	beq.n	8008ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a98:	f7fb fa42 	bl	8003f20 <HAL_GetTick>
 8008a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008aa0:	f7fb fa3e 	bl	8003f20 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b64      	cmp	r3, #100	; 0x64
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e29e      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ab2:	4b6a      	ldr	r3, [pc, #424]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0f0      	beq.n	8008aa0 <HAL_RCC_OscConfig+0xc0>
 8008abe:	e014      	b.n	8008aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac0:	f7fb fa2e 	bl	8003f20 <HAL_GetTick>
 8008ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ac6:	e008      	b.n	8008ada <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ac8:	f7fb fa2a 	bl	8003f20 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b64      	cmp	r3, #100	; 0x64
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e28a      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ada:	4b60      	ldr	r3, [pc, #384]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f0      	bne.n	8008ac8 <HAL_RCC_OscConfig+0xe8>
 8008ae6:	e000      	b.n	8008aea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d075      	beq.n	8008be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008af6:	4b59      	ldr	r3, [pc, #356]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 030c 	and.w	r3, r3, #12
 8008afe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b00:	4b56      	ldr	r3, [pc, #344]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	2b0c      	cmp	r3, #12
 8008b0e:	d102      	bne.n	8008b16 <HAL_RCC_OscConfig+0x136>
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d002      	beq.n	8008b1c <HAL_RCC_OscConfig+0x13c>
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d11f      	bne.n	8008b5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b1c:	4b4f      	ldr	r3, [pc, #316]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <HAL_RCC_OscConfig+0x154>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e25d      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b34:	4b49      	ldr	r3, [pc, #292]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	061b      	lsls	r3, r3, #24
 8008b42:	4946      	ldr	r1, [pc, #280]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008b48:	4b45      	ldr	r3, [pc, #276]	; (8008c60 <HAL_RCC_OscConfig+0x280>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fb f99b 	bl	8003e88 <HAL_InitTick>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d043      	beq.n	8008be0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e249      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d023      	beq.n	8008bac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b64:	4b3d      	ldr	r3, [pc, #244]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a3c      	ldr	r2, [pc, #240]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b70:	f7fb f9d6 	bl	8003f20 <HAL_GetTick>
 8008b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b76:	e008      	b.n	8008b8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b78:	f7fb f9d2 	bl	8003f20 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d901      	bls.n	8008b8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e232      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b8a:	4b34      	ldr	r3, [pc, #208]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0f0      	beq.n	8008b78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b96:	4b31      	ldr	r3, [pc, #196]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	061b      	lsls	r3, r3, #24
 8008ba4:	492d      	ldr	r1, [pc, #180]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	604b      	str	r3, [r1, #4]
 8008baa:	e01a      	b.n	8008be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bac:	4b2b      	ldr	r3, [pc, #172]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a2a      	ldr	r2, [pc, #168]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb8:	f7fb f9b2 	bl	8003f20 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bc0:	f7fb f9ae 	bl	8003f20 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e20e      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bd2:	4b22      	ldr	r3, [pc, #136]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1f0      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x1e0>
 8008bde:	e000      	b.n	8008be2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008be0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d041      	beq.n	8008c72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01c      	beq.n	8008c30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bf6:	4b19      	ldr	r3, [pc, #100]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bfc:	4a17      	ldr	r2, [pc, #92]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008bfe:	f043 0301 	orr.w	r3, r3, #1
 8008c02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c06:	f7fb f98b 	bl	8003f20 <HAL_GetTick>
 8008c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c0c:	e008      	b.n	8008c20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c0e:	f7fb f987 	bl	8003f20 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d901      	bls.n	8008c20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e1e7      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c20:	4b0e      	ldr	r3, [pc, #56]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0ef      	beq.n	8008c0e <HAL_RCC_OscConfig+0x22e>
 8008c2e:	e020      	b.n	8008c72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c36:	4a09      	ldr	r2, [pc, #36]	; (8008c5c <HAL_RCC_OscConfig+0x27c>)
 8008c38:	f023 0301 	bic.w	r3, r3, #1
 8008c3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c40:	f7fb f96e 	bl	8003f20 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c46:	e00d      	b.n	8008c64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c48:	f7fb f96a 	bl	8003f20 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d906      	bls.n	8008c64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e1ca      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
 8008c5a:	bf00      	nop
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c64:	4b8c      	ldr	r3, [pc, #560]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1ea      	bne.n	8008c48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0304 	and.w	r3, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 80a6 	beq.w	8008dcc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c80:	2300      	movs	r3, #0
 8008c82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c84:	4b84      	ldr	r3, [pc, #528]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_RCC_OscConfig+0x2b4>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <HAL_RCC_OscConfig+0x2b6>
 8008c94:	2300      	movs	r3, #0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00d      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c9a:	4b7f      	ldr	r3, [pc, #508]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9e:	4a7e      	ldr	r2, [pc, #504]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ca6:	4b7c      	ldr	r3, [pc, #496]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cb6:	4b79      	ldr	r3, [pc, #484]	; (8008e9c <HAL_RCC_OscConfig+0x4bc>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d118      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cc2:	4b76      	ldr	r3, [pc, #472]	; (8008e9c <HAL_RCC_OscConfig+0x4bc>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a75      	ldr	r2, [pc, #468]	; (8008e9c <HAL_RCC_OscConfig+0x4bc>)
 8008cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cce:	f7fb f927 	bl	8003f20 <HAL_GetTick>
 8008cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cd6:	f7fb f923 	bl	8003f20 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e183      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ce8:	4b6c      	ldr	r3, [pc, #432]	; (8008e9c <HAL_RCC_OscConfig+0x4bc>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f0      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d108      	bne.n	8008d0e <HAL_RCC_OscConfig+0x32e>
 8008cfc:	4b66      	ldr	r3, [pc, #408]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d02:	4a65      	ldr	r2, [pc, #404]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d0c:	e024      	b.n	8008d58 <HAL_RCC_OscConfig+0x378>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b05      	cmp	r3, #5
 8008d14:	d110      	bne.n	8008d38 <HAL_RCC_OscConfig+0x358>
 8008d16:	4b60      	ldr	r3, [pc, #384]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d1c:	4a5e      	ldr	r2, [pc, #376]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d1e:	f043 0304 	orr.w	r3, r3, #4
 8008d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d26:	4b5c      	ldr	r3, [pc, #368]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2c:	4a5a      	ldr	r2, [pc, #360]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d36:	e00f      	b.n	8008d58 <HAL_RCC_OscConfig+0x378>
 8008d38:	4b57      	ldr	r3, [pc, #348]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3e:	4a56      	ldr	r2, [pc, #344]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d48:	4b53      	ldr	r3, [pc, #332]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4e:	4a52      	ldr	r2, [pc, #328]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d50:	f023 0304 	bic.w	r3, r3, #4
 8008d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d016      	beq.n	8008d8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d60:	f7fb f8de 	bl	8003f20 <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d66:	e00a      	b.n	8008d7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d68:	f7fb f8da 	bl	8003f20 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e138      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d7e:	4b46      	ldr	r3, [pc, #280]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0ed      	beq.n	8008d68 <HAL_RCC_OscConfig+0x388>
 8008d8c:	e015      	b.n	8008dba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d8e:	f7fb f8c7 	bl	8003f20 <HAL_GetTick>
 8008d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d94:	e00a      	b.n	8008dac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d96:	f7fb f8c3 	bl	8003f20 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d901      	bls.n	8008dac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e121      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dac:	4b3a      	ldr	r3, [pc, #232]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1ed      	bne.n	8008d96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008dba:	7ffb      	ldrb	r3, [r7, #31]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d105      	bne.n	8008dcc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dc0:	4b35      	ldr	r3, [pc, #212]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc4:	4a34      	ldr	r2, [pc, #208]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0320 	and.w	r3, r3, #32
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d03c      	beq.n	8008e52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d01c      	beq.n	8008e1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008de0:	4b2d      	ldr	r3, [pc, #180]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008de6:	4a2c      	ldr	r2, [pc, #176]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008de8:	f043 0301 	orr.w	r3, r3, #1
 8008dec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df0:	f7fb f896 	bl	8003f20 <HAL_GetTick>
 8008df4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008df6:	e008      	b.n	8008e0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008df8:	f7fb f892 	bl	8003f20 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d901      	bls.n	8008e0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e0f2      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e0a:	4b23      	ldr	r3, [pc, #140]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008e0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0ef      	beq.n	8008df8 <HAL_RCC_OscConfig+0x418>
 8008e18:	e01b      	b.n	8008e52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e1a:	4b1f      	ldr	r3, [pc, #124]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e20:	4a1d      	ldr	r2, [pc, #116]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008e22:	f023 0301 	bic.w	r3, r3, #1
 8008e26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e2a:	f7fb f879 	bl	8003f20 <HAL_GetTick>
 8008e2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e30:	e008      	b.n	8008e44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e32:	f7fb f875 	bl	8003f20 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d901      	bls.n	8008e44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e0d5      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e44:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1ef      	bne.n	8008e32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 80c9 	beq.w	8008fee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f003 030c 	and.w	r3, r3, #12
 8008e64:	2b0c      	cmp	r3, #12
 8008e66:	f000 8083 	beq.w	8008f70 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d15e      	bne.n	8008f30 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e72:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a08      	ldr	r2, [pc, #32]	; (8008e98 <HAL_RCC_OscConfig+0x4b8>)
 8008e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7e:	f7fb f84f 	bl	8003f20 <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e84:	e00c      	b.n	8008ea0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e86:	f7fb f84b 	bl	8003f20 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d905      	bls.n	8008ea0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e0ab      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
 8008e98:	40021000 	.word	0x40021000
 8008e9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ea0:	4b55      	ldr	r3, [pc, #340]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1ec      	bne.n	8008e86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008eac:	4b52      	ldr	r3, [pc, #328]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	4b52      	ldr	r3, [pc, #328]	; (8008ffc <HAL_RCC_OscConfig+0x61c>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	6a11      	ldr	r1, [r2, #32]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ebc:	3a01      	subs	r2, #1
 8008ebe:	0112      	lsls	r2, r2, #4
 8008ec0:	4311      	orrs	r1, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008ec6:	0212      	lsls	r2, r2, #8
 8008ec8:	4311      	orrs	r1, r2
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ece:	0852      	lsrs	r2, r2, #1
 8008ed0:	3a01      	subs	r2, #1
 8008ed2:	0552      	lsls	r2, r2, #21
 8008ed4:	4311      	orrs	r1, r2
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008eda:	0852      	lsrs	r2, r2, #1
 8008edc:	3a01      	subs	r2, #1
 8008ede:	0652      	lsls	r2, r2, #25
 8008ee0:	4311      	orrs	r1, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ee6:	06d2      	lsls	r2, r2, #27
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	4943      	ldr	r1, [pc, #268]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ef0:	4b41      	ldr	r3, [pc, #260]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a40      	ldr	r2, [pc, #256]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008efa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008efc:	4b3e      	ldr	r3, [pc, #248]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	4a3d      	ldr	r2, [pc, #244]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f08:	f7fb f80a 	bl	8003f20 <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f10:	f7fb f806 	bl	8003f20 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e066      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f22:	4b35      	ldr	r3, [pc, #212]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0f0      	beq.n	8008f10 <HAL_RCC_OscConfig+0x530>
 8008f2e:	e05e      	b.n	8008fee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f30:	4b31      	ldr	r3, [pc, #196]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a30      	ldr	r2, [pc, #192]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f3c:	f7fa fff0 	bl	8003f20 <HAL_GetTick>
 8008f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f42:	e008      	b.n	8008f56 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f44:	f7fa ffec 	bl	8003f20 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d901      	bls.n	8008f56 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e04c      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f56:	4b28      	ldr	r3, [pc, #160]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f0      	bne.n	8008f44 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008f62:	4b25      	ldr	r3, [pc, #148]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	4924      	ldr	r1, [pc, #144]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008f68:	4b25      	ldr	r3, [pc, #148]	; (8009000 <HAL_RCC_OscConfig+0x620>)
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	60cb      	str	r3, [r1, #12]
 8008f6e:	e03e      	b.n	8008fee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e039      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008f7c:	4b1e      	ldr	r3, [pc, #120]	; (8008ff8 <HAL_RCC_OscConfig+0x618>)
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f003 0203 	and.w	r2, r3, #3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d12c      	bne.n	8008fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d123      	bne.n	8008fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d11b      	bne.n	8008fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d113      	bne.n	8008fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fcc:	085b      	lsrs	r3, r3, #1
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d109      	bne.n	8008fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe0:	085b      	lsrs	r3, r3, #1
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d001      	beq.n	8008fee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e000      	b.n	8008ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	40021000 	.word	0x40021000
 8008ffc:	019f800c 	.word	0x019f800c
 8009000:	feeefffc 	.word	0xfeeefffc

08009004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e11e      	b.n	800925a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800901c:	4b91      	ldr	r3, [pc, #580]	; (8009264 <HAL_RCC_ClockConfig+0x260>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d910      	bls.n	800904c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800902a:	4b8e      	ldr	r3, [pc, #568]	; (8009264 <HAL_RCC_ClockConfig+0x260>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f023 020f 	bic.w	r2, r3, #15
 8009032:	498c      	ldr	r1, [pc, #560]	; (8009264 <HAL_RCC_ClockConfig+0x260>)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	4313      	orrs	r3, r2
 8009038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800903a:	4b8a      	ldr	r3, [pc, #552]	; (8009264 <HAL_RCC_ClockConfig+0x260>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d001      	beq.n	800904c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e106      	b.n	800925a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d073      	beq.n	8009140 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	2b03      	cmp	r3, #3
 800905e:	d129      	bne.n	80090b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009060:	4b81      	ldr	r3, [pc, #516]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e0f4      	b.n	800925a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009070:	f000 f966 	bl	8009340 <RCC_GetSysClockFreqFromPLLSource>
 8009074:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	4a7c      	ldr	r2, [pc, #496]	; (800926c <HAL_RCC_ClockConfig+0x268>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d93f      	bls.n	80090fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800907e:	4b7a      	ldr	r3, [pc, #488]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d009      	beq.n	800909e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009092:	2b00      	cmp	r3, #0
 8009094:	d033      	beq.n	80090fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800909a:	2b00      	cmp	r3, #0
 800909c:	d12f      	bne.n	80090fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800909e:	4b72      	ldr	r3, [pc, #456]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090a6:	4a70      	ldr	r2, [pc, #448]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 80090a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80090ae:	2380      	movs	r3, #128	; 0x80
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	e024      	b.n	80090fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d107      	bne.n	80090cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090bc:	4b6a      	ldr	r3, [pc, #424]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d109      	bne.n	80090dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e0c6      	b.n	800925a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090cc:	4b66      	ldr	r3, [pc, #408]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e0be      	b.n	800925a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80090dc:	f000 f8ce 	bl	800927c <HAL_RCC_GetSysClockFreq>
 80090e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	4a61      	ldr	r2, [pc, #388]	; (800926c <HAL_RCC_ClockConfig+0x268>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d909      	bls.n	80090fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80090ea:	4b5f      	ldr	r3, [pc, #380]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090f2:	4a5d      	ldr	r2, [pc, #372]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 80090f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80090fa:	2380      	movs	r3, #128	; 0x80
 80090fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090fe:	4b5a      	ldr	r3, [pc, #360]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f023 0203 	bic.w	r2, r3, #3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	4957      	ldr	r1, [pc, #348]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800910c:	4313      	orrs	r3, r2
 800910e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009110:	f7fa ff06 	bl	8003f20 <HAL_GetTick>
 8009114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009116:	e00a      	b.n	800912e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009118:	f7fa ff02 	bl	8003f20 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	f241 3288 	movw	r2, #5000	; 0x1388
 8009126:	4293      	cmp	r3, r2
 8009128:	d901      	bls.n	800912e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e095      	b.n	800925a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800912e:	4b4e      	ldr	r3, [pc, #312]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 020c 	and.w	r2, r3, #12
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	429a      	cmp	r2, r3
 800913e:	d1eb      	bne.n	8009118 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d023      	beq.n	8009194 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009158:	4b43      	ldr	r3, [pc, #268]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	4a42      	ldr	r2, [pc, #264]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800915e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009162:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0308 	and.w	r3, r3, #8
 800916c:	2b00      	cmp	r3, #0
 800916e:	d007      	beq.n	8009180 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009170:	4b3d      	ldr	r3, [pc, #244]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009178:	4a3b      	ldr	r2, [pc, #236]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800917a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800917e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009180:	4b39      	ldr	r3, [pc, #228]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	4936      	ldr	r1, [pc, #216]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800918e:	4313      	orrs	r3, r2
 8009190:	608b      	str	r3, [r1, #8]
 8009192:	e008      	b.n	80091a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	2b80      	cmp	r3, #128	; 0x80
 8009198:	d105      	bne.n	80091a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800919a:	4b33      	ldr	r3, [pc, #204]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	4a32      	ldr	r2, [pc, #200]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 80091a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091a6:	4b2f      	ldr	r3, [pc, #188]	; (8009264 <HAL_RCC_ClockConfig+0x260>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d21d      	bcs.n	80091f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091b4:	4b2b      	ldr	r3, [pc, #172]	; (8009264 <HAL_RCC_ClockConfig+0x260>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f023 020f 	bic.w	r2, r3, #15
 80091bc:	4929      	ldr	r1, [pc, #164]	; (8009264 <HAL_RCC_ClockConfig+0x260>)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80091c4:	f7fa feac 	bl	8003f20 <HAL_GetTick>
 80091c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ca:	e00a      	b.n	80091e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091cc:	f7fa fea8 	bl	8003f20 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091da:	4293      	cmp	r3, r2
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e03b      	b.n	800925a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091e2:	4b20      	ldr	r3, [pc, #128]	; (8009264 <HAL_RCC_ClockConfig+0x260>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d1ed      	bne.n	80091cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d008      	beq.n	800920e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091fc:	4b1a      	ldr	r3, [pc, #104]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	4917      	ldr	r1, [pc, #92]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800920a:	4313      	orrs	r3, r2
 800920c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d009      	beq.n	800922e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800921a:	4b13      	ldr	r3, [pc, #76]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	490f      	ldr	r1, [pc, #60]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 800922a:	4313      	orrs	r3, r2
 800922c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800922e:	f000 f825 	bl	800927c <HAL_RCC_GetSysClockFreq>
 8009232:	4602      	mov	r2, r0
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <HAL_RCC_ClockConfig+0x264>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	091b      	lsrs	r3, r3, #4
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	490c      	ldr	r1, [pc, #48]	; (8009270 <HAL_RCC_ClockConfig+0x26c>)
 8009240:	5ccb      	ldrb	r3, [r1, r3]
 8009242:	f003 031f 	and.w	r3, r3, #31
 8009246:	fa22 f303 	lsr.w	r3, r2, r3
 800924a:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <HAL_RCC_ClockConfig+0x270>)
 800924c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800924e:	4b0a      	ldr	r3, [pc, #40]	; (8009278 <HAL_RCC_ClockConfig+0x274>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f7fa fe18 	bl	8003e88 <HAL_InitTick>
 8009258:	4603      	mov	r3, r0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	40022000 	.word	0x40022000
 8009268:	40021000 	.word	0x40021000
 800926c:	04c4b400 	.word	0x04c4b400
 8009270:	0800de6c 	.word	0x0800de6c
 8009274:	20000018 	.word	0x20000018
 8009278:	20000020 	.word	0x20000020

0800927c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009282:	4b2c      	ldr	r3, [pc, #176]	; (8009334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f003 030c 	and.w	r3, r3, #12
 800928a:	2b04      	cmp	r3, #4
 800928c:	d102      	bne.n	8009294 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800928e:	4b2a      	ldr	r3, [pc, #168]	; (8009338 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	e047      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009294:	4b27      	ldr	r3, [pc, #156]	; (8009334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f003 030c 	and.w	r3, r3, #12
 800929c:	2b08      	cmp	r3, #8
 800929e:	d102      	bne.n	80092a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80092a0:	4b26      	ldr	r3, [pc, #152]	; (800933c <HAL_RCC_GetSysClockFreq+0xc0>)
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	e03e      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80092a6:	4b23      	ldr	r3, [pc, #140]	; (8009334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 030c 	and.w	r3, r3, #12
 80092ae:	2b0c      	cmp	r3, #12
 80092b0:	d136      	bne.n	8009320 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092b2:	4b20      	ldr	r3, [pc, #128]	; (8009334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092bc:	4b1d      	ldr	r3, [pc, #116]	; (8009334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	091b      	lsrs	r3, r3, #4
 80092c2:	f003 030f 	and.w	r3, r3, #15
 80092c6:	3301      	adds	r3, #1
 80092c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d10c      	bne.n	80092ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092d0:	4a1a      	ldr	r2, [pc, #104]	; (800933c <HAL_RCC_GetSysClockFreq+0xc0>)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092d8:	4a16      	ldr	r2, [pc, #88]	; (8009334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092da:	68d2      	ldr	r2, [r2, #12]
 80092dc:	0a12      	lsrs	r2, r2, #8
 80092de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80092e2:	fb02 f303 	mul.w	r3, r2, r3
 80092e6:	617b      	str	r3, [r7, #20]
      break;
 80092e8:	e00c      	b.n	8009304 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092ea:	4a13      	ldr	r2, [pc, #76]	; (8009338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	4a10      	ldr	r2, [pc, #64]	; (8009334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092f4:	68d2      	ldr	r2, [r2, #12]
 80092f6:	0a12      	lsrs	r2, r2, #8
 80092f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80092fc:	fb02 f303 	mul.w	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]
      break;
 8009302:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009304:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	0e5b      	lsrs	r3, r3, #25
 800930a:	f003 0303 	and.w	r3, r3, #3
 800930e:	3301      	adds	r3, #1
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	fbb2 f3f3 	udiv	r3, r2, r3
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	e001      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009320:	2300      	movs	r3, #0
 8009322:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009324:	693b      	ldr	r3, [r7, #16]
}
 8009326:	4618      	mov	r0, r3
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	40021000 	.word	0x40021000
 8009338:	00f42400 	.word	0x00f42400
 800933c:	007a1200 	.word	0x007a1200

08009340 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009346:	4b1e      	ldr	r3, [pc, #120]	; (80093c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009350:	4b1b      	ldr	r3, [pc, #108]	; (80093c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	091b      	lsrs	r3, r3, #4
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	3301      	adds	r3, #1
 800935c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d10c      	bne.n	800937e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009364:	4a17      	ldr	r2, [pc, #92]	; (80093c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	fbb2 f3f3 	udiv	r3, r2, r3
 800936c:	4a14      	ldr	r2, [pc, #80]	; (80093c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800936e:	68d2      	ldr	r2, [r2, #12]
 8009370:	0a12      	lsrs	r2, r2, #8
 8009372:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009376:	fb02 f303 	mul.w	r3, r2, r3
 800937a:	617b      	str	r3, [r7, #20]
    break;
 800937c:	e00c      	b.n	8009398 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800937e:	4a12      	ldr	r2, [pc, #72]	; (80093c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	fbb2 f3f3 	udiv	r3, r2, r3
 8009386:	4a0e      	ldr	r2, [pc, #56]	; (80093c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009388:	68d2      	ldr	r2, [r2, #12]
 800938a:	0a12      	lsrs	r2, r2, #8
 800938c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009390:	fb02 f303 	mul.w	r3, r2, r3
 8009394:	617b      	str	r3, [r7, #20]
    break;
 8009396:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009398:	4b09      	ldr	r3, [pc, #36]	; (80093c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	0e5b      	lsrs	r3, r3, #25
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	3301      	adds	r3, #1
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80093b2:	687b      	ldr	r3, [r7, #4]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	371c      	adds	r7, #28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	40021000 	.word	0x40021000
 80093c4:	007a1200 	.word	0x007a1200
 80093c8:	00f42400 	.word	0x00f42400

080093cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093d4:	2300      	movs	r3, #0
 80093d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093d8:	2300      	movs	r3, #0
 80093da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8098 	beq.w	800951a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093ea:	2300      	movs	r3, #0
 80093ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093ee:	4b43      	ldr	r3, [pc, #268]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10d      	bne.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093fa:	4b40      	ldr	r3, [pc, #256]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093fe:	4a3f      	ldr	r2, [pc, #252]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009404:	6593      	str	r3, [r2, #88]	; 0x58
 8009406:	4b3d      	ldr	r3, [pc, #244]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800940e:	60bb      	str	r3, [r7, #8]
 8009410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009412:	2301      	movs	r3, #1
 8009414:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009416:	4b3a      	ldr	r3, [pc, #232]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a39      	ldr	r2, [pc, #228]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800941c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009420:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009422:	f7fa fd7d 	bl	8003f20 <HAL_GetTick>
 8009426:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009428:	e009      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800942a:	f7fa fd79 	bl	8003f20 <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d902      	bls.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	74fb      	strb	r3, [r7, #19]
        break;
 800943c:	e005      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800943e:	4b30      	ldr	r3, [pc, #192]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0ef      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800944a:	7cfb      	ldrb	r3, [r7, #19]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d159      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009450:	4b2a      	ldr	r3, [pc, #168]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800945a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d01e      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	429a      	cmp	r2, r3
 800946a:	d019      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800946c:	4b23      	ldr	r3, [pc, #140]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800946e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009478:	4b20      	ldr	r3, [pc, #128]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800947e:	4a1f      	ldr	r2, [pc, #124]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009488:	4b1c      	ldr	r3, [pc, #112]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800948a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948e:	4a1b      	ldr	r2, [pc, #108]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009498:	4a18      	ldr	r2, [pc, #96]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d016      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094aa:	f7fa fd39 	bl	8003f20 <HAL_GetTick>
 80094ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094b0:	e00b      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094b2:	f7fa fd35 	bl	8003f20 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d902      	bls.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	74fb      	strb	r3, [r7, #19]
            break;
 80094c8:	e006      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094ca:	4b0c      	ldr	r3, [pc, #48]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0ec      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80094d8:	7cfb      	ldrb	r3, [r7, #19]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10b      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094de:	4b07      	ldr	r3, [pc, #28]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ec:	4903      	ldr	r1, [pc, #12]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80094f4:	e008      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094f6:	7cfb      	ldrb	r3, [r7, #19]
 80094f8:	74bb      	strb	r3, [r7, #18]
 80094fa:	e005      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80094fc:	40021000 	.word	0x40021000
 8009500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009504:	7cfb      	ldrb	r3, [r7, #19]
 8009506:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009508:	7c7b      	ldrb	r3, [r7, #17]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d105      	bne.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800950e:	4ba7      	ldr	r3, [pc, #668]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009512:	4aa6      	ldr	r2, [pc, #664]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009518:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009526:	4ba1      	ldr	r3, [pc, #644]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952c:	f023 0203 	bic.w	r2, r3, #3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	499d      	ldr	r1, [pc, #628]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009536:	4313      	orrs	r3, r2
 8009538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00a      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009548:	4b98      	ldr	r3, [pc, #608]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954e:	f023 020c 	bic.w	r2, r3, #12
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	4995      	ldr	r1, [pc, #596]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009558:	4313      	orrs	r3, r2
 800955a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800956a:	4b90      	ldr	r3, [pc, #576]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009570:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	498c      	ldr	r1, [pc, #560]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957a:	4313      	orrs	r3, r2
 800957c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0308 	and.w	r3, r3, #8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00a      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800958c:	4b87      	ldr	r3, [pc, #540]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009592:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	4984      	ldr	r1, [pc, #528]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800959c:	4313      	orrs	r3, r2
 800959e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 0310 	and.w	r3, r3, #16
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00a      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80095ae:	4b7f      	ldr	r3, [pc, #508]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	497b      	ldr	r1, [pc, #492]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00a      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095d0:	4b76      	ldr	r3, [pc, #472]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	4973      	ldr	r1, [pc, #460]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00a      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095f2:	4b6e      	ldr	r3, [pc, #440]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	496a      	ldr	r1, [pc, #424]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009602:	4313      	orrs	r3, r2
 8009604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00a      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009614:	4b65      	ldr	r3, [pc, #404]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800961a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	4962      	ldr	r1, [pc, #392]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009624:	4313      	orrs	r3, r2
 8009626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009636:	4b5d      	ldr	r3, [pc, #372]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800963c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	4959      	ldr	r1, [pc, #356]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009646:	4313      	orrs	r3, r2
 8009648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009658:	4b54      	ldr	r3, [pc, #336]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800965e:	f023 0203 	bic.w	r2, r3, #3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	4951      	ldr	r1, [pc, #324]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009668:	4313      	orrs	r3, r2
 800966a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800967a:	4b4c      	ldr	r3, [pc, #304]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	4948      	ldr	r1, [pc, #288]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800968a:	4313      	orrs	r3, r2
 800968c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009698:	2b00      	cmp	r3, #0
 800969a:	d015      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800969c:	4b43      	ldr	r3, [pc, #268]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800969e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096aa:	4940      	ldr	r1, [pc, #256]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ba:	d105      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096bc:	4b3b      	ldr	r3, [pc, #236]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	4a3a      	ldr	r2, [pc, #232]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d015      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80096d4:	4b35      	ldr	r3, [pc, #212]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e2:	4932      	ldr	r1, [pc, #200]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096f2:	d105      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096f4:	4b2d      	ldr	r3, [pc, #180]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	4a2c      	ldr	r2, [pc, #176]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d015      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800970c:	4b27      	ldr	r3, [pc, #156]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800970e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009712:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	4924      	ldr	r1, [pc, #144]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800971c:	4313      	orrs	r3, r2
 800971e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800972a:	d105      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800972c:	4b1f      	ldr	r3, [pc, #124]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	4a1e      	ldr	r2, [pc, #120]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009736:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d015      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009744:	4b19      	ldr	r3, [pc, #100]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800974a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009752:	4916      	ldr	r1, [pc, #88]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009754:	4313      	orrs	r3, r2
 8009756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009762:	d105      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009764:	4b11      	ldr	r3, [pc, #68]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	4a10      	ldr	r2, [pc, #64]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800976a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800976e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d019      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	4908      	ldr	r1, [pc, #32]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800978c:	4313      	orrs	r3, r2
 800978e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800979a:	d109      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800979c:	4b03      	ldr	r3, [pc, #12]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	4a02      	ldr	r2, [pc, #8]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097a6:	60d3      	str	r3, [r2, #12]
 80097a8:	e002      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80097aa:	bf00      	nop
 80097ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d015      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80097bc:	4b29      	ldr	r3, [pc, #164]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	4926      	ldr	r1, [pc, #152]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097da:	d105      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80097dc:	4b21      	ldr	r3, [pc, #132]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	4a20      	ldr	r2, [pc, #128]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d015      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80097f4:	4b1b      	ldr	r3, [pc, #108]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009802:	4918      	ldr	r1, [pc, #96]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009804:	4313      	orrs	r3, r2
 8009806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800980e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009812:	d105      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009814:	4b13      	ldr	r3, [pc, #76]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	4a12      	ldr	r2, [pc, #72]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800981a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800981e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d015      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800982c:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800982e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983a:	490a      	ldr	r1, [pc, #40]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800983c:	4313      	orrs	r3, r2
 800983e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800984a:	d105      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800984c:	4b05      	ldr	r3, [pc, #20]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	4a04      	ldr	r2, [pc, #16]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009856:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009858:	7cbb      	ldrb	r3, [r7, #18]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	40021000 	.word	0x40021000

08009868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e049      	b.n	800990e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7f9 fc94 	bl	80031bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f000 fb76 	bl	8009f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b01      	cmp	r3, #1
 800992a:	d001      	beq.n	8009930 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e04c      	b.n	80099ca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a26      	ldr	r2, [pc, #152]	; (80099d8 <HAL_TIM_Base_Start+0xc0>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d022      	beq.n	8009988 <HAL_TIM_Base_Start+0x70>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994a:	d01d      	beq.n	8009988 <HAL_TIM_Base_Start+0x70>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a22      	ldr	r2, [pc, #136]	; (80099dc <HAL_TIM_Base_Start+0xc4>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d018      	beq.n	8009988 <HAL_TIM_Base_Start+0x70>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a21      	ldr	r2, [pc, #132]	; (80099e0 <HAL_TIM_Base_Start+0xc8>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d013      	beq.n	8009988 <HAL_TIM_Base_Start+0x70>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a1f      	ldr	r2, [pc, #124]	; (80099e4 <HAL_TIM_Base_Start+0xcc>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00e      	beq.n	8009988 <HAL_TIM_Base_Start+0x70>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a1e      	ldr	r2, [pc, #120]	; (80099e8 <HAL_TIM_Base_Start+0xd0>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d009      	beq.n	8009988 <HAL_TIM_Base_Start+0x70>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a1c      	ldr	r2, [pc, #112]	; (80099ec <HAL_TIM_Base_Start+0xd4>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d004      	beq.n	8009988 <HAL_TIM_Base_Start+0x70>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a1b      	ldr	r2, [pc, #108]	; (80099f0 <HAL_TIM_Base_Start+0xd8>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d115      	bne.n	80099b4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	4b19      	ldr	r3, [pc, #100]	; (80099f4 <HAL_TIM_Base_Start+0xdc>)
 8009990:	4013      	ands	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b06      	cmp	r3, #6
 8009998:	d015      	beq.n	80099c6 <HAL_TIM_Base_Start+0xae>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099a0:	d011      	beq.n	80099c6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f042 0201 	orr.w	r2, r2, #1
 80099b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099b2:	e008      	b.n	80099c6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f042 0201 	orr.w	r2, r2, #1
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	e000      	b.n	80099c8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	40012c00 	.word	0x40012c00
 80099dc:	40000400 	.word	0x40000400
 80099e0:	40000800 	.word	0x40000800
 80099e4:	40000c00 	.word	0x40000c00
 80099e8:	40013400 	.word	0x40013400
 80099ec:	40014000 	.word	0x40014000
 80099f0:	40015000 	.word	0x40015000
 80099f4:	00010007 	.word	0x00010007

080099f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d020      	beq.n	8009a5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f003 0302 	and.w	r3, r3, #2
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01b      	beq.n	8009a5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f06f 0202 	mvn.w	r2, #2
 8009a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa8a 	bl	8009f5c <HAL_TIM_IC_CaptureCallback>
 8009a48:	e005      	b.n	8009a56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa7c 	bl	8009f48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fa8d 	bl	8009f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d020      	beq.n	8009aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d01b      	beq.n	8009aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f06f 0204 	mvn.w	r2, #4
 8009a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa64 	bl	8009f5c <HAL_TIM_IC_CaptureCallback>
 8009a94:	e005      	b.n	8009aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa56 	bl	8009f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fa67 	bl	8009f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f003 0308 	and.w	r3, r3, #8
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d020      	beq.n	8009af4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f003 0308 	and.w	r3, r3, #8
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01b      	beq.n	8009af4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f06f 0208 	mvn.w	r2, #8
 8009ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2204      	movs	r2, #4
 8009aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa3e 	bl	8009f5c <HAL_TIM_IC_CaptureCallback>
 8009ae0:	e005      	b.n	8009aee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fa30 	bl	8009f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fa41 	bl	8009f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 0310 	and.w	r3, r3, #16
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d020      	beq.n	8009b40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f003 0310 	and.w	r3, r3, #16
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d01b      	beq.n	8009b40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f06f 0210 	mvn.w	r2, #16
 8009b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2208      	movs	r2, #8
 8009b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa18 	bl	8009f5c <HAL_TIM_IC_CaptureCallback>
 8009b2c:	e005      	b.n	8009b3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa0a 	bl	8009f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fa1b 	bl	8009f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00c      	beq.n	8009b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d007      	beq.n	8009b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f06f 0201 	mvn.w	r2, #1
 8009b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f9e8 	bl	8009f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d104      	bne.n	8009b78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00c      	beq.n	8009b92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d007      	beq.n	8009b92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8009b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fcc9 	bl	800a524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00c      	beq.n	8009bb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d007      	beq.n	8009bb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fcc1 	bl	800a538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00c      	beq.n	8009bda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f9d5 	bl	8009f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00c      	beq.n	8009bfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f06f 0220 	mvn.w	r2, #32
 8009bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fc89 	bl	800a510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00c      	beq.n	8009c22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d007      	beq.n	8009c22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fc95 	bl	800a54c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00c      	beq.n	8009c46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d007      	beq.n	8009c46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fc8d 	bl	800a560 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00c      	beq.n	8009c6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fc85 	bl	800a574 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00c      	beq.n	8009c8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fc7d 	bl	800a588 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d101      	bne.n	8009cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e0ee      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x1fa>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a6b      	ldr	r2, [pc, #428]	; (8009e9c <HAL_TIM_ConfigClockSource+0x204>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	f000 80b9 	beq.w	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009cf4:	4a69      	ldr	r2, [pc, #420]	; (8009e9c <HAL_TIM_ConfigClockSource+0x204>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	f200 80be 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009cfc:	4a68      	ldr	r2, [pc, #416]	; (8009ea0 <HAL_TIM_ConfigClockSource+0x208>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	f000 80b1 	beq.w	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009d04:	4a66      	ldr	r2, [pc, #408]	; (8009ea0 <HAL_TIM_ConfigClockSource+0x208>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	f200 80b6 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d0c:	4a65      	ldr	r2, [pc, #404]	; (8009ea4 <HAL_TIM_ConfigClockSource+0x20c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	f000 80a9 	beq.w	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009d14:	4a63      	ldr	r2, [pc, #396]	; (8009ea4 <HAL_TIM_ConfigClockSource+0x20c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	f200 80ae 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d1c:	4a62      	ldr	r2, [pc, #392]	; (8009ea8 <HAL_TIM_ConfigClockSource+0x210>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	f000 80a1 	beq.w	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009d24:	4a60      	ldr	r2, [pc, #384]	; (8009ea8 <HAL_TIM_ConfigClockSource+0x210>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	f200 80a6 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d2c:	4a5f      	ldr	r2, [pc, #380]	; (8009eac <HAL_TIM_ConfigClockSource+0x214>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	f000 8099 	beq.w	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009d34:	4a5d      	ldr	r2, [pc, #372]	; (8009eac <HAL_TIM_ConfigClockSource+0x214>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	f200 809e 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d40:	f000 8091 	beq.w	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009d44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d48:	f200 8096 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d50:	f000 8089 	beq.w	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d58:	f200 808e 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d60:	d03e      	beq.n	8009de0 <HAL_TIM_ConfigClockSource+0x148>
 8009d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d66:	f200 8087 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6e:	f000 8086 	beq.w	8009e7e <HAL_TIM_ConfigClockSource+0x1e6>
 8009d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d76:	d87f      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d78:	2b70      	cmp	r3, #112	; 0x70
 8009d7a:	d01a      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0x11a>
 8009d7c:	2b70      	cmp	r3, #112	; 0x70
 8009d7e:	d87b      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d80:	2b60      	cmp	r3, #96	; 0x60
 8009d82:	d050      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0x18e>
 8009d84:	2b60      	cmp	r3, #96	; 0x60
 8009d86:	d877      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d88:	2b50      	cmp	r3, #80	; 0x50
 8009d8a:	d03c      	beq.n	8009e06 <HAL_TIM_ConfigClockSource+0x16e>
 8009d8c:	2b50      	cmp	r3, #80	; 0x50
 8009d8e:	d873      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d90:	2b40      	cmp	r3, #64	; 0x40
 8009d92:	d058      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0x1ae>
 8009d94:	2b40      	cmp	r3, #64	; 0x40
 8009d96:	d86f      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009d98:	2b30      	cmp	r3, #48	; 0x30
 8009d9a:	d064      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009d9c:	2b30      	cmp	r3, #48	; 0x30
 8009d9e:	d86b      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d060      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d867      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d05c      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009dac:	2b10      	cmp	r3, #16
 8009dae:	d05a      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009db0:	e062      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dc2:	f000 faef 	bl	800a3a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	609a      	str	r2, [r3, #8]
      break;
 8009dde:	e04f      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009df0:	f000 fad8 	bl	800a3a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e02:	609a      	str	r2, [r3, #8]
      break;
 8009e04:	e03c      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e12:	461a      	mov	r2, r3
 8009e14:	f000 fa4a 	bl	800a2ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2150      	movs	r1, #80	; 0x50
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 faa3 	bl	800a36a <TIM_ITRx_SetConfig>
      break;
 8009e24:	e02c      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e32:	461a      	mov	r2, r3
 8009e34:	f000 fa69 	bl	800a30a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2160      	movs	r1, #96	; 0x60
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fa93 	bl	800a36a <TIM_ITRx_SetConfig>
      break;
 8009e44:	e01c      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e52:	461a      	mov	r2, r3
 8009e54:	f000 fa2a 	bl	800a2ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2140      	movs	r1, #64	; 0x40
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fa83 	bl	800a36a <TIM_ITRx_SetConfig>
      break;
 8009e64:	e00c      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4610      	mov	r0, r2
 8009e72:	f000 fa7a 	bl	800a36a <TIM_ITRx_SetConfig>
      break;
 8009e76:	e003      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e7c:	e000      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8009e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	00100070 	.word	0x00100070
 8009ea0:	00100050 	.word	0x00100050
 8009ea4:	00100040 	.word	0x00100040
 8009ea8:	00100030 	.word	0x00100030
 8009eac:	00100020 	.word	0x00100020

08009eb0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d101      	bne.n	8009ec8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	e031      	b.n	8009f2c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f910 	bl	800a100 <TIM_SlaveTimer_SetConfig>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d009      	beq.n	8009efa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e018      	b.n	8009f2c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68da      	ldr	r2, [r3, #12]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f08:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f18:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a4c      	ldr	r2, [pc, #304]	; (800a0dc <TIM_Base_SetConfig+0x144>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d017      	beq.n	8009fe0 <TIM_Base_SetConfig+0x48>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb6:	d013      	beq.n	8009fe0 <TIM_Base_SetConfig+0x48>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a49      	ldr	r2, [pc, #292]	; (800a0e0 <TIM_Base_SetConfig+0x148>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d00f      	beq.n	8009fe0 <TIM_Base_SetConfig+0x48>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a48      	ldr	r2, [pc, #288]	; (800a0e4 <TIM_Base_SetConfig+0x14c>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d00b      	beq.n	8009fe0 <TIM_Base_SetConfig+0x48>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a47      	ldr	r2, [pc, #284]	; (800a0e8 <TIM_Base_SetConfig+0x150>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d007      	beq.n	8009fe0 <TIM_Base_SetConfig+0x48>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a46      	ldr	r2, [pc, #280]	; (800a0ec <TIM_Base_SetConfig+0x154>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d003      	beq.n	8009fe0 <TIM_Base_SetConfig+0x48>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a45      	ldr	r2, [pc, #276]	; (800a0f0 <TIM_Base_SetConfig+0x158>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d108      	bne.n	8009ff2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a39      	ldr	r2, [pc, #228]	; (800a0dc <TIM_Base_SetConfig+0x144>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d023      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a000:	d01f      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a36      	ldr	r2, [pc, #216]	; (800a0e0 <TIM_Base_SetConfig+0x148>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d01b      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a35      	ldr	r2, [pc, #212]	; (800a0e4 <TIM_Base_SetConfig+0x14c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d017      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a34      	ldr	r2, [pc, #208]	; (800a0e8 <TIM_Base_SetConfig+0x150>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d013      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a33      	ldr	r2, [pc, #204]	; (800a0ec <TIM_Base_SetConfig+0x154>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00f      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a33      	ldr	r2, [pc, #204]	; (800a0f4 <TIM_Base_SetConfig+0x15c>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00b      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a32      	ldr	r2, [pc, #200]	; (800a0f8 <TIM_Base_SetConfig+0x160>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d007      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a31      	ldr	r2, [pc, #196]	; (800a0fc <TIM_Base_SetConfig+0x164>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d003      	beq.n	800a042 <TIM_Base_SetConfig+0xaa>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a2c      	ldr	r2, [pc, #176]	; (800a0f0 <TIM_Base_SetConfig+0x158>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d108      	bne.n	800a054 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4313      	orrs	r3, r2
 800a052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a18      	ldr	r2, [pc, #96]	; (800a0dc <TIM_Base_SetConfig+0x144>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d013      	beq.n	800a0a8 <TIM_Base_SetConfig+0x110>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a1a      	ldr	r2, [pc, #104]	; (800a0ec <TIM_Base_SetConfig+0x154>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d00f      	beq.n	800a0a8 <TIM_Base_SetConfig+0x110>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a1a      	ldr	r2, [pc, #104]	; (800a0f4 <TIM_Base_SetConfig+0x15c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d00b      	beq.n	800a0a8 <TIM_Base_SetConfig+0x110>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a19      	ldr	r2, [pc, #100]	; (800a0f8 <TIM_Base_SetConfig+0x160>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d007      	beq.n	800a0a8 <TIM_Base_SetConfig+0x110>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a18      	ldr	r2, [pc, #96]	; (800a0fc <TIM_Base_SetConfig+0x164>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d003      	beq.n	800a0a8 <TIM_Base_SetConfig+0x110>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a13      	ldr	r2, [pc, #76]	; (800a0f0 <TIM_Base_SetConfig+0x158>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d103      	bne.n	800a0b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d105      	bne.n	800a0ce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	f023 0201 	bic.w	r2, r3, #1
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	611a      	str	r2, [r3, #16]
  }
}
 800a0ce:	bf00      	nop
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	40012c00 	.word	0x40012c00
 800a0e0:	40000400 	.word	0x40000400
 800a0e4:	40000800 	.word	0x40000800
 800a0e8:	40000c00 	.word	0x40000c00
 800a0ec:	40013400 	.word	0x40013400
 800a0f0:	40015000 	.word	0x40015000
 800a0f4:	40014000 	.word	0x40014000
 800a0f8:	40014400 	.word	0x40014400
 800a0fc:	40014800 	.word	0x40014800

0800a100 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a11c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a120:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	4313      	orrs	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a132:	f023 0307 	bic.w	r3, r3, #7
 800a136:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	4313      	orrs	r3, r2
 800a140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	4a52      	ldr	r2, [pc, #328]	; (800a298 <TIM_SlaveTimer_SetConfig+0x198>)
 800a150:	4293      	cmp	r3, r2
 800a152:	f000 809a 	beq.w	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a156:	4a50      	ldr	r2, [pc, #320]	; (800a298 <TIM_SlaveTimer_SetConfig+0x198>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	f200 8093 	bhi.w	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a15e:	4a4f      	ldr	r2, [pc, #316]	; (800a29c <TIM_SlaveTimer_SetConfig+0x19c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	f000 8092 	beq.w	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a166:	4a4d      	ldr	r2, [pc, #308]	; (800a29c <TIM_SlaveTimer_SetConfig+0x19c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	f200 808b 	bhi.w	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a16e:	4a4c      	ldr	r2, [pc, #304]	; (800a2a0 <TIM_SlaveTimer_SetConfig+0x1a0>)
 800a170:	4293      	cmp	r3, r2
 800a172:	f000 808a 	beq.w	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a176:	4a4a      	ldr	r2, [pc, #296]	; (800a2a0 <TIM_SlaveTimer_SetConfig+0x1a0>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	f200 8083 	bhi.w	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a17e:	4a49      	ldr	r2, [pc, #292]	; (800a2a4 <TIM_SlaveTimer_SetConfig+0x1a4>)
 800a180:	4293      	cmp	r3, r2
 800a182:	f000 8082 	beq.w	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a186:	4a47      	ldr	r2, [pc, #284]	; (800a2a4 <TIM_SlaveTimer_SetConfig+0x1a4>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d87b      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a18c:	4a46      	ldr	r2, [pc, #280]	; (800a2a8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d07b      	beq.n	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a192:	4a45      	ldr	r2, [pc, #276]	; (800a2a8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d875      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a198:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a19c:	d075      	beq.n	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a19e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a1a2:	d86f      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a1a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1a8:	d06f      	beq.n	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a1aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ae:	d869      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a1b0:	2b70      	cmp	r3, #112	; 0x70
 800a1b2:	d01a      	beq.n	800a1ea <TIM_SlaveTimer_SetConfig+0xea>
 800a1b4:	2b70      	cmp	r3, #112	; 0x70
 800a1b6:	d865      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a1b8:	2b60      	cmp	r3, #96	; 0x60
 800a1ba:	d059      	beq.n	800a270 <TIM_SlaveTimer_SetConfig+0x170>
 800a1bc:	2b60      	cmp	r3, #96	; 0x60
 800a1be:	d861      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a1c0:	2b50      	cmp	r3, #80	; 0x50
 800a1c2:	d04b      	beq.n	800a25c <TIM_SlaveTimer_SetConfig+0x15c>
 800a1c4:	2b50      	cmp	r3, #80	; 0x50
 800a1c6:	d85d      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a1c8:	2b40      	cmp	r3, #64	; 0x40
 800a1ca:	d019      	beq.n	800a200 <TIM_SlaveTimer_SetConfig+0x100>
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	d859      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a1d0:	2b30      	cmp	r3, #48	; 0x30
 800a1d2:	d05a      	beq.n	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a1d4:	2b30      	cmp	r3, #48	; 0x30
 800a1d6:	d855      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a1d8:	2b20      	cmp	r3, #32
 800a1da:	d056      	beq.n	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a1dc:	2b20      	cmp	r3, #32
 800a1de:	d851      	bhi.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d052      	beq.n	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a1e4:	2b10      	cmp	r3, #16
 800a1e6:	d050      	beq.n	800a28a <TIM_SlaveTimer_SetConfig+0x18a>
 800a1e8:	e04c      	b.n	800a284 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a1fa:	f000 f8d3 	bl	800a3a4 <TIM_ETR_SetConfig>
      break;
 800a1fe:	e045      	b.n	800a28c <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b05      	cmp	r3, #5
 800a206:	d004      	beq.n	800a212 <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a20c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800a210:	d101      	bne.n	800a216 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e03b      	b.n	800a28e <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6a1a      	ldr	r2, [r3, #32]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0201 	bic.w	r2, r2, #1
 800a22c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a23c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	011b      	lsls	r3, r3, #4
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	4313      	orrs	r3, r2
 800a248:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	621a      	str	r2, [r3, #32]
      break;
 800a25a:	e017      	b.n	800a28c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a268:	461a      	mov	r2, r3
 800a26a:	f000 f81f 	bl	800a2ac <TIM_TI1_ConfigInputStage>
      break;
 800a26e:	e00d      	b.n	800a28c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a27c:	461a      	mov	r2, r3
 800a27e:	f000 f844 	bl	800a30a <TIM_TI2_ConfigInputStage>
      break;
 800a282:	e003      	b.n	800a28c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	75fb      	strb	r3, [r7, #23]
      break;
 800a288:	e000      	b.n	800a28c <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 800a28a:	bf00      	nop
  }

  return status;
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	00100070 	.word	0x00100070
 800a29c:	00100050 	.word	0x00100050
 800a2a0:	00100040 	.word	0x00100040
 800a2a4:	00100030 	.word	0x00100030
 800a2a8:	00100020 	.word	0x00100020

0800a2ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	f023 0201 	bic.w	r2, r3, #1
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	011b      	lsls	r3, r3, #4
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f023 030a 	bic.w	r3, r3, #10
 800a2e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2ea:	697a      	ldr	r2, [r7, #20]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	621a      	str	r2, [r3, #32]
}
 800a2fe:	bf00      	nop
 800a300:	371c      	adds	r7, #28
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b087      	sub	sp, #28
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	f023 0210 	bic.w	r2, r3, #16
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	031b      	lsls	r3, r3, #12
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a346:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	011b      	lsls	r3, r3, #4
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	4313      	orrs	r3, r2
 800a350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	621a      	str	r2, [r3, #32]
}
 800a35e:	bf00      	nop
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	f043 0307 	orr.w	r3, r3, #7
 800a390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	609a      	str	r2, [r3, #8]
}
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	021a      	lsls	r2, r3, #8
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	609a      	str	r2, [r3, #8]
}
 800a3d8:	bf00      	nop
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d101      	bne.n	800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e074      	b.n	800a4e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a34      	ldr	r2, [pc, #208]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d009      	beq.n	800a43a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a33      	ldr	r2, [pc, #204]	; (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d004      	beq.n	800a43a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a31      	ldr	r2, [pc, #196]	; (800a4fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d108      	bne.n	800a44c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a440:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4313      	orrs	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a21      	ldr	r2, [pc, #132]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d022      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a47c:	d01d      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1f      	ldr	r2, [pc, #124]	; (800a500 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d018      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a1d      	ldr	r2, [pc, #116]	; (800a504 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d013      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a1c      	ldr	r2, [pc, #112]	; (800a508 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00e      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a15      	ldr	r2, [pc, #84]	; (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d009      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a18      	ldr	r2, [pc, #96]	; (800a50c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d004      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a11      	ldr	r2, [pc, #68]	; (800a4fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d10c      	bne.n	800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	40012c00 	.word	0x40012c00
 800a4f8:	40013400 	.word	0x40013400
 800a4fc:	40015000 	.word	0x40015000
 800a500:	40000400 	.word	0x40000400
 800a504:	40000800 	.word	0x40000800
 800a508:	40000c00 	.word	0x40000c00
 800a50c:	40014000 	.word	0x40014000

0800a510 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b08b      	sub	sp, #44	; 0x2c
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	fa93 f3a3 	rbit	r3, r3
 800a5b6:	613b      	str	r3, [r7, #16]
  return result;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a5c2:	2320      	movs	r3, #32
 800a5c4:	e003      	b.n	800a5ce <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	fab3 f383 	clz	r3, r3
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	2103      	movs	r1, #3
 800a5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d6:	43db      	mvns	r3, r3
 800a5d8:	401a      	ands	r2, r3
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	fa93 f3a3 	rbit	r3, r3
 800a5e4:	61fb      	str	r3, [r7, #28]
  return result;
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	e003      	b.n	800a5fc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	fab3 f383 	clz	r3, r3
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	6879      	ldr	r1, [r7, #4]
 800a600:	fa01 f303 	lsl.w	r3, r1, r3
 800a604:	431a      	orrs	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]
}
 800a60a:	bf00      	nop
 800a60c:	372c      	adds	r7, #44	; 0x2c
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	43db      	mvns	r3, r3
 800a62a:	401a      	ands	r2, r3
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	fb01 f303 	mul.w	r3, r1, r3
 800a634:	431a      	orrs	r2, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	605a      	str	r2, [r3, #4]
}
 800a63a:	bf00      	nop
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a646:	b480      	push	{r7}
 800a648:	b08b      	sub	sp, #44	; 0x2c
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	60f8      	str	r0, [r7, #12]
 800a64e:	60b9      	str	r1, [r7, #8]
 800a650:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	689a      	ldr	r2, [r3, #8]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	fa93 f3a3 	rbit	r3, r3
 800a660:	613b      	str	r3, [r7, #16]
  return result;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a66c:	2320      	movs	r3, #32
 800a66e:	e003      	b.n	800a678 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	fab3 f383 	clz	r3, r3
 800a676:	b2db      	uxtb	r3, r3
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	2103      	movs	r1, #3
 800a67c:	fa01 f303 	lsl.w	r3, r1, r3
 800a680:	43db      	mvns	r3, r3
 800a682:	401a      	ands	r2, r3
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	fa93 f3a3 	rbit	r3, r3
 800a68e:	61fb      	str	r3, [r7, #28]
  return result;
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a69a:	2320      	movs	r3, #32
 800a69c:	e003      	b.n	800a6a6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	fab3 f383 	clz	r3, r3
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a6b4:	bf00      	nop
 800a6b6:	372c      	adds	r7, #44	; 0x2c
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b08b      	sub	sp, #44	; 0x2c
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	68da      	ldr	r2, [r3, #12]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	fa93 f3a3 	rbit	r3, r3
 800a6da:	613b      	str	r3, [r7, #16]
  return result;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a6e6:	2320      	movs	r3, #32
 800a6e8:	e003      	b.n	800a6f2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	fab3 f383 	clz	r3, r3
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	2103      	movs	r1, #3
 800a6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fa:	43db      	mvns	r3, r3
 800a6fc:	401a      	ands	r2, r3
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	fa93 f3a3 	rbit	r3, r3
 800a708:	61fb      	str	r3, [r7, #28]
  return result;
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a714:	2320      	movs	r3, #32
 800a716:	e003      	b.n	800a720 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	fab3 f383 	clz	r3, r3
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	fa01 f303 	lsl.w	r3, r1, r3
 800a728:	431a      	orrs	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	60da      	str	r2, [r3, #12]
}
 800a72e:	bf00      	nop
 800a730:	372c      	adds	r7, #44	; 0x2c
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b08b      	sub	sp, #44	; 0x2c
 800a73e:	af00      	add	r7, sp, #0
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a1a      	ldr	r2, [r3, #32]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	fa93 f3a3 	rbit	r3, r3
 800a754:	613b      	str	r3, [r7, #16]
  return result;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a760:	2320      	movs	r3, #32
 800a762:	e003      	b.n	800a76c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	fab3 f383 	clz	r3, r3
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	210f      	movs	r1, #15
 800a770:	fa01 f303 	lsl.w	r3, r1, r3
 800a774:	43db      	mvns	r3, r3
 800a776:	401a      	ands	r2, r3
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a77c:	6a3b      	ldr	r3, [r7, #32]
 800a77e:	fa93 f3a3 	rbit	r3, r3
 800a782:	61fb      	str	r3, [r7, #28]
  return result;
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a78e:	2320      	movs	r3, #32
 800a790:	e003      	b.n	800a79a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	fab3 f383 	clz	r3, r3
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a7a8:	bf00      	nop
 800a7aa:	372c      	adds	r7, #44	; 0x2c
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b08b      	sub	sp, #44	; 0x2c
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	0a1b      	lsrs	r3, r3, #8
 800a7c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	fa93 f3a3 	rbit	r3, r3
 800a7d0:	613b      	str	r3, [r7, #16]
  return result;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a7dc:	2320      	movs	r3, #32
 800a7de:	e003      	b.n	800a7e8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	fab3 f383 	clz	r3, r3
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	210f      	movs	r1, #15
 800a7ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	401a      	ands	r2, r3
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	0a1b      	lsrs	r3, r3, #8
 800a7f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	fa93 f3a3 	rbit	r3, r3
 800a800:	61fb      	str	r3, [r7, #28]
  return result;
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a80c:	2320      	movs	r3, #32
 800a80e:	e003      	b.n	800a818 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	fab3 f383 	clz	r3, r3
 800a816:	b2db      	uxtb	r3, r3
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	6879      	ldr	r1, [r7, #4]
 800a81c:	fa01 f303 	lsl.w	r3, r1, r3
 800a820:	431a      	orrs	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a826:	bf00      	nop
 800a828:	372c      	adds	r7, #44	; 0x2c
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b088      	sub	sp, #32
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	fa93 f3a3 	rbit	r3, r3
 800a848:	60fb      	str	r3, [r7, #12]
  return result;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <LL_GPIO_Init+0x26>
    return 32U;
 800a854:	2320      	movs	r3, #32
 800a856:	e003      	b.n	800a860 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	fab3 f383 	clz	r3, r3
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a862:	e048      	b.n	800a8f6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	2101      	movs	r1, #1
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	fa01 f303 	lsl.w	r3, r1, r3
 800a870:	4013      	ands	r3, r2
 800a872:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d03a      	beq.n	800a8f0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d003      	beq.n	800a88a <LL_GPIO_Init+0x58>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d10e      	bne.n	800a8a8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	461a      	mov	r2, r3
 800a890:	69b9      	ldr	r1, [r7, #24]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f7ff fed7 	bl	800a646 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	6819      	ldr	r1, [r3, #0]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff feb7 	bl	800a616 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	69b9      	ldr	r1, [r7, #24]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7ff ff05 	bl	800a6c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d111      	bne.n	800a8e2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	2bff      	cmp	r3, #255	; 0xff
 800a8c2:	d807      	bhi.n	800a8d4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	69b9      	ldr	r1, [r7, #24]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff ff34 	bl	800a73a <LL_GPIO_SetAFPin_0_7>
 800a8d2:	e006      	b.n	800a8e2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	69b9      	ldr	r1, [r7, #24]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff ff69 	bl	800a7b4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	69b9      	ldr	r1, [r7, #24]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fe56 	bl	800a59c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1af      	bne.n	800a864 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3720      	adds	r7, #32
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
	...

0800a910 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a910:	b480      	push	{r7}
 800a912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <LL_RCC_HSI_IsReady+0x24>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a91c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a920:	d101      	bne.n	800a926 <LL_RCC_HSI_IsReady+0x16>
 800a922:	2301      	movs	r3, #1
 800a924:	e000      	b.n	800a928 <LL_RCC_HSI_IsReady+0x18>
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	40021000 	.word	0x40021000

0800a938 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a938:	b480      	push	{r7}
 800a93a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a93c:	4b07      	ldr	r3, [pc, #28]	; (800a95c <LL_RCC_LSE_IsReady+0x24>)
 800a93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	2b02      	cmp	r3, #2
 800a948:	d101      	bne.n	800a94e <LL_RCC_LSE_IsReady+0x16>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <LL_RCC_LSE_IsReady+0x18>
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	40021000 	.word	0x40021000

0800a960 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a960:	b480      	push	{r7}
 800a962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a964:	4b04      	ldr	r3, [pc, #16]	; (800a978 <LL_RCC_GetSysClkSource+0x18>)
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f003 030c 	and.w	r3, r3, #12
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	40021000 	.word	0x40021000

0800a97c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a97c:	b480      	push	{r7}
 800a97e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a980:	4b04      	ldr	r3, [pc, #16]	; (800a994 <LL_RCC_GetAHBPrescaler+0x18>)
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	40021000 	.word	0x40021000

0800a998 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a998:	b480      	push	{r7}
 800a99a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a99c:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	40021000 	.word	0x40021000

0800a9b4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <LL_RCC_GetAPB2Prescaler+0x18>)
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	40021000 	.word	0x40021000

0800a9d0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a9d8:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <LL_RCC_GetUSARTClockSource+0x24>)
 800a9da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	401a      	ands	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	041b      	lsls	r3, r3, #16
 800a9e6:	4313      	orrs	r3, r2
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	40021000 	.word	0x40021000

0800a9f8 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800aa00:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <LL_RCC_GetUARTClockSource+0x24>)
 800aa02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	401a      	ands	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	041b      	lsls	r3, r3, #16
 800aa0e:	4313      	orrs	r3, r2
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	40021000 	.word	0x40021000

0800aa20 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800aa24:	4b04      	ldr	r3, [pc, #16]	; (800aa38 <LL_RCC_PLL_GetMainSource+0x18>)
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f003 0303 	and.w	r3, r3, #3
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	40021000 	.word	0x40021000

0800aa3c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800aa40:	4b04      	ldr	r3, [pc, #16]	; (800aa54 <LL_RCC_PLL_GetN+0x18>)
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	0a1b      	lsrs	r3, r3, #8
 800aa46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	40021000 	.word	0x40021000

0800aa58 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800aa5c:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <LL_RCC_PLL_GetR+0x18>)
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	40021000 	.word	0x40021000

0800aa74 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800aa74:	b480      	push	{r7}
 800aa76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800aa78:	4b04      	ldr	r3, [pc, #16]	; (800aa8c <LL_RCC_PLL_GetDivider+0x18>)
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	40021000 	.word	0x40021000

0800aa90 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d132      	bne.n	800ab08 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ff94 	bl	800a9d0 <LL_RCC_GetUSARTClockSource>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800aaae:	d016      	beq.n	800aade <LL_RCC_GetUSARTClockFreq+0x4e>
 800aab0:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800aab4:	d81c      	bhi.n	800aaf0 <LL_RCC_GetUSARTClockFreq+0x60>
 800aab6:	4a51      	ldr	r2, [pc, #324]	; (800abfc <LL_RCC_GetUSARTClockFreq+0x16c>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d003      	beq.n	800aac4 <LL_RCC_GetUSARTClockFreq+0x34>
 800aabc:	4a50      	ldr	r2, [pc, #320]	; (800ac00 <LL_RCC_GetUSARTClockFreq+0x170>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d004      	beq.n	800aacc <LL_RCC_GetUSARTClockFreq+0x3c>
 800aac2:	e015      	b.n	800aaf0 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800aac4:	f000 f92e 	bl	800ad24 <RCC_GetSystemClockFreq>
 800aac8:	60f8      	str	r0, [r7, #12]
        break;
 800aaca:	e092      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800aacc:	f7ff ff20 	bl	800a910 <LL_RCC_HSI_IsReady>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f000 8082 	beq.w	800abdc <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 800aad8:	4b4a      	ldr	r3, [pc, #296]	; (800ac04 <LL_RCC_GetUSARTClockFreq+0x174>)
 800aada:	60fb      	str	r3, [r7, #12]
        }
        break;
 800aadc:	e07e      	b.n	800abdc <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800aade:	f7ff ff2b 	bl	800a938 <LL_RCC_LSE_IsReady>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d07b      	beq.n	800abe0 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 800aae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaec:	60fb      	str	r3, [r7, #12]
        }
        break;
 800aaee:	e077      	b.n	800abe0 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800aaf0:	f000 f918 	bl	800ad24 <RCC_GetSystemClockFreq>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 f93a 	bl	800ad70 <RCC_GetHCLKClockFreq>
 800aafc:	4603      	mov	r3, r0
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 f964 	bl	800adcc <RCC_GetPCLK2ClockFreq>
 800ab04:	60f8      	str	r0, [r7, #12]
        break;
 800ab06:	e074      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b0c      	cmp	r3, #12
 800ab0c:	d131      	bne.n	800ab72 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7ff ff5e 	bl	800a9d0 <LL_RCC_GetUSARTClockSource>
 800ab14:	4603      	mov	r3, r0
 800ab16:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800ab1a:	d015      	beq.n	800ab48 <LL_RCC_GetUSARTClockFreq+0xb8>
 800ab1c:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800ab20:	d81b      	bhi.n	800ab5a <LL_RCC_GetUSARTClockFreq+0xca>
 800ab22:	4a39      	ldr	r2, [pc, #228]	; (800ac08 <LL_RCC_GetUSARTClockFreq+0x178>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d003      	beq.n	800ab30 <LL_RCC_GetUSARTClockFreq+0xa0>
 800ab28:	4a38      	ldr	r2, [pc, #224]	; (800ac0c <LL_RCC_GetUSARTClockFreq+0x17c>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d004      	beq.n	800ab38 <LL_RCC_GetUSARTClockFreq+0xa8>
 800ab2e:	e014      	b.n	800ab5a <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800ab30:	f000 f8f8 	bl	800ad24 <RCC_GetSystemClockFreq>
 800ab34:	60f8      	str	r0, [r7, #12]
        break;
 800ab36:	e05c      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800ab38:	f7ff feea 	bl	800a910 <LL_RCC_HSI_IsReady>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d050      	beq.n	800abe4 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 800ab42:	4b30      	ldr	r3, [pc, #192]	; (800ac04 <LL_RCC_GetUSARTClockFreq+0x174>)
 800ab44:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ab46:	e04d      	b.n	800abe4 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800ab48:	f7ff fef6 	bl	800a938 <LL_RCC_LSE_IsReady>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d04a      	beq.n	800abe8 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 800ab52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab56:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ab58:	e046      	b.n	800abe8 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ab5a:	f000 f8e3 	bl	800ad24 <RCC_GetSystemClockFreq>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 f905 	bl	800ad70 <RCC_GetHCLKClockFreq>
 800ab66:	4603      	mov	r3, r0
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 f919 	bl	800ada0 <RCC_GetPCLK1ClockFreq>
 800ab6e:	60f8      	str	r0, [r7, #12]
        break;
 800ab70:	e03f      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b30      	cmp	r3, #48	; 0x30
 800ab76:	d13c      	bne.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff ff29 	bl	800a9d0 <LL_RCC_GetUSARTClockSource>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800ab84:	d015      	beq.n	800abb2 <LL_RCC_GetUSARTClockFreq+0x122>
 800ab86:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800ab8a:	d81b      	bhi.n	800abc4 <LL_RCC_GetUSARTClockFreq+0x134>
 800ab8c:	4a20      	ldr	r2, [pc, #128]	; (800ac10 <LL_RCC_GetUSARTClockFreq+0x180>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d003      	beq.n	800ab9a <LL_RCC_GetUSARTClockFreq+0x10a>
 800ab92:	4a20      	ldr	r2, [pc, #128]	; (800ac14 <LL_RCC_GetUSARTClockFreq+0x184>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d004      	beq.n	800aba2 <LL_RCC_GetUSARTClockFreq+0x112>
 800ab98:	e014      	b.n	800abc4 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800ab9a:	f000 f8c3 	bl	800ad24 <RCC_GetSystemClockFreq>
 800ab9e:	60f8      	str	r0, [r7, #12]
          break;
 800aba0:	e027      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800aba2:	f7ff feb5 	bl	800a910 <LL_RCC_HSI_IsReady>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01f      	beq.n	800abec <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 800abac:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <LL_RCC_GetUSARTClockFreq+0x174>)
 800abae:	60fb      	str	r3, [r7, #12]
          }
          break;
 800abb0:	e01c      	b.n	800abec <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800abb2:	f7ff fec1 	bl	800a938 <LL_RCC_LSE_IsReady>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d019      	beq.n	800abf0 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 800abbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abc0:	60fb      	str	r3, [r7, #12]
          }
          break;
 800abc2:	e015      	b.n	800abf0 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800abc4:	f000 f8ae 	bl	800ad24 <RCC_GetSystemClockFreq>
 800abc8:	4603      	mov	r3, r0
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 f8d0 	bl	800ad70 <RCC_GetHCLKClockFreq>
 800abd0:	4603      	mov	r3, r0
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 f8e4 	bl	800ada0 <RCC_GetPCLK1ClockFreq>
 800abd8:	60f8      	str	r0, [r7, #12]
          break;
 800abda:	e00a      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800abdc:	bf00      	nop
 800abde:	e008      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800abe0:	bf00      	nop
 800abe2:	e006      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800abe4:	bf00      	nop
 800abe6:	e004      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800abe8:	bf00      	nop
 800abea:	e002      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 800abec:	bf00      	nop
 800abee:	e000      	b.n	800abf2 <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 800abf0:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800abf2:	68fb      	ldr	r3, [r7, #12]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	00030001 	.word	0x00030001
 800ac00:	00030002 	.word	0x00030002
 800ac04:	00f42400 	.word	0x00f42400
 800ac08:	000c0004 	.word	0x000c0004
 800ac0c:	000c0008 	.word	0x000c0008
 800ac10:	00300010 	.word	0x00300010
 800ac14:	00300020 	.word	0x00300020

0800ac18 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2bc0      	cmp	r3, #192	; 0xc0
 800ac28:	d134      	bne.n	800ac94 <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff fee4 	bl	800a9f8 <LL_RCC_GetUARTClockSource>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800ac36:	d015      	beq.n	800ac64 <LL_RCC_GetUARTClockFreq+0x4c>
 800ac38:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800ac3c:	d81b      	bhi.n	800ac76 <LL_RCC_GetUARTClockFreq+0x5e>
 800ac3e:	4a34      	ldr	r2, [pc, #208]	; (800ad10 <LL_RCC_GetUARTClockFreq+0xf8>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d003      	beq.n	800ac4c <LL_RCC_GetUARTClockFreq+0x34>
 800ac44:	4a33      	ldr	r2, [pc, #204]	; (800ad14 <LL_RCC_GetUARTClockFreq+0xfc>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d004      	beq.n	800ac54 <LL_RCC_GetUARTClockFreq+0x3c>
 800ac4a:	e014      	b.n	800ac76 <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800ac4c:	f000 f86a 	bl	800ad24 <RCC_GetSystemClockFreq>
 800ac50:	60f8      	str	r0, [r7, #12]
        break;
 800ac52:	e01f      	b.n	800ac94 <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800ac54:	f7ff fe5c 	bl	800a910 <LL_RCC_HSI_IsReady>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d017      	beq.n	800ac8e <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 800ac5e:	4b2e      	ldr	r3, [pc, #184]	; (800ad18 <LL_RCC_GetUARTClockFreq+0x100>)
 800ac60:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ac62:	e014      	b.n	800ac8e <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800ac64:	f7ff fe68 	bl	800a938 <LL_RCC_LSE_IsReady>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d011      	beq.n	800ac92 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 800ac6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac72:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ac74:	e00d      	b.n	800ac92 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ac76:	f000 f855 	bl	800ad24 <RCC_GetSystemClockFreq>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 f877 	bl	800ad70 <RCC_GetHCLKClockFreq>
 800ac82:	4603      	mov	r3, r0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 f88b 	bl	800ada0 <RCC_GetPCLK1ClockFreq>
 800ac8a:	60f8      	str	r0, [r7, #12]
        break;
 800ac8c:	e002      	b.n	800ac94 <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 800ac8e:	bf00      	nop
 800ac90:	e000      	b.n	800ac94 <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 800ac92:	bf00      	nop
    }
  }

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac9a:	d134      	bne.n	800ad06 <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff feab 	bl	800a9f8 <LL_RCC_GetUARTClockSource>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800aca8:	d015      	beq.n	800acd6 <LL_RCC_GetUARTClockFreq+0xbe>
 800acaa:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800acae:	d81b      	bhi.n	800ace8 <LL_RCC_GetUARTClockFreq+0xd0>
 800acb0:	4a1a      	ldr	r2, [pc, #104]	; (800ad1c <LL_RCC_GetUARTClockFreq+0x104>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d003      	beq.n	800acbe <LL_RCC_GetUARTClockFreq+0xa6>
 800acb6:	4a1a      	ldr	r2, [pc, #104]	; (800ad20 <LL_RCC_GetUARTClockFreq+0x108>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d004      	beq.n	800acc6 <LL_RCC_GetUARTClockFreq+0xae>
 800acbc:	e014      	b.n	800ace8 <LL_RCC_GetUARTClockFreq+0xd0>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800acbe:	f000 f831 	bl	800ad24 <RCC_GetSystemClockFreq>
 800acc2:	60f8      	str	r0, [r7, #12]
        break;
 800acc4:	e01f      	b.n	800ad06 <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800acc6:	f7ff fe23 	bl	800a910 <LL_RCC_HSI_IsReady>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d017      	beq.n	800ad00 <LL_RCC_GetUARTClockFreq+0xe8>
        {
          uart_frequency = HSI_VALUE;
 800acd0:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <LL_RCC_GetUARTClockFreq+0x100>)
 800acd2:	60fb      	str	r3, [r7, #12]
        }
        break;
 800acd4:	e014      	b.n	800ad00 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800acd6:	f7ff fe2f 	bl	800a938 <LL_RCC_LSE_IsReady>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d011      	beq.n	800ad04 <LL_RCC_GetUARTClockFreq+0xec>
        {
          uart_frequency = LSE_VALUE;
 800ace0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ace4:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ace6:	e00d      	b.n	800ad04 <LL_RCC_GetUARTClockFreq+0xec>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ace8:	f000 f81c 	bl	800ad24 <RCC_GetSystemClockFreq>
 800acec:	4603      	mov	r3, r0
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 f83e 	bl	800ad70 <RCC_GetHCLKClockFreq>
 800acf4:	4603      	mov	r3, r0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f852 	bl	800ada0 <RCC_GetPCLK1ClockFreq>
 800acfc:	60f8      	str	r0, [r7, #12]
        break;
 800acfe:	e002      	b.n	800ad06 <LL_RCC_GetUARTClockFreq+0xee>
        break;
 800ad00:	bf00      	nop
 800ad02:	e000      	b.n	800ad06 <LL_RCC_GetUARTClockFreq+0xee>
        break;
 800ad04:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800ad06:	68fb      	ldr	r3, [r7, #12]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	00c00040 	.word	0x00c00040
 800ad14:	00c00080 	.word	0x00c00080
 800ad18:	00f42400 	.word	0x00f42400
 800ad1c:	03000100 	.word	0x03000100
 800ad20:	03000200 	.word	0x03000200

0800ad24 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800ad2a:	f7ff fe19 	bl	800a960 <LL_RCC_GetSysClkSource>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b0c      	cmp	r3, #12
 800ad32:	d00c      	beq.n	800ad4e <RCC_GetSystemClockFreq+0x2a>
 800ad34:	2b0c      	cmp	r3, #12
 800ad36:	d80e      	bhi.n	800ad56 <RCC_GetSystemClockFreq+0x32>
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	d002      	beq.n	800ad42 <RCC_GetSystemClockFreq+0x1e>
 800ad3c:	2b08      	cmp	r3, #8
 800ad3e:	d003      	beq.n	800ad48 <RCC_GetSystemClockFreq+0x24>
 800ad40:	e009      	b.n	800ad56 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800ad42:	4b09      	ldr	r3, [pc, #36]	; (800ad68 <RCC_GetSystemClockFreq+0x44>)
 800ad44:	607b      	str	r3, [r7, #4]
      break;
 800ad46:	e009      	b.n	800ad5c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800ad48:	4b08      	ldr	r3, [pc, #32]	; (800ad6c <RCC_GetSystemClockFreq+0x48>)
 800ad4a:	607b      	str	r3, [r7, #4]
      break;
 800ad4c:	e006      	b.n	800ad5c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800ad4e:	f000 f853 	bl	800adf8 <RCC_PLL_GetFreqDomain_SYS>
 800ad52:	6078      	str	r0, [r7, #4]
      break;
 800ad54:	e002      	b.n	800ad5c <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800ad56:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <RCC_GetSystemClockFreq+0x44>)
 800ad58:	607b      	str	r3, [r7, #4]
      break;
 800ad5a:	bf00      	nop
  }

  return frequency;
 800ad5c:	687b      	ldr	r3, [r7, #4]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	00f42400 	.word	0x00f42400
 800ad6c:	007a1200 	.word	0x007a1200

0800ad70 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ad78:	f7ff fe00 	bl	800a97c <LL_RCC_GetAHBPrescaler>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	091b      	lsrs	r3, r3, #4
 800ad80:	f003 030f 	and.w	r3, r3, #15
 800ad84:	4a05      	ldr	r2, [pc, #20]	; (800ad9c <RCC_GetHCLKClockFreq+0x2c>)
 800ad86:	5cd3      	ldrb	r3, [r2, r3]
 800ad88:	f003 031f 	and.w	r3, r3, #31
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	0800de6c 	.word	0x0800de6c

0800ada0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800ada8:	f7ff fdf6 	bl	800a998 <LL_RCC_GetAPB1Prescaler>
 800adac:	4603      	mov	r3, r0
 800adae:	0a1b      	lsrs	r3, r3, #8
 800adb0:	4a05      	ldr	r2, [pc, #20]	; (800adc8 <RCC_GetPCLK1ClockFreq+0x28>)
 800adb2:	5cd3      	ldrb	r3, [r2, r3]
 800adb4:	f003 031f 	and.w	r3, r3, #31
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	0800de7c 	.word	0x0800de7c

0800adcc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800add4:	f7ff fdee 	bl	800a9b4 <LL_RCC_GetAPB2Prescaler>
 800add8:	4603      	mov	r3, r0
 800adda:	0adb      	lsrs	r3, r3, #11
 800addc:	4a05      	ldr	r2, [pc, #20]	; (800adf4 <RCC_GetPCLK2ClockFreq+0x28>)
 800adde:	5cd3      	ldrb	r3, [r2, r3]
 800ade0:	f003 031f 	and.w	r3, r3, #31
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adea:	4618      	mov	r0, r3
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	0800de7c 	.word	0x0800de7c

0800adf8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800adf8:	b590      	push	{r4, r7, lr}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800adfe:	f7ff fe0f 	bl	800aa20 <LL_RCC_PLL_GetMainSource>
 800ae02:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d003      	beq.n	800ae12 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d003      	beq.n	800ae18 <RCC_PLL_GetFreqDomain_SYS+0x20>
 800ae10:	e005      	b.n	800ae1e <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800ae12:	4b11      	ldr	r3, [pc, #68]	; (800ae58 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800ae14:	607b      	str	r3, [r7, #4]
      break;
 800ae16:	e005      	b.n	800ae24 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800ae18:	4b10      	ldr	r3, [pc, #64]	; (800ae5c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800ae1a:	607b      	str	r3, [r7, #4]
      break;
 800ae1c:	e002      	b.n	800ae24 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800ae1e:	4b0e      	ldr	r3, [pc, #56]	; (800ae58 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800ae20:	607b      	str	r3, [r7, #4]
      break;
 800ae22:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ae24:	f7ff fe0a 	bl	800aa3c <LL_RCC_PLL_GetN>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	fb03 f402 	mul.w	r4, r3, r2
 800ae30:	f7ff fe20 	bl	800aa74 <LL_RCC_PLL_GetDivider>
 800ae34:	4603      	mov	r3, r0
 800ae36:	091b      	lsrs	r3, r3, #4
 800ae38:	3301      	adds	r3, #1
 800ae3a:	fbb4 f4f3 	udiv	r4, r4, r3
 800ae3e:	f7ff fe0b 	bl	800aa58 <LL_RCC_PLL_GetR>
 800ae42:	4603      	mov	r3, r0
 800ae44:	0e5b      	lsrs	r3, r3, #25
 800ae46:	3301      	adds	r3, #1
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	370c      	adds	r7, #12
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd90      	pop	{r4, r7, pc}
 800ae56:	bf00      	nop
 800ae58:	00f42400 	.word	0x00f42400
 800ae5c:	007a1200 	.word	0x007a1200

0800ae60 <LL_USART_IsEnabled>:
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d101      	bne.n	800ae78 <LL_USART_IsEnabled+0x18>
 800ae74:	2301      	movs	r3, #1
 800ae76:	e000      	b.n	800ae7a <LL_USART_IsEnabled+0x1a>
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <LL_USART_SetPrescaler>:
{
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	f023 030f 	bic.w	r3, r3, #15
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	431a      	orrs	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800aea2:	bf00      	nop
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <LL_USART_SetStopBitsLength>:
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	431a      	orrs	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	605a      	str	r2, [r3, #4]
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <LL_USART_SetHWFlowCtrl>:
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	431a      	orrs	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	609a      	str	r2, [r3, #8]
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
	...

0800aefc <LL_USART_SetBaudRate>:
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b0b      	cmp	r3, #11
 800af0e:	d83c      	bhi.n	800af8a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d039      	beq.n	800af8a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af1c:	d122      	bne.n	800af64 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	461a      	mov	r2, r3
 800af24:	4b1c      	ldr	r3, [pc, #112]	; (800af98 <LL_USART_SetBaudRate+0x9c>)
 800af26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af30:	005a      	lsls	r2, r3, #1
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	085b      	lsrs	r3, r3, #1
 800af36:	441a      	add	r2, r3
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3e:	b29b      	uxth	r3, r3
 800af40:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800af48:	4013      	ands	r3, r2
 800af4a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	085b      	lsrs	r3, r3, #1
 800af50:	b29b      	uxth	r3, r3
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	4313      	orrs	r3, r2
 800af5a:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	60da      	str	r2, [r3, #12]
}
 800af62:	e012      	b.n	800af8a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	b2db      	uxtb	r3, r3
 800af68:	461a      	mov	r2, r3
 800af6a:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <LL_USART_SetBaudRate+0x9c>)
 800af6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	fbb2 f2f3 	udiv	r2, r2, r3
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	085b      	lsrs	r3, r3, #1
 800af7a:	441a      	add	r2, r3
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af82:	b29b      	uxth	r3, r3
 800af84:	461a      	mov	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	60da      	str	r2, [r3, #12]
}
 800af8a:	bf00      	nop
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	0800de94 	.word	0x0800de94

0800af9c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af02      	add	r7, sp, #8
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800afaa:	2300      	movs	r3, #0
 800afac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff ff56 	bl	800ae60 <LL_USART_IsEnabled>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d165      	bne.n	800b086 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	4b34      	ldr	r3, [pc, #208]	; (800b090 <LL_USART_Init+0xf4>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	6891      	ldr	r1, [r2, #8]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	6912      	ldr	r2, [r2, #16]
 800afca:	4311      	orrs	r1, r2
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	6952      	ldr	r2, [r2, #20]
 800afd0:	4311      	orrs	r1, r2
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	69d2      	ldr	r2, [r2, #28]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	431a      	orrs	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff ff62 	bl	800aeae <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7ff ff6f 	bl	800aed4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a26      	ldr	r2, [pc, #152]	; (800b094 <LL_USART_Init+0xf8>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d104      	bne.n	800b008 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800affe:	2003      	movs	r0, #3
 800b000:	f7ff fd46 	bl	800aa90 <LL_RCC_GetUSARTClockFreq>
 800b004:	60b8      	str	r0, [r7, #8]
 800b006:	e023      	b.n	800b050 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a23      	ldr	r2, [pc, #140]	; (800b098 <LL_USART_Init+0xfc>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d104      	bne.n	800b01a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800b010:	200c      	movs	r0, #12
 800b012:	f7ff fd3d 	bl	800aa90 <LL_RCC_GetUSARTClockFreq>
 800b016:	60b8      	str	r0, [r7, #8]
 800b018:	e01a      	b.n	800b050 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a1f      	ldr	r2, [pc, #124]	; (800b09c <LL_USART_Init+0x100>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d104      	bne.n	800b02c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800b022:	2030      	movs	r0, #48	; 0x30
 800b024:	f7ff fd34 	bl	800aa90 <LL_RCC_GetUSARTClockFreq>
 800b028:	60b8      	str	r0, [r7, #8]
 800b02a:	e011      	b.n	800b050 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a1c      	ldr	r2, [pc, #112]	; (800b0a0 <LL_USART_Init+0x104>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d104      	bne.n	800b03e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800b034:	20c0      	movs	r0, #192	; 0xc0
 800b036:	f7ff fdef 	bl	800ac18 <LL_RCC_GetUARTClockFreq>
 800b03a:	60b8      	str	r0, [r7, #8]
 800b03c:	e008      	b.n	800b050 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a18      	ldr	r2, [pc, #96]	; (800b0a4 <LL_USART_Init+0x108>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d104      	bne.n	800b050 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800b046:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b04a:	f7ff fde5 	bl	800ac18 <LL_RCC_GetUARTClockFreq>
 800b04e:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d011      	beq.n	800b07a <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00d      	beq.n	800b07a <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	460b      	mov	r3, r1
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff ff41 	bl	800aefc <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff ff00 	bl	800ae86 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800b086:	7bfb      	ldrb	r3, [r7, #15]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	efff69f3 	.word	0xefff69f3
 800b094:	40013800 	.word	0x40013800
 800b098:	40004400 	.word	0x40004400
 800b09c:	40004800 	.word	0x40004800
 800b0a0:	40004c00 	.word	0x40004c00
 800b0a4:	40005000 	.word	0x40005000

0800b0a8 <atof>:
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	f000 bec9 	b.w	800be40 <strtod>
	...

0800b0b0 <malloc>:
 800b0b0:	4b02      	ldr	r3, [pc, #8]	; (800b0bc <malloc+0xc>)
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	6818      	ldr	r0, [r3, #0]
 800b0b6:	f000 b82b 	b.w	800b110 <_malloc_r>
 800b0ba:	bf00      	nop
 800b0bc:	200001ec 	.word	0x200001ec

0800b0c0 <free>:
 800b0c0:	4b02      	ldr	r3, [pc, #8]	; (800b0cc <free+0xc>)
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	f001 b905 	b.w	800c2d4 <_free_r>
 800b0ca:	bf00      	nop
 800b0cc:	200001ec 	.word	0x200001ec

0800b0d0 <sbrk_aligned>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	4e0e      	ldr	r6, [pc, #56]	; (800b10c <sbrk_aligned+0x3c>)
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	6831      	ldr	r1, [r6, #0]
 800b0d8:	4605      	mov	r5, r0
 800b0da:	b911      	cbnz	r1, 800b0e2 <sbrk_aligned+0x12>
 800b0dc:	f001 f86c 	bl	800c1b8 <_sbrk_r>
 800b0e0:	6030      	str	r0, [r6, #0]
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f001 f867 	bl	800c1b8 <_sbrk_r>
 800b0ea:	1c43      	adds	r3, r0, #1
 800b0ec:	d00a      	beq.n	800b104 <sbrk_aligned+0x34>
 800b0ee:	1cc4      	adds	r4, r0, #3
 800b0f0:	f024 0403 	bic.w	r4, r4, #3
 800b0f4:	42a0      	cmp	r0, r4
 800b0f6:	d007      	beq.n	800b108 <sbrk_aligned+0x38>
 800b0f8:	1a21      	subs	r1, r4, r0
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f001 f85c 	bl	800c1b8 <_sbrk_r>
 800b100:	3001      	adds	r0, #1
 800b102:	d101      	bne.n	800b108 <sbrk_aligned+0x38>
 800b104:	f04f 34ff 	mov.w	r4, #4294967295
 800b108:	4620      	mov	r0, r4
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	20003554 	.word	0x20003554

0800b110 <_malloc_r>:
 800b110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b114:	1ccd      	adds	r5, r1, #3
 800b116:	f025 0503 	bic.w	r5, r5, #3
 800b11a:	3508      	adds	r5, #8
 800b11c:	2d0c      	cmp	r5, #12
 800b11e:	bf38      	it	cc
 800b120:	250c      	movcc	r5, #12
 800b122:	2d00      	cmp	r5, #0
 800b124:	4607      	mov	r7, r0
 800b126:	db01      	blt.n	800b12c <_malloc_r+0x1c>
 800b128:	42a9      	cmp	r1, r5
 800b12a:	d905      	bls.n	800b138 <_malloc_r+0x28>
 800b12c:	230c      	movs	r3, #12
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	2600      	movs	r6, #0
 800b132:	4630      	mov	r0, r6
 800b134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b20c <_malloc_r+0xfc>
 800b13c:	f000 f868 	bl	800b210 <__malloc_lock>
 800b140:	f8d8 3000 	ldr.w	r3, [r8]
 800b144:	461c      	mov	r4, r3
 800b146:	bb5c      	cbnz	r4, 800b1a0 <_malloc_r+0x90>
 800b148:	4629      	mov	r1, r5
 800b14a:	4638      	mov	r0, r7
 800b14c:	f7ff ffc0 	bl	800b0d0 <sbrk_aligned>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	4604      	mov	r4, r0
 800b154:	d155      	bne.n	800b202 <_malloc_r+0xf2>
 800b156:	f8d8 4000 	ldr.w	r4, [r8]
 800b15a:	4626      	mov	r6, r4
 800b15c:	2e00      	cmp	r6, #0
 800b15e:	d145      	bne.n	800b1ec <_malloc_r+0xdc>
 800b160:	2c00      	cmp	r4, #0
 800b162:	d048      	beq.n	800b1f6 <_malloc_r+0xe6>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	4631      	mov	r1, r6
 800b168:	4638      	mov	r0, r7
 800b16a:	eb04 0903 	add.w	r9, r4, r3
 800b16e:	f001 f823 	bl	800c1b8 <_sbrk_r>
 800b172:	4581      	cmp	r9, r0
 800b174:	d13f      	bne.n	800b1f6 <_malloc_r+0xe6>
 800b176:	6821      	ldr	r1, [r4, #0]
 800b178:	1a6d      	subs	r5, r5, r1
 800b17a:	4629      	mov	r1, r5
 800b17c:	4638      	mov	r0, r7
 800b17e:	f7ff ffa7 	bl	800b0d0 <sbrk_aligned>
 800b182:	3001      	adds	r0, #1
 800b184:	d037      	beq.n	800b1f6 <_malloc_r+0xe6>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	442b      	add	r3, r5
 800b18a:	6023      	str	r3, [r4, #0]
 800b18c:	f8d8 3000 	ldr.w	r3, [r8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d038      	beq.n	800b206 <_malloc_r+0xf6>
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	42a2      	cmp	r2, r4
 800b198:	d12b      	bne.n	800b1f2 <_malloc_r+0xe2>
 800b19a:	2200      	movs	r2, #0
 800b19c:	605a      	str	r2, [r3, #4]
 800b19e:	e00f      	b.n	800b1c0 <_malloc_r+0xb0>
 800b1a0:	6822      	ldr	r2, [r4, #0]
 800b1a2:	1b52      	subs	r2, r2, r5
 800b1a4:	d41f      	bmi.n	800b1e6 <_malloc_r+0xd6>
 800b1a6:	2a0b      	cmp	r2, #11
 800b1a8:	d917      	bls.n	800b1da <_malloc_r+0xca>
 800b1aa:	1961      	adds	r1, r4, r5
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	6025      	str	r5, [r4, #0]
 800b1b0:	bf18      	it	ne
 800b1b2:	6059      	strne	r1, [r3, #4]
 800b1b4:	6863      	ldr	r3, [r4, #4]
 800b1b6:	bf08      	it	eq
 800b1b8:	f8c8 1000 	streq.w	r1, [r8]
 800b1bc:	5162      	str	r2, [r4, r5]
 800b1be:	604b      	str	r3, [r1, #4]
 800b1c0:	4638      	mov	r0, r7
 800b1c2:	f104 060b 	add.w	r6, r4, #11
 800b1c6:	f000 f829 	bl	800b21c <__malloc_unlock>
 800b1ca:	f026 0607 	bic.w	r6, r6, #7
 800b1ce:	1d23      	adds	r3, r4, #4
 800b1d0:	1af2      	subs	r2, r6, r3
 800b1d2:	d0ae      	beq.n	800b132 <_malloc_r+0x22>
 800b1d4:	1b9b      	subs	r3, r3, r6
 800b1d6:	50a3      	str	r3, [r4, r2]
 800b1d8:	e7ab      	b.n	800b132 <_malloc_r+0x22>
 800b1da:	42a3      	cmp	r3, r4
 800b1dc:	6862      	ldr	r2, [r4, #4]
 800b1de:	d1dd      	bne.n	800b19c <_malloc_r+0x8c>
 800b1e0:	f8c8 2000 	str.w	r2, [r8]
 800b1e4:	e7ec      	b.n	800b1c0 <_malloc_r+0xb0>
 800b1e6:	4623      	mov	r3, r4
 800b1e8:	6864      	ldr	r4, [r4, #4]
 800b1ea:	e7ac      	b.n	800b146 <_malloc_r+0x36>
 800b1ec:	4634      	mov	r4, r6
 800b1ee:	6876      	ldr	r6, [r6, #4]
 800b1f0:	e7b4      	b.n	800b15c <_malloc_r+0x4c>
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	e7cc      	b.n	800b190 <_malloc_r+0x80>
 800b1f6:	230c      	movs	r3, #12
 800b1f8:	603b      	str	r3, [r7, #0]
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	f000 f80e 	bl	800b21c <__malloc_unlock>
 800b200:	e797      	b.n	800b132 <_malloc_r+0x22>
 800b202:	6025      	str	r5, [r4, #0]
 800b204:	e7dc      	b.n	800b1c0 <_malloc_r+0xb0>
 800b206:	605b      	str	r3, [r3, #4]
 800b208:	deff      	udf	#255	; 0xff
 800b20a:	bf00      	nop
 800b20c:	20003550 	.word	0x20003550

0800b210 <__malloc_lock>:
 800b210:	4801      	ldr	r0, [pc, #4]	; (800b218 <__malloc_lock+0x8>)
 800b212:	f001 b81e 	b.w	800c252 <__retarget_lock_acquire_recursive>
 800b216:	bf00      	nop
 800b218:	20003698 	.word	0x20003698

0800b21c <__malloc_unlock>:
 800b21c:	4801      	ldr	r0, [pc, #4]	; (800b224 <__malloc_unlock+0x8>)
 800b21e:	f001 b819 	b.w	800c254 <__retarget_lock_release_recursive>
 800b222:	bf00      	nop
 800b224:	20003698 	.word	0x20003698

0800b228 <sulp>:
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	4604      	mov	r4, r0
 800b22c:	460d      	mov	r5, r1
 800b22e:	ec45 4b10 	vmov	d0, r4, r5
 800b232:	4616      	mov	r6, r2
 800b234:	f001 ff70 	bl	800d118 <__ulp>
 800b238:	ec51 0b10 	vmov	r0, r1, d0
 800b23c:	b17e      	cbz	r6, 800b25e <sulp+0x36>
 800b23e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b242:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b246:	2b00      	cmp	r3, #0
 800b248:	dd09      	ble.n	800b25e <sulp+0x36>
 800b24a:	051b      	lsls	r3, r3, #20
 800b24c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b250:	2400      	movs	r4, #0
 800b252:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b256:	4622      	mov	r2, r4
 800b258:	462b      	mov	r3, r5
 800b25a:	f7f5 f9ed 	bl	8000638 <__aeabi_dmul>
 800b25e:	bd70      	pop	{r4, r5, r6, pc}

0800b260 <_strtod_l>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	ed2d 8b02 	vpush	{d8}
 800b268:	b09b      	sub	sp, #108	; 0x6c
 800b26a:	4604      	mov	r4, r0
 800b26c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b26e:	2200      	movs	r2, #0
 800b270:	9216      	str	r2, [sp, #88]	; 0x58
 800b272:	460d      	mov	r5, r1
 800b274:	f04f 0800 	mov.w	r8, #0
 800b278:	f04f 0900 	mov.w	r9, #0
 800b27c:	460a      	mov	r2, r1
 800b27e:	9215      	str	r2, [sp, #84]	; 0x54
 800b280:	7811      	ldrb	r1, [r2, #0]
 800b282:	292b      	cmp	r1, #43	; 0x2b
 800b284:	d04c      	beq.n	800b320 <_strtod_l+0xc0>
 800b286:	d83a      	bhi.n	800b2fe <_strtod_l+0x9e>
 800b288:	290d      	cmp	r1, #13
 800b28a:	d834      	bhi.n	800b2f6 <_strtod_l+0x96>
 800b28c:	2908      	cmp	r1, #8
 800b28e:	d834      	bhi.n	800b2fa <_strtod_l+0x9a>
 800b290:	2900      	cmp	r1, #0
 800b292:	d03d      	beq.n	800b310 <_strtod_l+0xb0>
 800b294:	2200      	movs	r2, #0
 800b296:	920a      	str	r2, [sp, #40]	; 0x28
 800b298:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b29a:	7832      	ldrb	r2, [r6, #0]
 800b29c:	2a30      	cmp	r2, #48	; 0x30
 800b29e:	f040 80b4 	bne.w	800b40a <_strtod_l+0x1aa>
 800b2a2:	7872      	ldrb	r2, [r6, #1]
 800b2a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b2a8:	2a58      	cmp	r2, #88	; 0x58
 800b2aa:	d170      	bne.n	800b38e <_strtod_l+0x12e>
 800b2ac:	9302      	str	r3, [sp, #8]
 800b2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	ab16      	add	r3, sp, #88	; 0x58
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	4a8e      	ldr	r2, [pc, #568]	; (800b4f0 <_strtod_l+0x290>)
 800b2b8:	ab17      	add	r3, sp, #92	; 0x5c
 800b2ba:	a915      	add	r1, sp, #84	; 0x54
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f001 f8bd 	bl	800c43c <__gethex>
 800b2c2:	f010 070f 	ands.w	r7, r0, #15
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	d005      	beq.n	800b2d6 <_strtod_l+0x76>
 800b2ca:	2f06      	cmp	r7, #6
 800b2cc:	d12a      	bne.n	800b324 <_strtod_l+0xc4>
 800b2ce:	3601      	adds	r6, #1
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9615      	str	r6, [sp, #84]	; 0x54
 800b2d4:	930a      	str	r3, [sp, #40]	; 0x28
 800b2d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f040 857f 	bne.w	800bddc <_strtod_l+0xb7c>
 800b2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2e0:	b1db      	cbz	r3, 800b31a <_strtod_l+0xba>
 800b2e2:	4642      	mov	r2, r8
 800b2e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b2e8:	ec43 2b10 	vmov	d0, r2, r3
 800b2ec:	b01b      	add	sp, #108	; 0x6c
 800b2ee:	ecbd 8b02 	vpop	{d8}
 800b2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f6:	2920      	cmp	r1, #32
 800b2f8:	d1cc      	bne.n	800b294 <_strtod_l+0x34>
 800b2fa:	3201      	adds	r2, #1
 800b2fc:	e7bf      	b.n	800b27e <_strtod_l+0x1e>
 800b2fe:	292d      	cmp	r1, #45	; 0x2d
 800b300:	d1c8      	bne.n	800b294 <_strtod_l+0x34>
 800b302:	2101      	movs	r1, #1
 800b304:	910a      	str	r1, [sp, #40]	; 0x28
 800b306:	1c51      	adds	r1, r2, #1
 800b308:	9115      	str	r1, [sp, #84]	; 0x54
 800b30a:	7852      	ldrb	r2, [r2, #1]
 800b30c:	2a00      	cmp	r2, #0
 800b30e:	d1c3      	bne.n	800b298 <_strtod_l+0x38>
 800b310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b312:	9515      	str	r5, [sp, #84]	; 0x54
 800b314:	2b00      	cmp	r3, #0
 800b316:	f040 855f 	bne.w	800bdd8 <_strtod_l+0xb78>
 800b31a:	4642      	mov	r2, r8
 800b31c:	464b      	mov	r3, r9
 800b31e:	e7e3      	b.n	800b2e8 <_strtod_l+0x88>
 800b320:	2100      	movs	r1, #0
 800b322:	e7ef      	b.n	800b304 <_strtod_l+0xa4>
 800b324:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b326:	b13a      	cbz	r2, 800b338 <_strtod_l+0xd8>
 800b328:	2135      	movs	r1, #53	; 0x35
 800b32a:	a818      	add	r0, sp, #96	; 0x60
 800b32c:	f001 fff1 	bl	800d312 <__copybits>
 800b330:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b332:	4620      	mov	r0, r4
 800b334:	f001 fbc4 	bl	800cac0 <_Bfree>
 800b338:	3f01      	subs	r7, #1
 800b33a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b33c:	2f04      	cmp	r7, #4
 800b33e:	d806      	bhi.n	800b34e <_strtod_l+0xee>
 800b340:	e8df f007 	tbb	[pc, r7]
 800b344:	201d0314 	.word	0x201d0314
 800b348:	14          	.byte	0x14
 800b349:	00          	.byte	0x00
 800b34a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b34e:	05e9      	lsls	r1, r5, #23
 800b350:	bf48      	it	mi
 800b352:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b356:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b35a:	0d1b      	lsrs	r3, r3, #20
 800b35c:	051b      	lsls	r3, r3, #20
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1b9      	bne.n	800b2d6 <_strtod_l+0x76>
 800b362:	f000 ff4b 	bl	800c1fc <__errno>
 800b366:	2322      	movs	r3, #34	; 0x22
 800b368:	6003      	str	r3, [r0, #0]
 800b36a:	e7b4      	b.n	800b2d6 <_strtod_l+0x76>
 800b36c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b370:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b374:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b378:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b37c:	e7e7      	b.n	800b34e <_strtod_l+0xee>
 800b37e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b4f8 <_strtod_l+0x298>
 800b382:	e7e4      	b.n	800b34e <_strtod_l+0xee>
 800b384:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b388:	f04f 38ff 	mov.w	r8, #4294967295
 800b38c:	e7df      	b.n	800b34e <_strtod_l+0xee>
 800b38e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b390:	1c5a      	adds	r2, r3, #1
 800b392:	9215      	str	r2, [sp, #84]	; 0x54
 800b394:	785b      	ldrb	r3, [r3, #1]
 800b396:	2b30      	cmp	r3, #48	; 0x30
 800b398:	d0f9      	beq.n	800b38e <_strtod_l+0x12e>
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d09b      	beq.n	800b2d6 <_strtod_l+0x76>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f04f 0a00 	mov.w	sl, #0
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b3ae:	46d3      	mov	fp, sl
 800b3b0:	220a      	movs	r2, #10
 800b3b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b3b4:	7806      	ldrb	r6, [r0, #0]
 800b3b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b3ba:	b2d9      	uxtb	r1, r3
 800b3bc:	2909      	cmp	r1, #9
 800b3be:	d926      	bls.n	800b40e <_strtod_l+0x1ae>
 800b3c0:	494c      	ldr	r1, [pc, #304]	; (800b4f4 <_strtod_l+0x294>)
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f000 fe55 	bl	800c072 <strncmp>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d030      	beq.n	800b42e <_strtod_l+0x1ce>
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	4632      	mov	r2, r6
 800b3d0:	9005      	str	r0, [sp, #20]
 800b3d2:	465e      	mov	r6, fp
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2a65      	cmp	r2, #101	; 0x65
 800b3d8:	d001      	beq.n	800b3de <_strtod_l+0x17e>
 800b3da:	2a45      	cmp	r2, #69	; 0x45
 800b3dc:	d113      	bne.n	800b406 <_strtod_l+0x1a6>
 800b3de:	b91e      	cbnz	r6, 800b3e8 <_strtod_l+0x188>
 800b3e0:	9a04      	ldr	r2, [sp, #16]
 800b3e2:	4302      	orrs	r2, r0
 800b3e4:	d094      	beq.n	800b310 <_strtod_l+0xb0>
 800b3e6:	2600      	movs	r6, #0
 800b3e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b3ea:	1c6a      	adds	r2, r5, #1
 800b3ec:	9215      	str	r2, [sp, #84]	; 0x54
 800b3ee:	786a      	ldrb	r2, [r5, #1]
 800b3f0:	2a2b      	cmp	r2, #43	; 0x2b
 800b3f2:	d074      	beq.n	800b4de <_strtod_l+0x27e>
 800b3f4:	2a2d      	cmp	r2, #45	; 0x2d
 800b3f6:	d078      	beq.n	800b4ea <_strtod_l+0x28a>
 800b3f8:	f04f 0c00 	mov.w	ip, #0
 800b3fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b400:	2909      	cmp	r1, #9
 800b402:	d97f      	bls.n	800b504 <_strtod_l+0x2a4>
 800b404:	9515      	str	r5, [sp, #84]	; 0x54
 800b406:	2700      	movs	r7, #0
 800b408:	e09e      	b.n	800b548 <_strtod_l+0x2e8>
 800b40a:	2300      	movs	r3, #0
 800b40c:	e7c8      	b.n	800b3a0 <_strtod_l+0x140>
 800b40e:	f1bb 0f08 	cmp.w	fp, #8
 800b412:	bfd8      	it	le
 800b414:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b416:	f100 0001 	add.w	r0, r0, #1
 800b41a:	bfda      	itte	le
 800b41c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b420:	9309      	strle	r3, [sp, #36]	; 0x24
 800b422:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b426:	f10b 0b01 	add.w	fp, fp, #1
 800b42a:	9015      	str	r0, [sp, #84]	; 0x54
 800b42c:	e7c1      	b.n	800b3b2 <_strtod_l+0x152>
 800b42e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b430:	1c5a      	adds	r2, r3, #1
 800b432:	9215      	str	r2, [sp, #84]	; 0x54
 800b434:	785a      	ldrb	r2, [r3, #1]
 800b436:	f1bb 0f00 	cmp.w	fp, #0
 800b43a:	d037      	beq.n	800b4ac <_strtod_l+0x24c>
 800b43c:	9005      	str	r0, [sp, #20]
 800b43e:	465e      	mov	r6, fp
 800b440:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b444:	2b09      	cmp	r3, #9
 800b446:	d912      	bls.n	800b46e <_strtod_l+0x20e>
 800b448:	2301      	movs	r3, #1
 800b44a:	e7c4      	b.n	800b3d6 <_strtod_l+0x176>
 800b44c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	9215      	str	r2, [sp, #84]	; 0x54
 800b452:	785a      	ldrb	r2, [r3, #1]
 800b454:	3001      	adds	r0, #1
 800b456:	2a30      	cmp	r2, #48	; 0x30
 800b458:	d0f8      	beq.n	800b44c <_strtod_l+0x1ec>
 800b45a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b45e:	2b08      	cmp	r3, #8
 800b460:	f200 84c1 	bhi.w	800bde6 <_strtod_l+0xb86>
 800b464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b466:	9005      	str	r0, [sp, #20]
 800b468:	2000      	movs	r0, #0
 800b46a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b46c:	4606      	mov	r6, r0
 800b46e:	3a30      	subs	r2, #48	; 0x30
 800b470:	f100 0301 	add.w	r3, r0, #1
 800b474:	d014      	beq.n	800b4a0 <_strtod_l+0x240>
 800b476:	9905      	ldr	r1, [sp, #20]
 800b478:	4419      	add	r1, r3
 800b47a:	9105      	str	r1, [sp, #20]
 800b47c:	4633      	mov	r3, r6
 800b47e:	eb00 0c06 	add.w	ip, r0, r6
 800b482:	210a      	movs	r1, #10
 800b484:	4563      	cmp	r3, ip
 800b486:	d113      	bne.n	800b4b0 <_strtod_l+0x250>
 800b488:	1833      	adds	r3, r6, r0
 800b48a:	2b08      	cmp	r3, #8
 800b48c:	f106 0601 	add.w	r6, r6, #1
 800b490:	4406      	add	r6, r0
 800b492:	dc1a      	bgt.n	800b4ca <_strtod_l+0x26a>
 800b494:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b496:	230a      	movs	r3, #10
 800b498:	fb03 2301 	mla	r3, r3, r1, r2
 800b49c:	9309      	str	r3, [sp, #36]	; 0x24
 800b49e:	2300      	movs	r3, #0
 800b4a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b4a2:	1c51      	adds	r1, r2, #1
 800b4a4:	9115      	str	r1, [sp, #84]	; 0x54
 800b4a6:	7852      	ldrb	r2, [r2, #1]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	e7c9      	b.n	800b440 <_strtod_l+0x1e0>
 800b4ac:	4658      	mov	r0, fp
 800b4ae:	e7d2      	b.n	800b456 <_strtod_l+0x1f6>
 800b4b0:	2b08      	cmp	r3, #8
 800b4b2:	f103 0301 	add.w	r3, r3, #1
 800b4b6:	dc03      	bgt.n	800b4c0 <_strtod_l+0x260>
 800b4b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b4ba:	434f      	muls	r7, r1
 800b4bc:	9709      	str	r7, [sp, #36]	; 0x24
 800b4be:	e7e1      	b.n	800b484 <_strtod_l+0x224>
 800b4c0:	2b10      	cmp	r3, #16
 800b4c2:	bfd8      	it	le
 800b4c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b4c8:	e7dc      	b.n	800b484 <_strtod_l+0x224>
 800b4ca:	2e10      	cmp	r6, #16
 800b4cc:	bfdc      	itt	le
 800b4ce:	230a      	movle	r3, #10
 800b4d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b4d4:	e7e3      	b.n	800b49e <_strtod_l+0x23e>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9305      	str	r3, [sp, #20]
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e780      	b.n	800b3e0 <_strtod_l+0x180>
 800b4de:	f04f 0c00 	mov.w	ip, #0
 800b4e2:	1caa      	adds	r2, r5, #2
 800b4e4:	9215      	str	r2, [sp, #84]	; 0x54
 800b4e6:	78aa      	ldrb	r2, [r5, #2]
 800b4e8:	e788      	b.n	800b3fc <_strtod_l+0x19c>
 800b4ea:	f04f 0c01 	mov.w	ip, #1
 800b4ee:	e7f8      	b.n	800b4e2 <_strtod_l+0x282>
 800b4f0:	0800ded4 	.word	0x0800ded4
 800b4f4:	0800dec4 	.word	0x0800dec4
 800b4f8:	7ff00000 	.word	0x7ff00000
 800b4fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b4fe:	1c51      	adds	r1, r2, #1
 800b500:	9115      	str	r1, [sp, #84]	; 0x54
 800b502:	7852      	ldrb	r2, [r2, #1]
 800b504:	2a30      	cmp	r2, #48	; 0x30
 800b506:	d0f9      	beq.n	800b4fc <_strtod_l+0x29c>
 800b508:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b50c:	2908      	cmp	r1, #8
 800b50e:	f63f af7a 	bhi.w	800b406 <_strtod_l+0x1a6>
 800b512:	3a30      	subs	r2, #48	; 0x30
 800b514:	9208      	str	r2, [sp, #32]
 800b516:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b518:	920c      	str	r2, [sp, #48]	; 0x30
 800b51a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b51c:	1c57      	adds	r7, r2, #1
 800b51e:	9715      	str	r7, [sp, #84]	; 0x54
 800b520:	7852      	ldrb	r2, [r2, #1]
 800b522:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b526:	f1be 0f09 	cmp.w	lr, #9
 800b52a:	d938      	bls.n	800b59e <_strtod_l+0x33e>
 800b52c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b52e:	1a7f      	subs	r7, r7, r1
 800b530:	2f08      	cmp	r7, #8
 800b532:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b536:	dc03      	bgt.n	800b540 <_strtod_l+0x2e0>
 800b538:	9908      	ldr	r1, [sp, #32]
 800b53a:	428f      	cmp	r7, r1
 800b53c:	bfa8      	it	ge
 800b53e:	460f      	movge	r7, r1
 800b540:	f1bc 0f00 	cmp.w	ip, #0
 800b544:	d000      	beq.n	800b548 <_strtod_l+0x2e8>
 800b546:	427f      	negs	r7, r7
 800b548:	2e00      	cmp	r6, #0
 800b54a:	d14f      	bne.n	800b5ec <_strtod_l+0x38c>
 800b54c:	9904      	ldr	r1, [sp, #16]
 800b54e:	4301      	orrs	r1, r0
 800b550:	f47f aec1 	bne.w	800b2d6 <_strtod_l+0x76>
 800b554:	2b00      	cmp	r3, #0
 800b556:	f47f aedb 	bne.w	800b310 <_strtod_l+0xb0>
 800b55a:	2a69      	cmp	r2, #105	; 0x69
 800b55c:	d029      	beq.n	800b5b2 <_strtod_l+0x352>
 800b55e:	dc26      	bgt.n	800b5ae <_strtod_l+0x34e>
 800b560:	2a49      	cmp	r2, #73	; 0x49
 800b562:	d026      	beq.n	800b5b2 <_strtod_l+0x352>
 800b564:	2a4e      	cmp	r2, #78	; 0x4e
 800b566:	f47f aed3 	bne.w	800b310 <_strtod_l+0xb0>
 800b56a:	499b      	ldr	r1, [pc, #620]	; (800b7d8 <_strtod_l+0x578>)
 800b56c:	a815      	add	r0, sp, #84	; 0x54
 800b56e:	f001 f9a5 	bl	800c8bc <__match>
 800b572:	2800      	cmp	r0, #0
 800b574:	f43f aecc 	beq.w	800b310 <_strtod_l+0xb0>
 800b578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	2b28      	cmp	r3, #40	; 0x28
 800b57e:	d12f      	bne.n	800b5e0 <_strtod_l+0x380>
 800b580:	4996      	ldr	r1, [pc, #600]	; (800b7dc <_strtod_l+0x57c>)
 800b582:	aa18      	add	r2, sp, #96	; 0x60
 800b584:	a815      	add	r0, sp, #84	; 0x54
 800b586:	f001 f9ad 	bl	800c8e4 <__hexnan>
 800b58a:	2805      	cmp	r0, #5
 800b58c:	d128      	bne.n	800b5e0 <_strtod_l+0x380>
 800b58e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b594:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b598:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b59c:	e69b      	b.n	800b2d6 <_strtod_l+0x76>
 800b59e:	9f08      	ldr	r7, [sp, #32]
 800b5a0:	210a      	movs	r1, #10
 800b5a2:	fb01 2107 	mla	r1, r1, r7, r2
 800b5a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b5aa:	9208      	str	r2, [sp, #32]
 800b5ac:	e7b5      	b.n	800b51a <_strtod_l+0x2ba>
 800b5ae:	2a6e      	cmp	r2, #110	; 0x6e
 800b5b0:	e7d9      	b.n	800b566 <_strtod_l+0x306>
 800b5b2:	498b      	ldr	r1, [pc, #556]	; (800b7e0 <_strtod_l+0x580>)
 800b5b4:	a815      	add	r0, sp, #84	; 0x54
 800b5b6:	f001 f981 	bl	800c8bc <__match>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	f43f aea8 	beq.w	800b310 <_strtod_l+0xb0>
 800b5c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5c2:	4988      	ldr	r1, [pc, #544]	; (800b7e4 <_strtod_l+0x584>)
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	a815      	add	r0, sp, #84	; 0x54
 800b5c8:	9315      	str	r3, [sp, #84]	; 0x54
 800b5ca:	f001 f977 	bl	800c8bc <__match>
 800b5ce:	b910      	cbnz	r0, 800b5d6 <_strtod_l+0x376>
 800b5d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	9315      	str	r3, [sp, #84]	; 0x54
 800b5d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b7f4 <_strtod_l+0x594>
 800b5da:	f04f 0800 	mov.w	r8, #0
 800b5de:	e67a      	b.n	800b2d6 <_strtod_l+0x76>
 800b5e0:	4881      	ldr	r0, [pc, #516]	; (800b7e8 <_strtod_l+0x588>)
 800b5e2:	f000 fe51 	bl	800c288 <nan>
 800b5e6:	ec59 8b10 	vmov	r8, r9, d0
 800b5ea:	e674      	b.n	800b2d6 <_strtod_l+0x76>
 800b5ec:	9b05      	ldr	r3, [sp, #20]
 800b5ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5f0:	1afb      	subs	r3, r7, r3
 800b5f2:	f1bb 0f00 	cmp.w	fp, #0
 800b5f6:	bf08      	it	eq
 800b5f8:	46b3      	moveq	fp, r6
 800b5fa:	2e10      	cmp	r6, #16
 800b5fc:	9308      	str	r3, [sp, #32]
 800b5fe:	4635      	mov	r5, r6
 800b600:	bfa8      	it	ge
 800b602:	2510      	movge	r5, #16
 800b604:	f7f4 ff9e 	bl	8000544 <__aeabi_ui2d>
 800b608:	2e09      	cmp	r6, #9
 800b60a:	4680      	mov	r8, r0
 800b60c:	4689      	mov	r9, r1
 800b60e:	dd13      	ble.n	800b638 <_strtod_l+0x3d8>
 800b610:	4b76      	ldr	r3, [pc, #472]	; (800b7ec <_strtod_l+0x58c>)
 800b612:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b616:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b61a:	f7f5 f80d 	bl	8000638 <__aeabi_dmul>
 800b61e:	4680      	mov	r8, r0
 800b620:	4650      	mov	r0, sl
 800b622:	4689      	mov	r9, r1
 800b624:	f7f4 ff8e 	bl	8000544 <__aeabi_ui2d>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4640      	mov	r0, r8
 800b62e:	4649      	mov	r1, r9
 800b630:	f7f4 fe4c 	bl	80002cc <__adddf3>
 800b634:	4680      	mov	r8, r0
 800b636:	4689      	mov	r9, r1
 800b638:	2e0f      	cmp	r6, #15
 800b63a:	dc38      	bgt.n	800b6ae <_strtod_l+0x44e>
 800b63c:	9b08      	ldr	r3, [sp, #32]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f43f ae49 	beq.w	800b2d6 <_strtod_l+0x76>
 800b644:	dd24      	ble.n	800b690 <_strtod_l+0x430>
 800b646:	2b16      	cmp	r3, #22
 800b648:	dc0b      	bgt.n	800b662 <_strtod_l+0x402>
 800b64a:	4968      	ldr	r1, [pc, #416]	; (800b7ec <_strtod_l+0x58c>)
 800b64c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b654:	4642      	mov	r2, r8
 800b656:	464b      	mov	r3, r9
 800b658:	f7f4 ffee 	bl	8000638 <__aeabi_dmul>
 800b65c:	4680      	mov	r8, r0
 800b65e:	4689      	mov	r9, r1
 800b660:	e639      	b.n	800b2d6 <_strtod_l+0x76>
 800b662:	9a08      	ldr	r2, [sp, #32]
 800b664:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b668:	4293      	cmp	r3, r2
 800b66a:	db20      	blt.n	800b6ae <_strtod_l+0x44e>
 800b66c:	4c5f      	ldr	r4, [pc, #380]	; (800b7ec <_strtod_l+0x58c>)
 800b66e:	f1c6 060f 	rsb	r6, r6, #15
 800b672:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b676:	4642      	mov	r2, r8
 800b678:	464b      	mov	r3, r9
 800b67a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b67e:	f7f4 ffdb 	bl	8000638 <__aeabi_dmul>
 800b682:	9b08      	ldr	r3, [sp, #32]
 800b684:	1b9e      	subs	r6, r3, r6
 800b686:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b68a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b68e:	e7e3      	b.n	800b658 <_strtod_l+0x3f8>
 800b690:	9b08      	ldr	r3, [sp, #32]
 800b692:	3316      	adds	r3, #22
 800b694:	db0b      	blt.n	800b6ae <_strtod_l+0x44e>
 800b696:	9b05      	ldr	r3, [sp, #20]
 800b698:	1bdf      	subs	r7, r3, r7
 800b69a:	4b54      	ldr	r3, [pc, #336]	; (800b7ec <_strtod_l+0x58c>)
 800b69c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	f7f5 f8f0 	bl	800088c <__aeabi_ddiv>
 800b6ac:	e7d6      	b.n	800b65c <_strtod_l+0x3fc>
 800b6ae:	9b08      	ldr	r3, [sp, #32]
 800b6b0:	1b75      	subs	r5, r6, r5
 800b6b2:	441d      	add	r5, r3
 800b6b4:	2d00      	cmp	r5, #0
 800b6b6:	dd70      	ble.n	800b79a <_strtod_l+0x53a>
 800b6b8:	f015 030f 	ands.w	r3, r5, #15
 800b6bc:	d00a      	beq.n	800b6d4 <_strtod_l+0x474>
 800b6be:	494b      	ldr	r1, [pc, #300]	; (800b7ec <_strtod_l+0x58c>)
 800b6c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6c4:	4642      	mov	r2, r8
 800b6c6:	464b      	mov	r3, r9
 800b6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6cc:	f7f4 ffb4 	bl	8000638 <__aeabi_dmul>
 800b6d0:	4680      	mov	r8, r0
 800b6d2:	4689      	mov	r9, r1
 800b6d4:	f035 050f 	bics.w	r5, r5, #15
 800b6d8:	d04d      	beq.n	800b776 <_strtod_l+0x516>
 800b6da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b6de:	dd22      	ble.n	800b726 <_strtod_l+0x4c6>
 800b6e0:	2500      	movs	r5, #0
 800b6e2:	46ab      	mov	fp, r5
 800b6e4:	9509      	str	r5, [sp, #36]	; 0x24
 800b6e6:	9505      	str	r5, [sp, #20]
 800b6e8:	2322      	movs	r3, #34	; 0x22
 800b6ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b7f4 <_strtod_l+0x594>
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	f04f 0800 	mov.w	r8, #0
 800b6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f43f aded 	beq.w	800b2d6 <_strtod_l+0x76>
 800b6fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6fe:	4620      	mov	r0, r4
 800b700:	f001 f9de 	bl	800cac0 <_Bfree>
 800b704:	9905      	ldr	r1, [sp, #20]
 800b706:	4620      	mov	r0, r4
 800b708:	f001 f9da 	bl	800cac0 <_Bfree>
 800b70c:	4659      	mov	r1, fp
 800b70e:	4620      	mov	r0, r4
 800b710:	f001 f9d6 	bl	800cac0 <_Bfree>
 800b714:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b716:	4620      	mov	r0, r4
 800b718:	f001 f9d2 	bl	800cac0 <_Bfree>
 800b71c:	4629      	mov	r1, r5
 800b71e:	4620      	mov	r0, r4
 800b720:	f001 f9ce 	bl	800cac0 <_Bfree>
 800b724:	e5d7      	b.n	800b2d6 <_strtod_l+0x76>
 800b726:	4b32      	ldr	r3, [pc, #200]	; (800b7f0 <_strtod_l+0x590>)
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	2300      	movs	r3, #0
 800b72c:	112d      	asrs	r5, r5, #4
 800b72e:	4640      	mov	r0, r8
 800b730:	4649      	mov	r1, r9
 800b732:	469a      	mov	sl, r3
 800b734:	2d01      	cmp	r5, #1
 800b736:	dc21      	bgt.n	800b77c <_strtod_l+0x51c>
 800b738:	b10b      	cbz	r3, 800b73e <_strtod_l+0x4de>
 800b73a:	4680      	mov	r8, r0
 800b73c:	4689      	mov	r9, r1
 800b73e:	492c      	ldr	r1, [pc, #176]	; (800b7f0 <_strtod_l+0x590>)
 800b740:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b744:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b748:	4642      	mov	r2, r8
 800b74a:	464b      	mov	r3, r9
 800b74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b750:	f7f4 ff72 	bl	8000638 <__aeabi_dmul>
 800b754:	4b27      	ldr	r3, [pc, #156]	; (800b7f4 <_strtod_l+0x594>)
 800b756:	460a      	mov	r2, r1
 800b758:	400b      	ands	r3, r1
 800b75a:	4927      	ldr	r1, [pc, #156]	; (800b7f8 <_strtod_l+0x598>)
 800b75c:	428b      	cmp	r3, r1
 800b75e:	4680      	mov	r8, r0
 800b760:	d8be      	bhi.n	800b6e0 <_strtod_l+0x480>
 800b762:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b766:	428b      	cmp	r3, r1
 800b768:	bf86      	itte	hi
 800b76a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b7fc <_strtod_l+0x59c>
 800b76e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b772:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b776:	2300      	movs	r3, #0
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	e07b      	b.n	800b874 <_strtod_l+0x614>
 800b77c:	07ea      	lsls	r2, r5, #31
 800b77e:	d505      	bpl.n	800b78c <_strtod_l+0x52c>
 800b780:	9b04      	ldr	r3, [sp, #16]
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 ff57 	bl	8000638 <__aeabi_dmul>
 800b78a:	2301      	movs	r3, #1
 800b78c:	9a04      	ldr	r2, [sp, #16]
 800b78e:	3208      	adds	r2, #8
 800b790:	f10a 0a01 	add.w	sl, sl, #1
 800b794:	106d      	asrs	r5, r5, #1
 800b796:	9204      	str	r2, [sp, #16]
 800b798:	e7cc      	b.n	800b734 <_strtod_l+0x4d4>
 800b79a:	d0ec      	beq.n	800b776 <_strtod_l+0x516>
 800b79c:	426d      	negs	r5, r5
 800b79e:	f015 020f 	ands.w	r2, r5, #15
 800b7a2:	d00a      	beq.n	800b7ba <_strtod_l+0x55a>
 800b7a4:	4b11      	ldr	r3, [pc, #68]	; (800b7ec <_strtod_l+0x58c>)
 800b7a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f7f5 f86b 	bl	800088c <__aeabi_ddiv>
 800b7b6:	4680      	mov	r8, r0
 800b7b8:	4689      	mov	r9, r1
 800b7ba:	112d      	asrs	r5, r5, #4
 800b7bc:	d0db      	beq.n	800b776 <_strtod_l+0x516>
 800b7be:	2d1f      	cmp	r5, #31
 800b7c0:	dd1e      	ble.n	800b800 <_strtod_l+0x5a0>
 800b7c2:	2500      	movs	r5, #0
 800b7c4:	46ab      	mov	fp, r5
 800b7c6:	9509      	str	r5, [sp, #36]	; 0x24
 800b7c8:	9505      	str	r5, [sp, #20]
 800b7ca:	2322      	movs	r3, #34	; 0x22
 800b7cc:	f04f 0800 	mov.w	r8, #0
 800b7d0:	f04f 0900 	mov.w	r9, #0
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	e78d      	b.n	800b6f4 <_strtod_l+0x494>
 800b7d8:	0800decf 	.word	0x0800decf
 800b7dc:	0800dee8 	.word	0x0800dee8
 800b7e0:	0800dec6 	.word	0x0800dec6
 800b7e4:	0800dec9 	.word	0x0800dec9
 800b7e8:	0800dfdc 	.word	0x0800dfdc
 800b7ec:	0800e0d0 	.word	0x0800e0d0
 800b7f0:	0800e0a8 	.word	0x0800e0a8
 800b7f4:	7ff00000 	.word	0x7ff00000
 800b7f8:	7ca00000 	.word	0x7ca00000
 800b7fc:	7fefffff 	.word	0x7fefffff
 800b800:	f015 0310 	ands.w	r3, r5, #16
 800b804:	bf18      	it	ne
 800b806:	236a      	movne	r3, #106	; 0x6a
 800b808:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bbac <_strtod_l+0x94c>
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	4640      	mov	r0, r8
 800b810:	4649      	mov	r1, r9
 800b812:	2300      	movs	r3, #0
 800b814:	07ea      	lsls	r2, r5, #31
 800b816:	d504      	bpl.n	800b822 <_strtod_l+0x5c2>
 800b818:	e9da 2300 	ldrd	r2, r3, [sl]
 800b81c:	f7f4 ff0c 	bl	8000638 <__aeabi_dmul>
 800b820:	2301      	movs	r3, #1
 800b822:	106d      	asrs	r5, r5, #1
 800b824:	f10a 0a08 	add.w	sl, sl, #8
 800b828:	d1f4      	bne.n	800b814 <_strtod_l+0x5b4>
 800b82a:	b10b      	cbz	r3, 800b830 <_strtod_l+0x5d0>
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	9b04      	ldr	r3, [sp, #16]
 800b832:	b1bb      	cbz	r3, 800b864 <_strtod_l+0x604>
 800b834:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b838:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	4649      	mov	r1, r9
 800b840:	dd10      	ble.n	800b864 <_strtod_l+0x604>
 800b842:	2b1f      	cmp	r3, #31
 800b844:	f340 811e 	ble.w	800ba84 <_strtod_l+0x824>
 800b848:	2b34      	cmp	r3, #52	; 0x34
 800b84a:	bfde      	ittt	le
 800b84c:	f04f 33ff 	movle.w	r3, #4294967295
 800b850:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b854:	4093      	lslle	r3, r2
 800b856:	f04f 0800 	mov.w	r8, #0
 800b85a:	bfcc      	ite	gt
 800b85c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b860:	ea03 0901 	andle.w	r9, r3, r1
 800b864:	2200      	movs	r2, #0
 800b866:	2300      	movs	r3, #0
 800b868:	4640      	mov	r0, r8
 800b86a:	4649      	mov	r1, r9
 800b86c:	f7f5 f94c 	bl	8000b08 <__aeabi_dcmpeq>
 800b870:	2800      	cmp	r0, #0
 800b872:	d1a6      	bne.n	800b7c2 <_strtod_l+0x562>
 800b874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b87a:	4633      	mov	r3, r6
 800b87c:	465a      	mov	r2, fp
 800b87e:	4620      	mov	r0, r4
 800b880:	f001 f986 	bl	800cb90 <__s2b>
 800b884:	9009      	str	r0, [sp, #36]	; 0x24
 800b886:	2800      	cmp	r0, #0
 800b888:	f43f af2a 	beq.w	800b6e0 <_strtod_l+0x480>
 800b88c:	9a08      	ldr	r2, [sp, #32]
 800b88e:	9b05      	ldr	r3, [sp, #20]
 800b890:	2a00      	cmp	r2, #0
 800b892:	eba3 0307 	sub.w	r3, r3, r7
 800b896:	bfa8      	it	ge
 800b898:	2300      	movge	r3, #0
 800b89a:	930c      	str	r3, [sp, #48]	; 0x30
 800b89c:	2500      	movs	r5, #0
 800b89e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b8a2:	9312      	str	r3, [sp, #72]	; 0x48
 800b8a4:	46ab      	mov	fp, r5
 800b8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	6859      	ldr	r1, [r3, #4]
 800b8ac:	f001 f8c8 	bl	800ca40 <_Balloc>
 800b8b0:	9005      	str	r0, [sp, #20]
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	f43f af18 	beq.w	800b6e8 <_strtod_l+0x488>
 800b8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ba:	691a      	ldr	r2, [r3, #16]
 800b8bc:	3202      	adds	r2, #2
 800b8be:	f103 010c 	add.w	r1, r3, #12
 800b8c2:	0092      	lsls	r2, r2, #2
 800b8c4:	300c      	adds	r0, #12
 800b8c6:	f000 fcce 	bl	800c266 <memcpy>
 800b8ca:	ec49 8b10 	vmov	d0, r8, r9
 800b8ce:	aa18      	add	r2, sp, #96	; 0x60
 800b8d0:	a917      	add	r1, sp, #92	; 0x5c
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f001 fc90 	bl	800d1f8 <__d2b>
 800b8d8:	ec49 8b18 	vmov	d8, r8, r9
 800b8dc:	9016      	str	r0, [sp, #88]	; 0x58
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f43f af02 	beq.w	800b6e8 <_strtod_l+0x488>
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f001 f9ea 	bl	800ccc0 <__i2b>
 800b8ec:	4683      	mov	fp, r0
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	f43f aefa 	beq.w	800b6e8 <_strtod_l+0x488>
 800b8f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b8f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8f8:	2e00      	cmp	r6, #0
 800b8fa:	bfab      	itete	ge
 800b8fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b8fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b900:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b902:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b906:	bfac      	ite	ge
 800b908:	eb06 0a03 	addge.w	sl, r6, r3
 800b90c:	1b9f      	sublt	r7, r3, r6
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	1af6      	subs	r6, r6, r3
 800b912:	4416      	add	r6, r2
 800b914:	4ba0      	ldr	r3, [pc, #640]	; (800bb98 <_strtod_l+0x938>)
 800b916:	3e01      	subs	r6, #1
 800b918:	429e      	cmp	r6, r3
 800b91a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b91e:	f280 80c4 	bge.w	800baaa <_strtod_l+0x84a>
 800b922:	1b9b      	subs	r3, r3, r6
 800b924:	2b1f      	cmp	r3, #31
 800b926:	eba2 0203 	sub.w	r2, r2, r3
 800b92a:	f04f 0101 	mov.w	r1, #1
 800b92e:	f300 80b0 	bgt.w	800ba92 <_strtod_l+0x832>
 800b932:	fa01 f303 	lsl.w	r3, r1, r3
 800b936:	930e      	str	r3, [sp, #56]	; 0x38
 800b938:	2300      	movs	r3, #0
 800b93a:	930d      	str	r3, [sp, #52]	; 0x34
 800b93c:	eb0a 0602 	add.w	r6, sl, r2
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	45b2      	cmp	sl, r6
 800b944:	4417      	add	r7, r2
 800b946:	441f      	add	r7, r3
 800b948:	4653      	mov	r3, sl
 800b94a:	bfa8      	it	ge
 800b94c:	4633      	movge	r3, r6
 800b94e:	42bb      	cmp	r3, r7
 800b950:	bfa8      	it	ge
 800b952:	463b      	movge	r3, r7
 800b954:	2b00      	cmp	r3, #0
 800b956:	bfc2      	ittt	gt
 800b958:	1af6      	subgt	r6, r6, r3
 800b95a:	1aff      	subgt	r7, r7, r3
 800b95c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b962:	2b00      	cmp	r3, #0
 800b964:	dd17      	ble.n	800b996 <_strtod_l+0x736>
 800b966:	4659      	mov	r1, fp
 800b968:	461a      	mov	r2, r3
 800b96a:	4620      	mov	r0, r4
 800b96c:	f001 fa68 	bl	800ce40 <__pow5mult>
 800b970:	4683      	mov	fp, r0
 800b972:	2800      	cmp	r0, #0
 800b974:	f43f aeb8 	beq.w	800b6e8 <_strtod_l+0x488>
 800b978:	4601      	mov	r1, r0
 800b97a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b97c:	4620      	mov	r0, r4
 800b97e:	f001 f9b5 	bl	800ccec <__multiply>
 800b982:	900b      	str	r0, [sp, #44]	; 0x2c
 800b984:	2800      	cmp	r0, #0
 800b986:	f43f aeaf 	beq.w	800b6e8 <_strtod_l+0x488>
 800b98a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b98c:	4620      	mov	r0, r4
 800b98e:	f001 f897 	bl	800cac0 <_Bfree>
 800b992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b994:	9316      	str	r3, [sp, #88]	; 0x58
 800b996:	2e00      	cmp	r6, #0
 800b998:	f300 808c 	bgt.w	800bab4 <_strtod_l+0x854>
 800b99c:	9b08      	ldr	r3, [sp, #32]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dd08      	ble.n	800b9b4 <_strtod_l+0x754>
 800b9a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9a4:	9905      	ldr	r1, [sp, #20]
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f001 fa4a 	bl	800ce40 <__pow5mult>
 800b9ac:	9005      	str	r0, [sp, #20]
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	f43f ae9a 	beq.w	800b6e8 <_strtod_l+0x488>
 800b9b4:	2f00      	cmp	r7, #0
 800b9b6:	dd08      	ble.n	800b9ca <_strtod_l+0x76a>
 800b9b8:	9905      	ldr	r1, [sp, #20]
 800b9ba:	463a      	mov	r2, r7
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f001 fa99 	bl	800cef4 <__lshift>
 800b9c2:	9005      	str	r0, [sp, #20]
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	f43f ae8f 	beq.w	800b6e8 <_strtod_l+0x488>
 800b9ca:	f1ba 0f00 	cmp.w	sl, #0
 800b9ce:	dd08      	ble.n	800b9e2 <_strtod_l+0x782>
 800b9d0:	4659      	mov	r1, fp
 800b9d2:	4652      	mov	r2, sl
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f001 fa8d 	bl	800cef4 <__lshift>
 800b9da:	4683      	mov	fp, r0
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	f43f ae83 	beq.w	800b6e8 <_strtod_l+0x488>
 800b9e2:	9a05      	ldr	r2, [sp, #20]
 800b9e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f001 fb0c 	bl	800d004 <__mdiff>
 800b9ec:	4605      	mov	r5, r0
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f43f ae7a 	beq.w	800b6e8 <_strtod_l+0x488>
 800b9f4:	68c3      	ldr	r3, [r0, #12]
 800b9f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60c3      	str	r3, [r0, #12]
 800b9fc:	4659      	mov	r1, fp
 800b9fe:	f001 fae5 	bl	800cfcc <__mcmp>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	da60      	bge.n	800bac8 <_strtod_l+0x868>
 800ba06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba08:	ea53 0308 	orrs.w	r3, r3, r8
 800ba0c:	f040 8084 	bne.w	800bb18 <_strtod_l+0x8b8>
 800ba10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d17f      	bne.n	800bb18 <_strtod_l+0x8b8>
 800ba18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba1c:	0d1b      	lsrs	r3, r3, #20
 800ba1e:	051b      	lsls	r3, r3, #20
 800ba20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ba24:	d978      	bls.n	800bb18 <_strtod_l+0x8b8>
 800ba26:	696b      	ldr	r3, [r5, #20]
 800ba28:	b913      	cbnz	r3, 800ba30 <_strtod_l+0x7d0>
 800ba2a:	692b      	ldr	r3, [r5, #16]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	dd73      	ble.n	800bb18 <_strtod_l+0x8b8>
 800ba30:	4629      	mov	r1, r5
 800ba32:	2201      	movs	r2, #1
 800ba34:	4620      	mov	r0, r4
 800ba36:	f001 fa5d 	bl	800cef4 <__lshift>
 800ba3a:	4659      	mov	r1, fp
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	f001 fac5 	bl	800cfcc <__mcmp>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	dd68      	ble.n	800bb18 <_strtod_l+0x8b8>
 800ba46:	9904      	ldr	r1, [sp, #16]
 800ba48:	4a54      	ldr	r2, [pc, #336]	; (800bb9c <_strtod_l+0x93c>)
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	f000 8084 	beq.w	800bb5a <_strtod_l+0x8fa>
 800ba52:	ea02 0109 	and.w	r1, r2, r9
 800ba56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba5a:	dc7e      	bgt.n	800bb5a <_strtod_l+0x8fa>
 800ba5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba60:	f77f aeb3 	ble.w	800b7ca <_strtod_l+0x56a>
 800ba64:	4b4e      	ldr	r3, [pc, #312]	; (800bba0 <_strtod_l+0x940>)
 800ba66:	4640      	mov	r0, r8
 800ba68:	4649      	mov	r1, r9
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f7f4 fde4 	bl	8000638 <__aeabi_dmul>
 800ba70:	4b4a      	ldr	r3, [pc, #296]	; (800bb9c <_strtod_l+0x93c>)
 800ba72:	400b      	ands	r3, r1
 800ba74:	4680      	mov	r8, r0
 800ba76:	4689      	mov	r9, r1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f47f ae3f 	bne.w	800b6fc <_strtod_l+0x49c>
 800ba7e:	2322      	movs	r3, #34	; 0x22
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	e63b      	b.n	800b6fc <_strtod_l+0x49c>
 800ba84:	f04f 32ff 	mov.w	r2, #4294967295
 800ba88:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8c:	ea03 0808 	and.w	r8, r3, r8
 800ba90:	e6e8      	b.n	800b864 <_strtod_l+0x604>
 800ba92:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ba96:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ba9a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ba9e:	36e2      	adds	r6, #226	; 0xe2
 800baa0:	fa01 f306 	lsl.w	r3, r1, r6
 800baa4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800baa8:	e748      	b.n	800b93c <_strtod_l+0x6dc>
 800baaa:	2100      	movs	r1, #0
 800baac:	2301      	movs	r3, #1
 800baae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bab2:	e743      	b.n	800b93c <_strtod_l+0x6dc>
 800bab4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bab6:	4632      	mov	r2, r6
 800bab8:	4620      	mov	r0, r4
 800baba:	f001 fa1b 	bl	800cef4 <__lshift>
 800babe:	9016      	str	r0, [sp, #88]	; 0x58
 800bac0:	2800      	cmp	r0, #0
 800bac2:	f47f af6b 	bne.w	800b99c <_strtod_l+0x73c>
 800bac6:	e60f      	b.n	800b6e8 <_strtod_l+0x488>
 800bac8:	46ca      	mov	sl, r9
 800baca:	d171      	bne.n	800bbb0 <_strtod_l+0x950>
 800bacc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bace:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bad2:	b352      	cbz	r2, 800bb2a <_strtod_l+0x8ca>
 800bad4:	4a33      	ldr	r2, [pc, #204]	; (800bba4 <_strtod_l+0x944>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d12a      	bne.n	800bb30 <_strtod_l+0x8d0>
 800bada:	9b04      	ldr	r3, [sp, #16]
 800badc:	4641      	mov	r1, r8
 800bade:	b1fb      	cbz	r3, 800bb20 <_strtod_l+0x8c0>
 800bae0:	4b2e      	ldr	r3, [pc, #184]	; (800bb9c <_strtod_l+0x93c>)
 800bae2:	ea09 0303 	and.w	r3, r9, r3
 800bae6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800baea:	f04f 32ff 	mov.w	r2, #4294967295
 800baee:	d81a      	bhi.n	800bb26 <_strtod_l+0x8c6>
 800baf0:	0d1b      	lsrs	r3, r3, #20
 800baf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800baf6:	fa02 f303 	lsl.w	r3, r2, r3
 800bafa:	4299      	cmp	r1, r3
 800bafc:	d118      	bne.n	800bb30 <_strtod_l+0x8d0>
 800bafe:	4b2a      	ldr	r3, [pc, #168]	; (800bba8 <_strtod_l+0x948>)
 800bb00:	459a      	cmp	sl, r3
 800bb02:	d102      	bne.n	800bb0a <_strtod_l+0x8aa>
 800bb04:	3101      	adds	r1, #1
 800bb06:	f43f adef 	beq.w	800b6e8 <_strtod_l+0x488>
 800bb0a:	4b24      	ldr	r3, [pc, #144]	; (800bb9c <_strtod_l+0x93c>)
 800bb0c:	ea0a 0303 	and.w	r3, sl, r3
 800bb10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bb14:	f04f 0800 	mov.w	r8, #0
 800bb18:	9b04      	ldr	r3, [sp, #16]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1a2      	bne.n	800ba64 <_strtod_l+0x804>
 800bb1e:	e5ed      	b.n	800b6fc <_strtod_l+0x49c>
 800bb20:	f04f 33ff 	mov.w	r3, #4294967295
 800bb24:	e7e9      	b.n	800bafa <_strtod_l+0x89a>
 800bb26:	4613      	mov	r3, r2
 800bb28:	e7e7      	b.n	800bafa <_strtod_l+0x89a>
 800bb2a:	ea53 0308 	orrs.w	r3, r3, r8
 800bb2e:	d08a      	beq.n	800ba46 <_strtod_l+0x7e6>
 800bb30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb32:	b1e3      	cbz	r3, 800bb6e <_strtod_l+0x90e>
 800bb34:	ea13 0f0a 	tst.w	r3, sl
 800bb38:	d0ee      	beq.n	800bb18 <_strtod_l+0x8b8>
 800bb3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb3c:	9a04      	ldr	r2, [sp, #16]
 800bb3e:	4640      	mov	r0, r8
 800bb40:	4649      	mov	r1, r9
 800bb42:	b1c3      	cbz	r3, 800bb76 <_strtod_l+0x916>
 800bb44:	f7ff fb70 	bl	800b228 <sulp>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	ec51 0b18 	vmov	r0, r1, d8
 800bb50:	f7f4 fbbc 	bl	80002cc <__adddf3>
 800bb54:	4680      	mov	r8, r0
 800bb56:	4689      	mov	r9, r1
 800bb58:	e7de      	b.n	800bb18 <_strtod_l+0x8b8>
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bb64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bb68:	f04f 38ff 	mov.w	r8, #4294967295
 800bb6c:	e7d4      	b.n	800bb18 <_strtod_l+0x8b8>
 800bb6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb70:	ea13 0f08 	tst.w	r3, r8
 800bb74:	e7e0      	b.n	800bb38 <_strtod_l+0x8d8>
 800bb76:	f7ff fb57 	bl	800b228 <sulp>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	ec51 0b18 	vmov	r0, r1, d8
 800bb82:	f7f4 fba1 	bl	80002c8 <__aeabi_dsub>
 800bb86:	2200      	movs	r2, #0
 800bb88:	2300      	movs	r3, #0
 800bb8a:	4680      	mov	r8, r0
 800bb8c:	4689      	mov	r9, r1
 800bb8e:	f7f4 ffbb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d0c0      	beq.n	800bb18 <_strtod_l+0x8b8>
 800bb96:	e618      	b.n	800b7ca <_strtod_l+0x56a>
 800bb98:	fffffc02 	.word	0xfffffc02
 800bb9c:	7ff00000 	.word	0x7ff00000
 800bba0:	39500000 	.word	0x39500000
 800bba4:	000fffff 	.word	0x000fffff
 800bba8:	7fefffff 	.word	0x7fefffff
 800bbac:	0800df00 	.word	0x0800df00
 800bbb0:	4659      	mov	r1, fp
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f001 fb7a 	bl	800d2ac <__ratio>
 800bbb8:	ec57 6b10 	vmov	r6, r7, d0
 800bbbc:	ee10 0a10 	vmov	r0, s0
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	f7f4 ffb2 	bl	8000b30 <__aeabi_dcmple>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d071      	beq.n	800bcb4 <_strtod_l+0xa54>
 800bbd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d17c      	bne.n	800bcd0 <_strtod_l+0xa70>
 800bbd6:	f1b8 0f00 	cmp.w	r8, #0
 800bbda:	d15a      	bne.n	800bc92 <_strtod_l+0xa32>
 800bbdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d15d      	bne.n	800bca0 <_strtod_l+0xa40>
 800bbe4:	4b90      	ldr	r3, [pc, #576]	; (800be28 <_strtod_l+0xbc8>)
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	4630      	mov	r0, r6
 800bbea:	4639      	mov	r1, r7
 800bbec:	f7f4 ff96 	bl	8000b1c <__aeabi_dcmplt>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d15c      	bne.n	800bcae <_strtod_l+0xa4e>
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	4b8c      	ldr	r3, [pc, #560]	; (800be2c <_strtod_l+0xbcc>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f7f4 fd1c 	bl	8000638 <__aeabi_dmul>
 800bc00:	4606      	mov	r6, r0
 800bc02:	460f      	mov	r7, r1
 800bc04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bc08:	9606      	str	r6, [sp, #24]
 800bc0a:	9307      	str	r3, [sp, #28]
 800bc0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bc14:	4b86      	ldr	r3, [pc, #536]	; (800be30 <_strtod_l+0xbd0>)
 800bc16:	ea0a 0303 	and.w	r3, sl, r3
 800bc1a:	930d      	str	r3, [sp, #52]	; 0x34
 800bc1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc1e:	4b85      	ldr	r3, [pc, #532]	; (800be34 <_strtod_l+0xbd4>)
 800bc20:	429a      	cmp	r2, r3
 800bc22:	f040 8090 	bne.w	800bd46 <_strtod_l+0xae6>
 800bc26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bc2a:	ec49 8b10 	vmov	d0, r8, r9
 800bc2e:	f001 fa73 	bl	800d118 <__ulp>
 800bc32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc36:	ec51 0b10 	vmov	r0, r1, d0
 800bc3a:	f7f4 fcfd 	bl	8000638 <__aeabi_dmul>
 800bc3e:	4642      	mov	r2, r8
 800bc40:	464b      	mov	r3, r9
 800bc42:	f7f4 fb43 	bl	80002cc <__adddf3>
 800bc46:	460b      	mov	r3, r1
 800bc48:	4979      	ldr	r1, [pc, #484]	; (800be30 <_strtod_l+0xbd0>)
 800bc4a:	4a7b      	ldr	r2, [pc, #492]	; (800be38 <_strtod_l+0xbd8>)
 800bc4c:	4019      	ands	r1, r3
 800bc4e:	4291      	cmp	r1, r2
 800bc50:	4680      	mov	r8, r0
 800bc52:	d944      	bls.n	800bcde <_strtod_l+0xa7e>
 800bc54:	ee18 2a90 	vmov	r2, s17
 800bc58:	4b78      	ldr	r3, [pc, #480]	; (800be3c <_strtod_l+0xbdc>)
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d104      	bne.n	800bc68 <_strtod_l+0xa08>
 800bc5e:	ee18 3a10 	vmov	r3, s16
 800bc62:	3301      	adds	r3, #1
 800bc64:	f43f ad40 	beq.w	800b6e8 <_strtod_l+0x488>
 800bc68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800be3c <_strtod_l+0xbdc>
 800bc6c:	f04f 38ff 	mov.w	r8, #4294967295
 800bc70:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 ff24 	bl	800cac0 <_Bfree>
 800bc78:	9905      	ldr	r1, [sp, #20]
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 ff20 	bl	800cac0 <_Bfree>
 800bc80:	4659      	mov	r1, fp
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 ff1c 	bl	800cac0 <_Bfree>
 800bc88:	4629      	mov	r1, r5
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 ff18 	bl	800cac0 <_Bfree>
 800bc90:	e609      	b.n	800b8a6 <_strtod_l+0x646>
 800bc92:	f1b8 0f01 	cmp.w	r8, #1
 800bc96:	d103      	bne.n	800bca0 <_strtod_l+0xa40>
 800bc98:	f1b9 0f00 	cmp.w	r9, #0
 800bc9c:	f43f ad95 	beq.w	800b7ca <_strtod_l+0x56a>
 800bca0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bdf8 <_strtod_l+0xb98>
 800bca4:	4f60      	ldr	r7, [pc, #384]	; (800be28 <_strtod_l+0xbc8>)
 800bca6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcaa:	2600      	movs	r6, #0
 800bcac:	e7ae      	b.n	800bc0c <_strtod_l+0x9ac>
 800bcae:	4f5f      	ldr	r7, [pc, #380]	; (800be2c <_strtod_l+0xbcc>)
 800bcb0:	2600      	movs	r6, #0
 800bcb2:	e7a7      	b.n	800bc04 <_strtod_l+0x9a4>
 800bcb4:	4b5d      	ldr	r3, [pc, #372]	; (800be2c <_strtod_l+0xbcc>)
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4639      	mov	r1, r7
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f7f4 fcbc 	bl	8000638 <__aeabi_dmul>
 800bcc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	460f      	mov	r7, r1
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d09c      	beq.n	800bc04 <_strtod_l+0x9a4>
 800bcca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bcce:	e79d      	b.n	800bc0c <_strtod_l+0x9ac>
 800bcd0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800be00 <_strtod_l+0xba0>
 800bcd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcd8:	ec57 6b17 	vmov	r6, r7, d7
 800bcdc:	e796      	b.n	800bc0c <_strtod_l+0x9ac>
 800bcde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bce2:	9b04      	ldr	r3, [sp, #16]
 800bce4:	46ca      	mov	sl, r9
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1c2      	bne.n	800bc70 <_strtod_l+0xa10>
 800bcea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bcee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcf0:	0d1b      	lsrs	r3, r3, #20
 800bcf2:	051b      	lsls	r3, r3, #20
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d1bb      	bne.n	800bc70 <_strtod_l+0xa10>
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	f7f4 ffa6 	bl	8000c4c <__aeabi_d2lz>
 800bd00:	f7f4 fc6c 	bl	80005dc <__aeabi_l2d>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	4630      	mov	r0, r6
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	f7f4 fadc 	bl	80002c8 <__aeabi_dsub>
 800bd10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd16:	ea43 0308 	orr.w	r3, r3, r8
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	460f      	mov	r7, r1
 800bd20:	d054      	beq.n	800bdcc <_strtod_l+0xb6c>
 800bd22:	a339      	add	r3, pc, #228	; (adr r3, 800be08 <_strtod_l+0xba8>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fef8 	bl	8000b1c <__aeabi_dcmplt>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f47f ace5 	bne.w	800b6fc <_strtod_l+0x49c>
 800bd32:	a337      	add	r3, pc, #220	; (adr r3, 800be10 <_strtod_l+0xbb0>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	4630      	mov	r0, r6
 800bd3a:	4639      	mov	r1, r7
 800bd3c:	f7f4 ff0c 	bl	8000b58 <__aeabi_dcmpgt>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d095      	beq.n	800bc70 <_strtod_l+0xa10>
 800bd44:	e4da      	b.n	800b6fc <_strtod_l+0x49c>
 800bd46:	9b04      	ldr	r3, [sp, #16]
 800bd48:	b333      	cbz	r3, 800bd98 <_strtod_l+0xb38>
 800bd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd50:	d822      	bhi.n	800bd98 <_strtod_l+0xb38>
 800bd52:	a331      	add	r3, pc, #196	; (adr r3, 800be18 <_strtod_l+0xbb8>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	f7f4 fee8 	bl	8000b30 <__aeabi_dcmple>
 800bd60:	b1a0      	cbz	r0, 800bd8c <_strtod_l+0xb2c>
 800bd62:	4639      	mov	r1, r7
 800bd64:	4630      	mov	r0, r6
 800bd66:	f7f4 ff01 	bl	8000b6c <__aeabi_d2uiz>
 800bd6a:	2801      	cmp	r0, #1
 800bd6c:	bf38      	it	cc
 800bd6e:	2001      	movcc	r0, #1
 800bd70:	f7f4 fbe8 	bl	8000544 <__aeabi_ui2d>
 800bd74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd76:	4606      	mov	r6, r0
 800bd78:	460f      	mov	r7, r1
 800bd7a:	bb23      	cbnz	r3, 800bdc6 <_strtod_l+0xb66>
 800bd7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd80:	9010      	str	r0, [sp, #64]	; 0x40
 800bd82:	9311      	str	r3, [sp, #68]	; 0x44
 800bd84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bd8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bd9c:	eeb0 0a48 	vmov.f32	s0, s16
 800bda0:	eef0 0a68 	vmov.f32	s1, s17
 800bda4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bda8:	f001 f9b6 	bl	800d118 <__ulp>
 800bdac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bdb0:	ec53 2b10 	vmov	r2, r3, d0
 800bdb4:	f7f4 fc40 	bl	8000638 <__aeabi_dmul>
 800bdb8:	ec53 2b18 	vmov	r2, r3, d8
 800bdbc:	f7f4 fa86 	bl	80002cc <__adddf3>
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	4689      	mov	r9, r1
 800bdc4:	e78d      	b.n	800bce2 <_strtod_l+0xa82>
 800bdc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bdca:	e7db      	b.n	800bd84 <_strtod_l+0xb24>
 800bdcc:	a314      	add	r3, pc, #80	; (adr r3, 800be20 <_strtod_l+0xbc0>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 fea3 	bl	8000b1c <__aeabi_dcmplt>
 800bdd6:	e7b3      	b.n	800bd40 <_strtod_l+0xae0>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	930a      	str	r3, [sp, #40]	; 0x28
 800bddc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bdde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	f7ff ba7c 	b.w	800b2de <_strtod_l+0x7e>
 800bde6:	2a65      	cmp	r2, #101	; 0x65
 800bde8:	f43f ab75 	beq.w	800b4d6 <_strtod_l+0x276>
 800bdec:	2a45      	cmp	r2, #69	; 0x45
 800bdee:	f43f ab72 	beq.w	800b4d6 <_strtod_l+0x276>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f7ff bbaa 	b.w	800b54c <_strtod_l+0x2ec>
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	bff00000 	.word	0xbff00000
 800be00:	00000000 	.word	0x00000000
 800be04:	3ff00000 	.word	0x3ff00000
 800be08:	94a03595 	.word	0x94a03595
 800be0c:	3fdfffff 	.word	0x3fdfffff
 800be10:	35afe535 	.word	0x35afe535
 800be14:	3fe00000 	.word	0x3fe00000
 800be18:	ffc00000 	.word	0xffc00000
 800be1c:	41dfffff 	.word	0x41dfffff
 800be20:	94a03595 	.word	0x94a03595
 800be24:	3fcfffff 	.word	0x3fcfffff
 800be28:	3ff00000 	.word	0x3ff00000
 800be2c:	3fe00000 	.word	0x3fe00000
 800be30:	7ff00000 	.word	0x7ff00000
 800be34:	7fe00000 	.word	0x7fe00000
 800be38:	7c9fffff 	.word	0x7c9fffff
 800be3c:	7fefffff 	.word	0x7fefffff

0800be40 <strtod>:
 800be40:	460a      	mov	r2, r1
 800be42:	4601      	mov	r1, r0
 800be44:	4802      	ldr	r0, [pc, #8]	; (800be50 <strtod+0x10>)
 800be46:	4b03      	ldr	r3, [pc, #12]	; (800be54 <strtod+0x14>)
 800be48:	6800      	ldr	r0, [r0, #0]
 800be4a:	f7ff ba09 	b.w	800b260 <_strtod_l>
 800be4e:	bf00      	nop
 800be50:	200001ec 	.word	0x200001ec
 800be54:	20000034 	.word	0x20000034

0800be58 <std>:
 800be58:	2300      	movs	r3, #0
 800be5a:	b510      	push	{r4, lr}
 800be5c:	4604      	mov	r4, r0
 800be5e:	e9c0 3300 	strd	r3, r3, [r0]
 800be62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be66:	6083      	str	r3, [r0, #8]
 800be68:	8181      	strh	r1, [r0, #12]
 800be6a:	6643      	str	r3, [r0, #100]	; 0x64
 800be6c:	81c2      	strh	r2, [r0, #14]
 800be6e:	6183      	str	r3, [r0, #24]
 800be70:	4619      	mov	r1, r3
 800be72:	2208      	movs	r2, #8
 800be74:	305c      	adds	r0, #92	; 0x5c
 800be76:	f000 f8f4 	bl	800c062 <memset>
 800be7a:	4b0d      	ldr	r3, [pc, #52]	; (800beb0 <std+0x58>)
 800be7c:	6263      	str	r3, [r4, #36]	; 0x24
 800be7e:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <std+0x5c>)
 800be80:	62a3      	str	r3, [r4, #40]	; 0x28
 800be82:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <std+0x60>)
 800be84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be86:	4b0d      	ldr	r3, [pc, #52]	; (800bebc <std+0x64>)
 800be88:	6323      	str	r3, [r4, #48]	; 0x30
 800be8a:	4b0d      	ldr	r3, [pc, #52]	; (800bec0 <std+0x68>)
 800be8c:	6224      	str	r4, [r4, #32]
 800be8e:	429c      	cmp	r4, r3
 800be90:	d006      	beq.n	800bea0 <std+0x48>
 800be92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800be96:	4294      	cmp	r4, r2
 800be98:	d002      	beq.n	800bea0 <std+0x48>
 800be9a:	33d0      	adds	r3, #208	; 0xd0
 800be9c:	429c      	cmp	r4, r3
 800be9e:	d105      	bne.n	800beac <std+0x54>
 800bea0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bea8:	f000 b9d2 	b.w	800c250 <__retarget_lock_init_recursive>
 800beac:	bd10      	pop	{r4, pc}
 800beae:	bf00      	nop
 800beb0:	0800bfdd 	.word	0x0800bfdd
 800beb4:	0800bfff 	.word	0x0800bfff
 800beb8:	0800c037 	.word	0x0800c037
 800bebc:	0800c05b 	.word	0x0800c05b
 800bec0:	20003558 	.word	0x20003558

0800bec4 <stdio_exit_handler>:
 800bec4:	4a02      	ldr	r2, [pc, #8]	; (800bed0 <stdio_exit_handler+0xc>)
 800bec6:	4903      	ldr	r1, [pc, #12]	; (800bed4 <stdio_exit_handler+0x10>)
 800bec8:	4803      	ldr	r0, [pc, #12]	; (800bed8 <stdio_exit_handler+0x14>)
 800beca:	f000 b869 	b.w	800bfa0 <_fwalk_sglue>
 800bece:	bf00      	nop
 800bed0:	20000028 	.word	0x20000028
 800bed4:	0800d4c1 	.word	0x0800d4c1
 800bed8:	200001a0 	.word	0x200001a0

0800bedc <cleanup_stdio>:
 800bedc:	6841      	ldr	r1, [r0, #4]
 800bede:	4b0c      	ldr	r3, [pc, #48]	; (800bf10 <cleanup_stdio+0x34>)
 800bee0:	4299      	cmp	r1, r3
 800bee2:	b510      	push	{r4, lr}
 800bee4:	4604      	mov	r4, r0
 800bee6:	d001      	beq.n	800beec <cleanup_stdio+0x10>
 800bee8:	f001 faea 	bl	800d4c0 <_fflush_r>
 800beec:	68a1      	ldr	r1, [r4, #8]
 800beee:	4b09      	ldr	r3, [pc, #36]	; (800bf14 <cleanup_stdio+0x38>)
 800bef0:	4299      	cmp	r1, r3
 800bef2:	d002      	beq.n	800befa <cleanup_stdio+0x1e>
 800bef4:	4620      	mov	r0, r4
 800bef6:	f001 fae3 	bl	800d4c0 <_fflush_r>
 800befa:	68e1      	ldr	r1, [r4, #12]
 800befc:	4b06      	ldr	r3, [pc, #24]	; (800bf18 <cleanup_stdio+0x3c>)
 800befe:	4299      	cmp	r1, r3
 800bf00:	d004      	beq.n	800bf0c <cleanup_stdio+0x30>
 800bf02:	4620      	mov	r0, r4
 800bf04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf08:	f001 bada 	b.w	800d4c0 <_fflush_r>
 800bf0c:	bd10      	pop	{r4, pc}
 800bf0e:	bf00      	nop
 800bf10:	20003558 	.word	0x20003558
 800bf14:	200035c0 	.word	0x200035c0
 800bf18:	20003628 	.word	0x20003628

0800bf1c <global_stdio_init.part.0>:
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <global_stdio_init.part.0+0x30>)
 800bf20:	4c0b      	ldr	r4, [pc, #44]	; (800bf50 <global_stdio_init.part.0+0x34>)
 800bf22:	4a0c      	ldr	r2, [pc, #48]	; (800bf54 <global_stdio_init.part.0+0x38>)
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	4620      	mov	r0, r4
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2104      	movs	r1, #4
 800bf2c:	f7ff ff94 	bl	800be58 <std>
 800bf30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bf34:	2201      	movs	r2, #1
 800bf36:	2109      	movs	r1, #9
 800bf38:	f7ff ff8e 	bl	800be58 <std>
 800bf3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bf40:	2202      	movs	r2, #2
 800bf42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf46:	2112      	movs	r1, #18
 800bf48:	f7ff bf86 	b.w	800be58 <std>
 800bf4c:	20003690 	.word	0x20003690
 800bf50:	20003558 	.word	0x20003558
 800bf54:	0800bec5 	.word	0x0800bec5

0800bf58 <__sfp_lock_acquire>:
 800bf58:	4801      	ldr	r0, [pc, #4]	; (800bf60 <__sfp_lock_acquire+0x8>)
 800bf5a:	f000 b97a 	b.w	800c252 <__retarget_lock_acquire_recursive>
 800bf5e:	bf00      	nop
 800bf60:	20003699 	.word	0x20003699

0800bf64 <__sfp_lock_release>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__sfp_lock_release+0x8>)
 800bf66:	f000 b975 	b.w	800c254 <__retarget_lock_release_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20003699 	.word	0x20003699

0800bf70 <__sinit>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	4604      	mov	r4, r0
 800bf74:	f7ff fff0 	bl	800bf58 <__sfp_lock_acquire>
 800bf78:	6a23      	ldr	r3, [r4, #32]
 800bf7a:	b11b      	cbz	r3, 800bf84 <__sinit+0x14>
 800bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf80:	f7ff bff0 	b.w	800bf64 <__sfp_lock_release>
 800bf84:	4b04      	ldr	r3, [pc, #16]	; (800bf98 <__sinit+0x28>)
 800bf86:	6223      	str	r3, [r4, #32]
 800bf88:	4b04      	ldr	r3, [pc, #16]	; (800bf9c <__sinit+0x2c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1f5      	bne.n	800bf7c <__sinit+0xc>
 800bf90:	f7ff ffc4 	bl	800bf1c <global_stdio_init.part.0>
 800bf94:	e7f2      	b.n	800bf7c <__sinit+0xc>
 800bf96:	bf00      	nop
 800bf98:	0800bedd 	.word	0x0800bedd
 800bf9c:	20003690 	.word	0x20003690

0800bfa0 <_fwalk_sglue>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	4607      	mov	r7, r0
 800bfa6:	4688      	mov	r8, r1
 800bfa8:	4614      	mov	r4, r2
 800bfaa:	2600      	movs	r6, #0
 800bfac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfb0:	f1b9 0901 	subs.w	r9, r9, #1
 800bfb4:	d505      	bpl.n	800bfc2 <_fwalk_sglue+0x22>
 800bfb6:	6824      	ldr	r4, [r4, #0]
 800bfb8:	2c00      	cmp	r4, #0
 800bfba:	d1f7      	bne.n	800bfac <_fwalk_sglue+0xc>
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc2:	89ab      	ldrh	r3, [r5, #12]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d907      	bls.n	800bfd8 <_fwalk_sglue+0x38>
 800bfc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	d003      	beq.n	800bfd8 <_fwalk_sglue+0x38>
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	47c0      	blx	r8
 800bfd6:	4306      	orrs	r6, r0
 800bfd8:	3568      	adds	r5, #104	; 0x68
 800bfda:	e7e9      	b.n	800bfb0 <_fwalk_sglue+0x10>

0800bfdc <__sread>:
 800bfdc:	b510      	push	{r4, lr}
 800bfde:	460c      	mov	r4, r1
 800bfe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe4:	f000 f8d6 	bl	800c194 <_read_r>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	bfab      	itete	ge
 800bfec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfee:	89a3      	ldrhlt	r3, [r4, #12]
 800bff0:	181b      	addge	r3, r3, r0
 800bff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bff6:	bfac      	ite	ge
 800bff8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bffa:	81a3      	strhlt	r3, [r4, #12]
 800bffc:	bd10      	pop	{r4, pc}

0800bffe <__swrite>:
 800bffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c002:	461f      	mov	r7, r3
 800c004:	898b      	ldrh	r3, [r1, #12]
 800c006:	05db      	lsls	r3, r3, #23
 800c008:	4605      	mov	r5, r0
 800c00a:	460c      	mov	r4, r1
 800c00c:	4616      	mov	r6, r2
 800c00e:	d505      	bpl.n	800c01c <__swrite+0x1e>
 800c010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c014:	2302      	movs	r3, #2
 800c016:	2200      	movs	r2, #0
 800c018:	f000 f8aa 	bl	800c170 <_lseek_r>
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c026:	81a3      	strh	r3, [r4, #12]
 800c028:	4632      	mov	r2, r6
 800c02a:	463b      	mov	r3, r7
 800c02c:	4628      	mov	r0, r5
 800c02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c032:	f000 b8d1 	b.w	800c1d8 <_write_r>

0800c036 <__sseek>:
 800c036:	b510      	push	{r4, lr}
 800c038:	460c      	mov	r4, r1
 800c03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c03e:	f000 f897 	bl	800c170 <_lseek_r>
 800c042:	1c43      	adds	r3, r0, #1
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	bf15      	itete	ne
 800c048:	6560      	strne	r0, [r4, #84]	; 0x54
 800c04a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c04e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c052:	81a3      	strheq	r3, [r4, #12]
 800c054:	bf18      	it	ne
 800c056:	81a3      	strhne	r3, [r4, #12]
 800c058:	bd10      	pop	{r4, pc}

0800c05a <__sclose>:
 800c05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05e:	f000 b877 	b.w	800c150 <_close_r>

0800c062 <memset>:
 800c062:	4402      	add	r2, r0
 800c064:	4603      	mov	r3, r0
 800c066:	4293      	cmp	r3, r2
 800c068:	d100      	bne.n	800c06c <memset+0xa>
 800c06a:	4770      	bx	lr
 800c06c:	f803 1b01 	strb.w	r1, [r3], #1
 800c070:	e7f9      	b.n	800c066 <memset+0x4>

0800c072 <strncmp>:
 800c072:	b510      	push	{r4, lr}
 800c074:	b16a      	cbz	r2, 800c092 <strncmp+0x20>
 800c076:	3901      	subs	r1, #1
 800c078:	1884      	adds	r4, r0, r2
 800c07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c07e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c082:	429a      	cmp	r2, r3
 800c084:	d103      	bne.n	800c08e <strncmp+0x1c>
 800c086:	42a0      	cmp	r0, r4
 800c088:	d001      	beq.n	800c08e <strncmp+0x1c>
 800c08a:	2a00      	cmp	r2, #0
 800c08c:	d1f5      	bne.n	800c07a <strncmp+0x8>
 800c08e:	1ad0      	subs	r0, r2, r3
 800c090:	bd10      	pop	{r4, pc}
 800c092:	4610      	mov	r0, r2
 800c094:	e7fc      	b.n	800c090 <strncmp+0x1e>
	...

0800c098 <strtok>:
 800c098:	4b16      	ldr	r3, [pc, #88]	; (800c0f4 <strtok+0x5c>)
 800c09a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c09c:	681e      	ldr	r6, [r3, #0]
 800c09e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	b9fc      	cbnz	r4, 800c0e4 <strtok+0x4c>
 800c0a4:	2050      	movs	r0, #80	; 0x50
 800c0a6:	9101      	str	r1, [sp, #4]
 800c0a8:	f7ff f802 	bl	800b0b0 <malloc>
 800c0ac:	9901      	ldr	r1, [sp, #4]
 800c0ae:	6470      	str	r0, [r6, #68]	; 0x44
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	b920      	cbnz	r0, 800c0be <strtok+0x26>
 800c0b4:	4b10      	ldr	r3, [pc, #64]	; (800c0f8 <strtok+0x60>)
 800c0b6:	4811      	ldr	r0, [pc, #68]	; (800c0fc <strtok+0x64>)
 800c0b8:	215b      	movs	r1, #91	; 0x5b
 800c0ba:	f000 f8ed 	bl	800c298 <__assert_func>
 800c0be:	e9c0 4400 	strd	r4, r4, [r0]
 800c0c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c0c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c0ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c0ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c0d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c0d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c0da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c0de:	6184      	str	r4, [r0, #24]
 800c0e0:	7704      	strb	r4, [r0, #28]
 800c0e2:	6244      	str	r4, [r0, #36]	; 0x24
 800c0e4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	b002      	add	sp, #8
 800c0ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0f0:	f000 b806 	b.w	800c100 <__strtok_r>
 800c0f4:	200001ec 	.word	0x200001ec
 800c0f8:	0800df28 	.word	0x0800df28
 800c0fc:	0800df3f 	.word	0x0800df3f

0800c100 <__strtok_r>:
 800c100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c102:	b908      	cbnz	r0, 800c108 <__strtok_r+0x8>
 800c104:	6810      	ldr	r0, [r2, #0]
 800c106:	b188      	cbz	r0, 800c12c <__strtok_r+0x2c>
 800c108:	4604      	mov	r4, r0
 800c10a:	4620      	mov	r0, r4
 800c10c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c110:	460f      	mov	r7, r1
 800c112:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c116:	b91e      	cbnz	r6, 800c120 <__strtok_r+0x20>
 800c118:	b965      	cbnz	r5, 800c134 <__strtok_r+0x34>
 800c11a:	6015      	str	r5, [r2, #0]
 800c11c:	4628      	mov	r0, r5
 800c11e:	e005      	b.n	800c12c <__strtok_r+0x2c>
 800c120:	42b5      	cmp	r5, r6
 800c122:	d1f6      	bne.n	800c112 <__strtok_r+0x12>
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1f0      	bne.n	800c10a <__strtok_r+0xa>
 800c128:	6014      	str	r4, [r2, #0]
 800c12a:	7003      	strb	r3, [r0, #0]
 800c12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c12e:	461c      	mov	r4, r3
 800c130:	e00c      	b.n	800c14c <__strtok_r+0x4c>
 800c132:	b915      	cbnz	r5, 800c13a <__strtok_r+0x3a>
 800c134:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c138:	460e      	mov	r6, r1
 800c13a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c13e:	42ab      	cmp	r3, r5
 800c140:	d1f7      	bne.n	800c132 <__strtok_r+0x32>
 800c142:	2b00      	cmp	r3, #0
 800c144:	d0f3      	beq.n	800c12e <__strtok_r+0x2e>
 800c146:	2300      	movs	r3, #0
 800c148:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c14c:	6014      	str	r4, [r2, #0]
 800c14e:	e7ed      	b.n	800c12c <__strtok_r+0x2c>

0800c150 <_close_r>:
 800c150:	b538      	push	{r3, r4, r5, lr}
 800c152:	4d06      	ldr	r5, [pc, #24]	; (800c16c <_close_r+0x1c>)
 800c154:	2300      	movs	r3, #0
 800c156:	4604      	mov	r4, r0
 800c158:	4608      	mov	r0, r1
 800c15a:	602b      	str	r3, [r5, #0]
 800c15c:	f7f6 fef7 	bl	8002f4e <_close>
 800c160:	1c43      	adds	r3, r0, #1
 800c162:	d102      	bne.n	800c16a <_close_r+0x1a>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	b103      	cbz	r3, 800c16a <_close_r+0x1a>
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	bd38      	pop	{r3, r4, r5, pc}
 800c16c:	20003694 	.word	0x20003694

0800c170 <_lseek_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d07      	ldr	r5, [pc, #28]	; (800c190 <_lseek_r+0x20>)
 800c174:	4604      	mov	r4, r0
 800c176:	4608      	mov	r0, r1
 800c178:	4611      	mov	r1, r2
 800c17a:	2200      	movs	r2, #0
 800c17c:	602a      	str	r2, [r5, #0]
 800c17e:	461a      	mov	r2, r3
 800c180:	f7f6 ff0c 	bl	8002f9c <_lseek>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	d102      	bne.n	800c18e <_lseek_r+0x1e>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	b103      	cbz	r3, 800c18e <_lseek_r+0x1e>
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	20003694 	.word	0x20003694

0800c194 <_read_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d07      	ldr	r5, [pc, #28]	; (800c1b4 <_read_r+0x20>)
 800c198:	4604      	mov	r4, r0
 800c19a:	4608      	mov	r0, r1
 800c19c:	4611      	mov	r1, r2
 800c19e:	2200      	movs	r2, #0
 800c1a0:	602a      	str	r2, [r5, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f7f6 fe9a 	bl	8002edc <_read>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d102      	bne.n	800c1b2 <_read_r+0x1e>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	b103      	cbz	r3, 800c1b2 <_read_r+0x1e>
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	20003694 	.word	0x20003694

0800c1b8 <_sbrk_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4d06      	ldr	r5, [pc, #24]	; (800c1d4 <_sbrk_r+0x1c>)
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	602b      	str	r3, [r5, #0]
 800c1c4:	f7f6 fef8 	bl	8002fb8 <_sbrk>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d102      	bne.n	800c1d2 <_sbrk_r+0x1a>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	b103      	cbz	r3, 800c1d2 <_sbrk_r+0x1a>
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	20003694 	.word	0x20003694

0800c1d8 <_write_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4d07      	ldr	r5, [pc, #28]	; (800c1f8 <_write_r+0x20>)
 800c1dc:	4604      	mov	r4, r0
 800c1de:	4608      	mov	r0, r1
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	602a      	str	r2, [r5, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	f7f6 fe95 	bl	8002f16 <_write>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d102      	bne.n	800c1f6 <_write_r+0x1e>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	b103      	cbz	r3, 800c1f6 <_write_r+0x1e>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	20003694 	.word	0x20003694

0800c1fc <__errno>:
 800c1fc:	4b01      	ldr	r3, [pc, #4]	; (800c204 <__errno+0x8>)
 800c1fe:	6818      	ldr	r0, [r3, #0]
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	200001ec 	.word	0x200001ec

0800c208 <__libc_init_array>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	4d0d      	ldr	r5, [pc, #52]	; (800c240 <__libc_init_array+0x38>)
 800c20c:	4c0d      	ldr	r4, [pc, #52]	; (800c244 <__libc_init_array+0x3c>)
 800c20e:	1b64      	subs	r4, r4, r5
 800c210:	10a4      	asrs	r4, r4, #2
 800c212:	2600      	movs	r6, #0
 800c214:	42a6      	cmp	r6, r4
 800c216:	d109      	bne.n	800c22c <__libc_init_array+0x24>
 800c218:	4d0b      	ldr	r5, [pc, #44]	; (800c248 <__libc_init_array+0x40>)
 800c21a:	4c0c      	ldr	r4, [pc, #48]	; (800c24c <__libc_init_array+0x44>)
 800c21c:	f001 fdd8 	bl	800ddd0 <_init>
 800c220:	1b64      	subs	r4, r4, r5
 800c222:	10a4      	asrs	r4, r4, #2
 800c224:	2600      	movs	r6, #0
 800c226:	42a6      	cmp	r6, r4
 800c228:	d105      	bne.n	800c236 <__libc_init_array+0x2e>
 800c22a:	bd70      	pop	{r4, r5, r6, pc}
 800c22c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c230:	4798      	blx	r3
 800c232:	3601      	adds	r6, #1
 800c234:	e7ee      	b.n	800c214 <__libc_init_array+0xc>
 800c236:	f855 3b04 	ldr.w	r3, [r5], #4
 800c23a:	4798      	blx	r3
 800c23c:	3601      	adds	r6, #1
 800c23e:	e7f2      	b.n	800c226 <__libc_init_array+0x1e>
 800c240:	0800e2d8 	.word	0x0800e2d8
 800c244:	0800e2d8 	.word	0x0800e2d8
 800c248:	0800e2d8 	.word	0x0800e2d8
 800c24c:	0800e2dc 	.word	0x0800e2dc

0800c250 <__retarget_lock_init_recursive>:
 800c250:	4770      	bx	lr

0800c252 <__retarget_lock_acquire_recursive>:
 800c252:	4770      	bx	lr

0800c254 <__retarget_lock_release_recursive>:
 800c254:	4770      	bx	lr

0800c256 <strcpy>:
 800c256:	4603      	mov	r3, r0
 800c258:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c25c:	f803 2b01 	strb.w	r2, [r3], #1
 800c260:	2a00      	cmp	r2, #0
 800c262:	d1f9      	bne.n	800c258 <strcpy+0x2>
 800c264:	4770      	bx	lr

0800c266 <memcpy>:
 800c266:	440a      	add	r2, r1
 800c268:	4291      	cmp	r1, r2
 800c26a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c26e:	d100      	bne.n	800c272 <memcpy+0xc>
 800c270:	4770      	bx	lr
 800c272:	b510      	push	{r4, lr}
 800c274:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c27c:	4291      	cmp	r1, r2
 800c27e:	d1f9      	bne.n	800c274 <memcpy+0xe>
 800c280:	bd10      	pop	{r4, pc}
 800c282:	0000      	movs	r0, r0
 800c284:	0000      	movs	r0, r0
	...

0800c288 <nan>:
 800c288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c290 <nan+0x8>
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	00000000 	.word	0x00000000
 800c294:	7ff80000 	.word	0x7ff80000

0800c298 <__assert_func>:
 800c298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c29a:	4614      	mov	r4, r2
 800c29c:	461a      	mov	r2, r3
 800c29e:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <__assert_func+0x2c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	68d8      	ldr	r0, [r3, #12]
 800c2a6:	b14c      	cbz	r4, 800c2bc <__assert_func+0x24>
 800c2a8:	4b07      	ldr	r3, [pc, #28]	; (800c2c8 <__assert_func+0x30>)
 800c2aa:	9100      	str	r1, [sp, #0]
 800c2ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2b0:	4906      	ldr	r1, [pc, #24]	; (800c2cc <__assert_func+0x34>)
 800c2b2:	462b      	mov	r3, r5
 800c2b4:	f001 f92c 	bl	800d510 <fiprintf>
 800c2b8:	f001 f93c 	bl	800d534 <abort>
 800c2bc:	4b04      	ldr	r3, [pc, #16]	; (800c2d0 <__assert_func+0x38>)
 800c2be:	461c      	mov	r4, r3
 800c2c0:	e7f3      	b.n	800c2aa <__assert_func+0x12>
 800c2c2:	bf00      	nop
 800c2c4:	200001ec 	.word	0x200001ec
 800c2c8:	0800dfa1 	.word	0x0800dfa1
 800c2cc:	0800dfae 	.word	0x0800dfae
 800c2d0:	0800dfdc 	.word	0x0800dfdc

0800c2d4 <_free_r>:
 800c2d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2d6:	2900      	cmp	r1, #0
 800c2d8:	d044      	beq.n	800c364 <_free_r+0x90>
 800c2da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2de:	9001      	str	r0, [sp, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c2e6:	bfb8      	it	lt
 800c2e8:	18e4      	addlt	r4, r4, r3
 800c2ea:	f7fe ff91 	bl	800b210 <__malloc_lock>
 800c2ee:	4a1e      	ldr	r2, [pc, #120]	; (800c368 <_free_r+0x94>)
 800c2f0:	9801      	ldr	r0, [sp, #4]
 800c2f2:	6813      	ldr	r3, [r2, #0]
 800c2f4:	b933      	cbnz	r3, 800c304 <_free_r+0x30>
 800c2f6:	6063      	str	r3, [r4, #4]
 800c2f8:	6014      	str	r4, [r2, #0]
 800c2fa:	b003      	add	sp, #12
 800c2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c300:	f7fe bf8c 	b.w	800b21c <__malloc_unlock>
 800c304:	42a3      	cmp	r3, r4
 800c306:	d908      	bls.n	800c31a <_free_r+0x46>
 800c308:	6825      	ldr	r5, [r4, #0]
 800c30a:	1961      	adds	r1, r4, r5
 800c30c:	428b      	cmp	r3, r1
 800c30e:	bf01      	itttt	eq
 800c310:	6819      	ldreq	r1, [r3, #0]
 800c312:	685b      	ldreq	r3, [r3, #4]
 800c314:	1949      	addeq	r1, r1, r5
 800c316:	6021      	streq	r1, [r4, #0]
 800c318:	e7ed      	b.n	800c2f6 <_free_r+0x22>
 800c31a:	461a      	mov	r2, r3
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	b10b      	cbz	r3, 800c324 <_free_r+0x50>
 800c320:	42a3      	cmp	r3, r4
 800c322:	d9fa      	bls.n	800c31a <_free_r+0x46>
 800c324:	6811      	ldr	r1, [r2, #0]
 800c326:	1855      	adds	r5, r2, r1
 800c328:	42a5      	cmp	r5, r4
 800c32a:	d10b      	bne.n	800c344 <_free_r+0x70>
 800c32c:	6824      	ldr	r4, [r4, #0]
 800c32e:	4421      	add	r1, r4
 800c330:	1854      	adds	r4, r2, r1
 800c332:	42a3      	cmp	r3, r4
 800c334:	6011      	str	r1, [r2, #0]
 800c336:	d1e0      	bne.n	800c2fa <_free_r+0x26>
 800c338:	681c      	ldr	r4, [r3, #0]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	6053      	str	r3, [r2, #4]
 800c33e:	440c      	add	r4, r1
 800c340:	6014      	str	r4, [r2, #0]
 800c342:	e7da      	b.n	800c2fa <_free_r+0x26>
 800c344:	d902      	bls.n	800c34c <_free_r+0x78>
 800c346:	230c      	movs	r3, #12
 800c348:	6003      	str	r3, [r0, #0]
 800c34a:	e7d6      	b.n	800c2fa <_free_r+0x26>
 800c34c:	6825      	ldr	r5, [r4, #0]
 800c34e:	1961      	adds	r1, r4, r5
 800c350:	428b      	cmp	r3, r1
 800c352:	bf04      	itt	eq
 800c354:	6819      	ldreq	r1, [r3, #0]
 800c356:	685b      	ldreq	r3, [r3, #4]
 800c358:	6063      	str	r3, [r4, #4]
 800c35a:	bf04      	itt	eq
 800c35c:	1949      	addeq	r1, r1, r5
 800c35e:	6021      	streq	r1, [r4, #0]
 800c360:	6054      	str	r4, [r2, #4]
 800c362:	e7ca      	b.n	800c2fa <_free_r+0x26>
 800c364:	b003      	add	sp, #12
 800c366:	bd30      	pop	{r4, r5, pc}
 800c368:	20003550 	.word	0x20003550

0800c36c <rshift>:
 800c36c:	6903      	ldr	r3, [r0, #16]
 800c36e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c376:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c37a:	f100 0414 	add.w	r4, r0, #20
 800c37e:	dd45      	ble.n	800c40c <rshift+0xa0>
 800c380:	f011 011f 	ands.w	r1, r1, #31
 800c384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c38c:	d10c      	bne.n	800c3a8 <rshift+0x3c>
 800c38e:	f100 0710 	add.w	r7, r0, #16
 800c392:	4629      	mov	r1, r5
 800c394:	42b1      	cmp	r1, r6
 800c396:	d334      	bcc.n	800c402 <rshift+0x96>
 800c398:	1a9b      	subs	r3, r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	1eea      	subs	r2, r5, #3
 800c39e:	4296      	cmp	r6, r2
 800c3a0:	bf38      	it	cc
 800c3a2:	2300      	movcc	r3, #0
 800c3a4:	4423      	add	r3, r4
 800c3a6:	e015      	b.n	800c3d4 <rshift+0x68>
 800c3a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c3ac:	f1c1 0820 	rsb	r8, r1, #32
 800c3b0:	40cf      	lsrs	r7, r1
 800c3b2:	f105 0e04 	add.w	lr, r5, #4
 800c3b6:	46a1      	mov	r9, r4
 800c3b8:	4576      	cmp	r6, lr
 800c3ba:	46f4      	mov	ip, lr
 800c3bc:	d815      	bhi.n	800c3ea <rshift+0x7e>
 800c3be:	1a9a      	subs	r2, r3, r2
 800c3c0:	0092      	lsls	r2, r2, #2
 800c3c2:	3a04      	subs	r2, #4
 800c3c4:	3501      	adds	r5, #1
 800c3c6:	42ae      	cmp	r6, r5
 800c3c8:	bf38      	it	cc
 800c3ca:	2200      	movcc	r2, #0
 800c3cc:	18a3      	adds	r3, r4, r2
 800c3ce:	50a7      	str	r7, [r4, r2]
 800c3d0:	b107      	cbz	r7, 800c3d4 <rshift+0x68>
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	1b1a      	subs	r2, r3, r4
 800c3d6:	42a3      	cmp	r3, r4
 800c3d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3dc:	bf08      	it	eq
 800c3de:	2300      	moveq	r3, #0
 800c3e0:	6102      	str	r2, [r0, #16]
 800c3e2:	bf08      	it	eq
 800c3e4:	6143      	streq	r3, [r0, #20]
 800c3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3ea:	f8dc c000 	ldr.w	ip, [ip]
 800c3ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800c3f2:	ea4c 0707 	orr.w	r7, ip, r7
 800c3f6:	f849 7b04 	str.w	r7, [r9], #4
 800c3fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3fe:	40cf      	lsrs	r7, r1
 800c400:	e7da      	b.n	800c3b8 <rshift+0x4c>
 800c402:	f851 cb04 	ldr.w	ip, [r1], #4
 800c406:	f847 cf04 	str.w	ip, [r7, #4]!
 800c40a:	e7c3      	b.n	800c394 <rshift+0x28>
 800c40c:	4623      	mov	r3, r4
 800c40e:	e7e1      	b.n	800c3d4 <rshift+0x68>

0800c410 <__hexdig_fun>:
 800c410:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c414:	2b09      	cmp	r3, #9
 800c416:	d802      	bhi.n	800c41e <__hexdig_fun+0xe>
 800c418:	3820      	subs	r0, #32
 800c41a:	b2c0      	uxtb	r0, r0
 800c41c:	4770      	bx	lr
 800c41e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c422:	2b05      	cmp	r3, #5
 800c424:	d801      	bhi.n	800c42a <__hexdig_fun+0x1a>
 800c426:	3847      	subs	r0, #71	; 0x47
 800c428:	e7f7      	b.n	800c41a <__hexdig_fun+0xa>
 800c42a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c42e:	2b05      	cmp	r3, #5
 800c430:	d801      	bhi.n	800c436 <__hexdig_fun+0x26>
 800c432:	3827      	subs	r0, #39	; 0x27
 800c434:	e7f1      	b.n	800c41a <__hexdig_fun+0xa>
 800c436:	2000      	movs	r0, #0
 800c438:	4770      	bx	lr
	...

0800c43c <__gethex>:
 800c43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c440:	4617      	mov	r7, r2
 800c442:	680a      	ldr	r2, [r1, #0]
 800c444:	b085      	sub	sp, #20
 800c446:	f102 0b02 	add.w	fp, r2, #2
 800c44a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c44e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c452:	4681      	mov	r9, r0
 800c454:	468a      	mov	sl, r1
 800c456:	9302      	str	r3, [sp, #8]
 800c458:	32fe      	adds	r2, #254	; 0xfe
 800c45a:	eb02 030b 	add.w	r3, r2, fp
 800c45e:	46d8      	mov	r8, fp
 800c460:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	2830      	cmp	r0, #48	; 0x30
 800c468:	d0f7      	beq.n	800c45a <__gethex+0x1e>
 800c46a:	f7ff ffd1 	bl	800c410 <__hexdig_fun>
 800c46e:	4604      	mov	r4, r0
 800c470:	2800      	cmp	r0, #0
 800c472:	d138      	bne.n	800c4e6 <__gethex+0xaa>
 800c474:	49a7      	ldr	r1, [pc, #668]	; (800c714 <__gethex+0x2d8>)
 800c476:	2201      	movs	r2, #1
 800c478:	4640      	mov	r0, r8
 800c47a:	f7ff fdfa 	bl	800c072 <strncmp>
 800c47e:	4606      	mov	r6, r0
 800c480:	2800      	cmp	r0, #0
 800c482:	d169      	bne.n	800c558 <__gethex+0x11c>
 800c484:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c488:	465d      	mov	r5, fp
 800c48a:	f7ff ffc1 	bl	800c410 <__hexdig_fun>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d064      	beq.n	800c55c <__gethex+0x120>
 800c492:	465a      	mov	r2, fp
 800c494:	7810      	ldrb	r0, [r2, #0]
 800c496:	2830      	cmp	r0, #48	; 0x30
 800c498:	4690      	mov	r8, r2
 800c49a:	f102 0201 	add.w	r2, r2, #1
 800c49e:	d0f9      	beq.n	800c494 <__gethex+0x58>
 800c4a0:	f7ff ffb6 	bl	800c410 <__hexdig_fun>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	fab0 f480 	clz	r4, r0
 800c4aa:	0964      	lsrs	r4, r4, #5
 800c4ac:	465e      	mov	r6, fp
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	4642      	mov	r2, r8
 800c4b2:	4615      	mov	r5, r2
 800c4b4:	3201      	adds	r2, #1
 800c4b6:	7828      	ldrb	r0, [r5, #0]
 800c4b8:	f7ff ffaa 	bl	800c410 <__hexdig_fun>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d1f8      	bne.n	800c4b2 <__gethex+0x76>
 800c4c0:	4994      	ldr	r1, [pc, #592]	; (800c714 <__gethex+0x2d8>)
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7ff fdd4 	bl	800c072 <strncmp>
 800c4ca:	b978      	cbnz	r0, 800c4ec <__gethex+0xb0>
 800c4cc:	b946      	cbnz	r6, 800c4e0 <__gethex+0xa4>
 800c4ce:	1c6e      	adds	r6, r5, #1
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	4615      	mov	r5, r2
 800c4d4:	3201      	adds	r2, #1
 800c4d6:	7828      	ldrb	r0, [r5, #0]
 800c4d8:	f7ff ff9a 	bl	800c410 <__hexdig_fun>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d1f8      	bne.n	800c4d2 <__gethex+0x96>
 800c4e0:	1b73      	subs	r3, r6, r5
 800c4e2:	009e      	lsls	r6, r3, #2
 800c4e4:	e004      	b.n	800c4f0 <__gethex+0xb4>
 800c4e6:	2400      	movs	r4, #0
 800c4e8:	4626      	mov	r6, r4
 800c4ea:	e7e1      	b.n	800c4b0 <__gethex+0x74>
 800c4ec:	2e00      	cmp	r6, #0
 800c4ee:	d1f7      	bne.n	800c4e0 <__gethex+0xa4>
 800c4f0:	782b      	ldrb	r3, [r5, #0]
 800c4f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4f6:	2b50      	cmp	r3, #80	; 0x50
 800c4f8:	d13d      	bne.n	800c576 <__gethex+0x13a>
 800c4fa:	786b      	ldrb	r3, [r5, #1]
 800c4fc:	2b2b      	cmp	r3, #43	; 0x2b
 800c4fe:	d02f      	beq.n	800c560 <__gethex+0x124>
 800c500:	2b2d      	cmp	r3, #45	; 0x2d
 800c502:	d031      	beq.n	800c568 <__gethex+0x12c>
 800c504:	1c69      	adds	r1, r5, #1
 800c506:	f04f 0b00 	mov.w	fp, #0
 800c50a:	7808      	ldrb	r0, [r1, #0]
 800c50c:	f7ff ff80 	bl	800c410 <__hexdig_fun>
 800c510:	1e42      	subs	r2, r0, #1
 800c512:	b2d2      	uxtb	r2, r2
 800c514:	2a18      	cmp	r2, #24
 800c516:	d82e      	bhi.n	800c576 <__gethex+0x13a>
 800c518:	f1a0 0210 	sub.w	r2, r0, #16
 800c51c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c520:	f7ff ff76 	bl	800c410 <__hexdig_fun>
 800c524:	f100 3cff 	add.w	ip, r0, #4294967295
 800c528:	fa5f fc8c 	uxtb.w	ip, ip
 800c52c:	f1bc 0f18 	cmp.w	ip, #24
 800c530:	d91d      	bls.n	800c56e <__gethex+0x132>
 800c532:	f1bb 0f00 	cmp.w	fp, #0
 800c536:	d000      	beq.n	800c53a <__gethex+0xfe>
 800c538:	4252      	negs	r2, r2
 800c53a:	4416      	add	r6, r2
 800c53c:	f8ca 1000 	str.w	r1, [sl]
 800c540:	b1dc      	cbz	r4, 800c57a <__gethex+0x13e>
 800c542:	9b01      	ldr	r3, [sp, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	bf14      	ite	ne
 800c548:	f04f 0800 	movne.w	r8, #0
 800c54c:	f04f 0806 	moveq.w	r8, #6
 800c550:	4640      	mov	r0, r8
 800c552:	b005      	add	sp, #20
 800c554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c558:	4645      	mov	r5, r8
 800c55a:	4626      	mov	r6, r4
 800c55c:	2401      	movs	r4, #1
 800c55e:	e7c7      	b.n	800c4f0 <__gethex+0xb4>
 800c560:	f04f 0b00 	mov.w	fp, #0
 800c564:	1ca9      	adds	r1, r5, #2
 800c566:	e7d0      	b.n	800c50a <__gethex+0xce>
 800c568:	f04f 0b01 	mov.w	fp, #1
 800c56c:	e7fa      	b.n	800c564 <__gethex+0x128>
 800c56e:	230a      	movs	r3, #10
 800c570:	fb03 0002 	mla	r0, r3, r2, r0
 800c574:	e7d0      	b.n	800c518 <__gethex+0xdc>
 800c576:	4629      	mov	r1, r5
 800c578:	e7e0      	b.n	800c53c <__gethex+0x100>
 800c57a:	eba5 0308 	sub.w	r3, r5, r8
 800c57e:	3b01      	subs	r3, #1
 800c580:	4621      	mov	r1, r4
 800c582:	2b07      	cmp	r3, #7
 800c584:	dc0a      	bgt.n	800c59c <__gethex+0x160>
 800c586:	4648      	mov	r0, r9
 800c588:	f000 fa5a 	bl	800ca40 <_Balloc>
 800c58c:	4604      	mov	r4, r0
 800c58e:	b940      	cbnz	r0, 800c5a2 <__gethex+0x166>
 800c590:	4b61      	ldr	r3, [pc, #388]	; (800c718 <__gethex+0x2dc>)
 800c592:	4602      	mov	r2, r0
 800c594:	21e4      	movs	r1, #228	; 0xe4
 800c596:	4861      	ldr	r0, [pc, #388]	; (800c71c <__gethex+0x2e0>)
 800c598:	f7ff fe7e 	bl	800c298 <__assert_func>
 800c59c:	3101      	adds	r1, #1
 800c59e:	105b      	asrs	r3, r3, #1
 800c5a0:	e7ef      	b.n	800c582 <__gethex+0x146>
 800c5a2:	f100 0a14 	add.w	sl, r0, #20
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	495a      	ldr	r1, [pc, #360]	; (800c714 <__gethex+0x2d8>)
 800c5aa:	f8cd a004 	str.w	sl, [sp, #4]
 800c5ae:	469b      	mov	fp, r3
 800c5b0:	45a8      	cmp	r8, r5
 800c5b2:	d342      	bcc.n	800c63a <__gethex+0x1fe>
 800c5b4:	9801      	ldr	r0, [sp, #4]
 800c5b6:	f840 bb04 	str.w	fp, [r0], #4
 800c5ba:	eba0 000a 	sub.w	r0, r0, sl
 800c5be:	1080      	asrs	r0, r0, #2
 800c5c0:	6120      	str	r0, [r4, #16]
 800c5c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c5c6:	4658      	mov	r0, fp
 800c5c8:	f000 fb2c 	bl	800cc24 <__hi0bits>
 800c5cc:	683d      	ldr	r5, [r7, #0]
 800c5ce:	eba8 0000 	sub.w	r0, r8, r0
 800c5d2:	42a8      	cmp	r0, r5
 800c5d4:	dd59      	ble.n	800c68a <__gethex+0x24e>
 800c5d6:	eba0 0805 	sub.w	r8, r0, r5
 800c5da:	4641      	mov	r1, r8
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f000 febb 	bl	800d358 <__any_on>
 800c5e2:	4683      	mov	fp, r0
 800c5e4:	b1b8      	cbz	r0, 800c616 <__gethex+0x1da>
 800c5e6:	f108 33ff 	add.w	r3, r8, #4294967295
 800c5ea:	1159      	asrs	r1, r3, #5
 800c5ec:	f003 021f 	and.w	r2, r3, #31
 800c5f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c5f4:	f04f 0b01 	mov.w	fp, #1
 800c5f8:	fa0b f202 	lsl.w	r2, fp, r2
 800c5fc:	420a      	tst	r2, r1
 800c5fe:	d00a      	beq.n	800c616 <__gethex+0x1da>
 800c600:	455b      	cmp	r3, fp
 800c602:	dd06      	ble.n	800c612 <__gethex+0x1d6>
 800c604:	f1a8 0102 	sub.w	r1, r8, #2
 800c608:	4620      	mov	r0, r4
 800c60a:	f000 fea5 	bl	800d358 <__any_on>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d138      	bne.n	800c684 <__gethex+0x248>
 800c612:	f04f 0b02 	mov.w	fp, #2
 800c616:	4641      	mov	r1, r8
 800c618:	4620      	mov	r0, r4
 800c61a:	f7ff fea7 	bl	800c36c <rshift>
 800c61e:	4446      	add	r6, r8
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	42b3      	cmp	r3, r6
 800c624:	da41      	bge.n	800c6aa <__gethex+0x26e>
 800c626:	4621      	mov	r1, r4
 800c628:	4648      	mov	r0, r9
 800c62a:	f000 fa49 	bl	800cac0 <_Bfree>
 800c62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c630:	2300      	movs	r3, #0
 800c632:	6013      	str	r3, [r2, #0]
 800c634:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c638:	e78a      	b.n	800c550 <__gethex+0x114>
 800c63a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c63e:	2a2e      	cmp	r2, #46	; 0x2e
 800c640:	d014      	beq.n	800c66c <__gethex+0x230>
 800c642:	2b20      	cmp	r3, #32
 800c644:	d106      	bne.n	800c654 <__gethex+0x218>
 800c646:	9b01      	ldr	r3, [sp, #4]
 800c648:	f843 bb04 	str.w	fp, [r3], #4
 800c64c:	f04f 0b00 	mov.w	fp, #0
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	465b      	mov	r3, fp
 800c654:	7828      	ldrb	r0, [r5, #0]
 800c656:	9303      	str	r3, [sp, #12]
 800c658:	f7ff feda 	bl	800c410 <__hexdig_fun>
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	f000 000f 	and.w	r0, r0, #15
 800c662:	4098      	lsls	r0, r3
 800c664:	ea4b 0b00 	orr.w	fp, fp, r0
 800c668:	3304      	adds	r3, #4
 800c66a:	e7a1      	b.n	800c5b0 <__gethex+0x174>
 800c66c:	45a8      	cmp	r8, r5
 800c66e:	d8e8      	bhi.n	800c642 <__gethex+0x206>
 800c670:	2201      	movs	r2, #1
 800c672:	4628      	mov	r0, r5
 800c674:	9303      	str	r3, [sp, #12]
 800c676:	f7ff fcfc 	bl	800c072 <strncmp>
 800c67a:	4926      	ldr	r1, [pc, #152]	; (800c714 <__gethex+0x2d8>)
 800c67c:	9b03      	ldr	r3, [sp, #12]
 800c67e:	2800      	cmp	r0, #0
 800c680:	d1df      	bne.n	800c642 <__gethex+0x206>
 800c682:	e795      	b.n	800c5b0 <__gethex+0x174>
 800c684:	f04f 0b03 	mov.w	fp, #3
 800c688:	e7c5      	b.n	800c616 <__gethex+0x1da>
 800c68a:	da0b      	bge.n	800c6a4 <__gethex+0x268>
 800c68c:	eba5 0800 	sub.w	r8, r5, r0
 800c690:	4621      	mov	r1, r4
 800c692:	4642      	mov	r2, r8
 800c694:	4648      	mov	r0, r9
 800c696:	f000 fc2d 	bl	800cef4 <__lshift>
 800c69a:	eba6 0608 	sub.w	r6, r6, r8
 800c69e:	4604      	mov	r4, r0
 800c6a0:	f100 0a14 	add.w	sl, r0, #20
 800c6a4:	f04f 0b00 	mov.w	fp, #0
 800c6a8:	e7ba      	b.n	800c620 <__gethex+0x1e4>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	42b3      	cmp	r3, r6
 800c6ae:	dd73      	ble.n	800c798 <__gethex+0x35c>
 800c6b0:	1b9e      	subs	r6, r3, r6
 800c6b2:	42b5      	cmp	r5, r6
 800c6b4:	dc34      	bgt.n	800c720 <__gethex+0x2e4>
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d023      	beq.n	800c704 <__gethex+0x2c8>
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d025      	beq.n	800c70c <__gethex+0x2d0>
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d115      	bne.n	800c6f0 <__gethex+0x2b4>
 800c6c4:	42b5      	cmp	r5, r6
 800c6c6:	d113      	bne.n	800c6f0 <__gethex+0x2b4>
 800c6c8:	2d01      	cmp	r5, #1
 800c6ca:	d10b      	bne.n	800c6e4 <__gethex+0x2a8>
 800c6cc:	9a02      	ldr	r2, [sp, #8]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	6123      	str	r3, [r4, #16]
 800c6d6:	f8ca 3000 	str.w	r3, [sl]
 800c6da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c6e0:	601c      	str	r4, [r3, #0]
 800c6e2:	e735      	b.n	800c550 <__gethex+0x114>
 800c6e4:	1e69      	subs	r1, r5, #1
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 fe36 	bl	800d358 <__any_on>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d1ed      	bne.n	800c6cc <__gethex+0x290>
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	4648      	mov	r0, r9
 800c6f4:	f000 f9e4 	bl	800cac0 <_Bfree>
 800c6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c702:	e725      	b.n	800c550 <__gethex+0x114>
 800c704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1f2      	bne.n	800c6f0 <__gethex+0x2b4>
 800c70a:	e7df      	b.n	800c6cc <__gethex+0x290>
 800c70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1dc      	bne.n	800c6cc <__gethex+0x290>
 800c712:	e7ed      	b.n	800c6f0 <__gethex+0x2b4>
 800c714:	0800dec4 	.word	0x0800dec4
 800c718:	0800dfdd 	.word	0x0800dfdd
 800c71c:	0800dfee 	.word	0x0800dfee
 800c720:	f106 38ff 	add.w	r8, r6, #4294967295
 800c724:	f1bb 0f00 	cmp.w	fp, #0
 800c728:	d133      	bne.n	800c792 <__gethex+0x356>
 800c72a:	f1b8 0f00 	cmp.w	r8, #0
 800c72e:	d004      	beq.n	800c73a <__gethex+0x2fe>
 800c730:	4641      	mov	r1, r8
 800c732:	4620      	mov	r0, r4
 800c734:	f000 fe10 	bl	800d358 <__any_on>
 800c738:	4683      	mov	fp, r0
 800c73a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c73e:	2301      	movs	r3, #1
 800c740:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c744:	f008 081f 	and.w	r8, r8, #31
 800c748:	fa03 f308 	lsl.w	r3, r3, r8
 800c74c:	4213      	tst	r3, r2
 800c74e:	4631      	mov	r1, r6
 800c750:	4620      	mov	r0, r4
 800c752:	bf18      	it	ne
 800c754:	f04b 0b02 	orrne.w	fp, fp, #2
 800c758:	1bad      	subs	r5, r5, r6
 800c75a:	f7ff fe07 	bl	800c36c <rshift>
 800c75e:	687e      	ldr	r6, [r7, #4]
 800c760:	f04f 0802 	mov.w	r8, #2
 800c764:	f1bb 0f00 	cmp.w	fp, #0
 800c768:	d04a      	beq.n	800c800 <__gethex+0x3c4>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d016      	beq.n	800c79e <__gethex+0x362>
 800c770:	2b03      	cmp	r3, #3
 800c772:	d018      	beq.n	800c7a6 <__gethex+0x36a>
 800c774:	2b01      	cmp	r3, #1
 800c776:	d109      	bne.n	800c78c <__gethex+0x350>
 800c778:	f01b 0f02 	tst.w	fp, #2
 800c77c:	d006      	beq.n	800c78c <__gethex+0x350>
 800c77e:	f8da 3000 	ldr.w	r3, [sl]
 800c782:	ea4b 0b03 	orr.w	fp, fp, r3
 800c786:	f01b 0f01 	tst.w	fp, #1
 800c78a:	d10f      	bne.n	800c7ac <__gethex+0x370>
 800c78c:	f048 0810 	orr.w	r8, r8, #16
 800c790:	e036      	b.n	800c800 <__gethex+0x3c4>
 800c792:	f04f 0b01 	mov.w	fp, #1
 800c796:	e7d0      	b.n	800c73a <__gethex+0x2fe>
 800c798:	f04f 0801 	mov.w	r8, #1
 800c79c:	e7e2      	b.n	800c764 <__gethex+0x328>
 800c79e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7a0:	f1c3 0301 	rsb	r3, r3, #1
 800c7a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0ef      	beq.n	800c78c <__gethex+0x350>
 800c7ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7b0:	f104 0214 	add.w	r2, r4, #20
 800c7b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c7be:	2300      	movs	r3, #0
 800c7c0:	4694      	mov	ip, r2
 800c7c2:	f852 1b04 	ldr.w	r1, [r2], #4
 800c7c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c7ca:	d01e      	beq.n	800c80a <__gethex+0x3ce>
 800c7cc:	3101      	adds	r1, #1
 800c7ce:	f8cc 1000 	str.w	r1, [ip]
 800c7d2:	f1b8 0f02 	cmp.w	r8, #2
 800c7d6:	f104 0214 	add.w	r2, r4, #20
 800c7da:	d13d      	bne.n	800c858 <__gethex+0x41c>
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	42ab      	cmp	r3, r5
 800c7e2:	d10b      	bne.n	800c7fc <__gethex+0x3c0>
 800c7e4:	1169      	asrs	r1, r5, #5
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	f005 051f 	and.w	r5, r5, #31
 800c7ec:	fa03 f505 	lsl.w	r5, r3, r5
 800c7f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7f4:	421d      	tst	r5, r3
 800c7f6:	bf18      	it	ne
 800c7f8:	f04f 0801 	movne.w	r8, #1
 800c7fc:	f048 0820 	orr.w	r8, r8, #32
 800c800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c802:	601c      	str	r4, [r3, #0]
 800c804:	9b02      	ldr	r3, [sp, #8]
 800c806:	601e      	str	r6, [r3, #0]
 800c808:	e6a2      	b.n	800c550 <__gethex+0x114>
 800c80a:	4290      	cmp	r0, r2
 800c80c:	f842 3c04 	str.w	r3, [r2, #-4]
 800c810:	d8d6      	bhi.n	800c7c0 <__gethex+0x384>
 800c812:	68a2      	ldr	r2, [r4, #8]
 800c814:	4593      	cmp	fp, r2
 800c816:	db17      	blt.n	800c848 <__gethex+0x40c>
 800c818:	6861      	ldr	r1, [r4, #4]
 800c81a:	4648      	mov	r0, r9
 800c81c:	3101      	adds	r1, #1
 800c81e:	f000 f90f 	bl	800ca40 <_Balloc>
 800c822:	4682      	mov	sl, r0
 800c824:	b918      	cbnz	r0, 800c82e <__gethex+0x3f2>
 800c826:	4b1b      	ldr	r3, [pc, #108]	; (800c894 <__gethex+0x458>)
 800c828:	4602      	mov	r2, r0
 800c82a:	2184      	movs	r1, #132	; 0x84
 800c82c:	e6b3      	b.n	800c596 <__gethex+0x15a>
 800c82e:	6922      	ldr	r2, [r4, #16]
 800c830:	3202      	adds	r2, #2
 800c832:	f104 010c 	add.w	r1, r4, #12
 800c836:	0092      	lsls	r2, r2, #2
 800c838:	300c      	adds	r0, #12
 800c83a:	f7ff fd14 	bl	800c266 <memcpy>
 800c83e:	4621      	mov	r1, r4
 800c840:	4648      	mov	r0, r9
 800c842:	f000 f93d 	bl	800cac0 <_Bfree>
 800c846:	4654      	mov	r4, sl
 800c848:	6922      	ldr	r2, [r4, #16]
 800c84a:	1c51      	adds	r1, r2, #1
 800c84c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c850:	6121      	str	r1, [r4, #16]
 800c852:	2101      	movs	r1, #1
 800c854:	6151      	str	r1, [r2, #20]
 800c856:	e7bc      	b.n	800c7d2 <__gethex+0x396>
 800c858:	6921      	ldr	r1, [r4, #16]
 800c85a:	4559      	cmp	r1, fp
 800c85c:	dd0b      	ble.n	800c876 <__gethex+0x43a>
 800c85e:	2101      	movs	r1, #1
 800c860:	4620      	mov	r0, r4
 800c862:	f7ff fd83 	bl	800c36c <rshift>
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	3601      	adds	r6, #1
 800c86a:	42b3      	cmp	r3, r6
 800c86c:	f6ff aedb 	blt.w	800c626 <__gethex+0x1ea>
 800c870:	f04f 0801 	mov.w	r8, #1
 800c874:	e7c2      	b.n	800c7fc <__gethex+0x3c0>
 800c876:	f015 051f 	ands.w	r5, r5, #31
 800c87a:	d0f9      	beq.n	800c870 <__gethex+0x434>
 800c87c:	9b01      	ldr	r3, [sp, #4]
 800c87e:	441a      	add	r2, r3
 800c880:	f1c5 0520 	rsb	r5, r5, #32
 800c884:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c888:	f000 f9cc 	bl	800cc24 <__hi0bits>
 800c88c:	42a8      	cmp	r0, r5
 800c88e:	dbe6      	blt.n	800c85e <__gethex+0x422>
 800c890:	e7ee      	b.n	800c870 <__gethex+0x434>
 800c892:	bf00      	nop
 800c894:	0800dfdd 	.word	0x0800dfdd

0800c898 <L_shift>:
 800c898:	f1c2 0208 	rsb	r2, r2, #8
 800c89c:	0092      	lsls	r2, r2, #2
 800c89e:	b570      	push	{r4, r5, r6, lr}
 800c8a0:	f1c2 0620 	rsb	r6, r2, #32
 800c8a4:	6843      	ldr	r3, [r0, #4]
 800c8a6:	6804      	ldr	r4, [r0, #0]
 800c8a8:	fa03 f506 	lsl.w	r5, r3, r6
 800c8ac:	432c      	orrs	r4, r5
 800c8ae:	40d3      	lsrs	r3, r2
 800c8b0:	6004      	str	r4, [r0, #0]
 800c8b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8b6:	4288      	cmp	r0, r1
 800c8b8:	d3f4      	bcc.n	800c8a4 <L_shift+0xc>
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}

0800c8bc <__match>:
 800c8bc:	b530      	push	{r4, r5, lr}
 800c8be:	6803      	ldr	r3, [r0, #0]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8c6:	b914      	cbnz	r4, 800c8ce <__match+0x12>
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	2001      	movs	r0, #1
 800c8cc:	bd30      	pop	{r4, r5, pc}
 800c8ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c8d6:	2d19      	cmp	r5, #25
 800c8d8:	bf98      	it	ls
 800c8da:	3220      	addls	r2, #32
 800c8dc:	42a2      	cmp	r2, r4
 800c8de:	d0f0      	beq.n	800c8c2 <__match+0x6>
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	e7f3      	b.n	800c8cc <__match+0x10>

0800c8e4 <__hexnan>:
 800c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e8:	680b      	ldr	r3, [r1, #0]
 800c8ea:	6801      	ldr	r1, [r0, #0]
 800c8ec:	115e      	asrs	r6, r3, #5
 800c8ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8f2:	f013 031f 	ands.w	r3, r3, #31
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	bf18      	it	ne
 800c8fa:	3604      	addne	r6, #4
 800c8fc:	2500      	movs	r5, #0
 800c8fe:	1f37      	subs	r7, r6, #4
 800c900:	4682      	mov	sl, r0
 800c902:	4690      	mov	r8, r2
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	f846 5c04 	str.w	r5, [r6, #-4]
 800c90a:	46b9      	mov	r9, r7
 800c90c:	463c      	mov	r4, r7
 800c90e:	9502      	str	r5, [sp, #8]
 800c910:	46ab      	mov	fp, r5
 800c912:	784a      	ldrb	r2, [r1, #1]
 800c914:	1c4b      	adds	r3, r1, #1
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	b342      	cbz	r2, 800c96c <__hexnan+0x88>
 800c91a:	4610      	mov	r0, r2
 800c91c:	9105      	str	r1, [sp, #20]
 800c91e:	9204      	str	r2, [sp, #16]
 800c920:	f7ff fd76 	bl	800c410 <__hexdig_fun>
 800c924:	2800      	cmp	r0, #0
 800c926:	d14f      	bne.n	800c9c8 <__hexnan+0xe4>
 800c928:	9a04      	ldr	r2, [sp, #16]
 800c92a:	9905      	ldr	r1, [sp, #20]
 800c92c:	2a20      	cmp	r2, #32
 800c92e:	d818      	bhi.n	800c962 <__hexnan+0x7e>
 800c930:	9b02      	ldr	r3, [sp, #8]
 800c932:	459b      	cmp	fp, r3
 800c934:	dd13      	ble.n	800c95e <__hexnan+0x7a>
 800c936:	454c      	cmp	r4, r9
 800c938:	d206      	bcs.n	800c948 <__hexnan+0x64>
 800c93a:	2d07      	cmp	r5, #7
 800c93c:	dc04      	bgt.n	800c948 <__hexnan+0x64>
 800c93e:	462a      	mov	r2, r5
 800c940:	4649      	mov	r1, r9
 800c942:	4620      	mov	r0, r4
 800c944:	f7ff ffa8 	bl	800c898 <L_shift>
 800c948:	4544      	cmp	r4, r8
 800c94a:	d950      	bls.n	800c9ee <__hexnan+0x10a>
 800c94c:	2300      	movs	r3, #0
 800c94e:	f1a4 0904 	sub.w	r9, r4, #4
 800c952:	f844 3c04 	str.w	r3, [r4, #-4]
 800c956:	f8cd b008 	str.w	fp, [sp, #8]
 800c95a:	464c      	mov	r4, r9
 800c95c:	461d      	mov	r5, r3
 800c95e:	9903      	ldr	r1, [sp, #12]
 800c960:	e7d7      	b.n	800c912 <__hexnan+0x2e>
 800c962:	2a29      	cmp	r2, #41	; 0x29
 800c964:	d155      	bne.n	800ca12 <__hexnan+0x12e>
 800c966:	3102      	adds	r1, #2
 800c968:	f8ca 1000 	str.w	r1, [sl]
 800c96c:	f1bb 0f00 	cmp.w	fp, #0
 800c970:	d04f      	beq.n	800ca12 <__hexnan+0x12e>
 800c972:	454c      	cmp	r4, r9
 800c974:	d206      	bcs.n	800c984 <__hexnan+0xa0>
 800c976:	2d07      	cmp	r5, #7
 800c978:	dc04      	bgt.n	800c984 <__hexnan+0xa0>
 800c97a:	462a      	mov	r2, r5
 800c97c:	4649      	mov	r1, r9
 800c97e:	4620      	mov	r0, r4
 800c980:	f7ff ff8a 	bl	800c898 <L_shift>
 800c984:	4544      	cmp	r4, r8
 800c986:	d934      	bls.n	800c9f2 <__hexnan+0x10e>
 800c988:	f1a8 0204 	sub.w	r2, r8, #4
 800c98c:	4623      	mov	r3, r4
 800c98e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c992:	f842 1f04 	str.w	r1, [r2, #4]!
 800c996:	429f      	cmp	r7, r3
 800c998:	d2f9      	bcs.n	800c98e <__hexnan+0xaa>
 800c99a:	1b3b      	subs	r3, r7, r4
 800c99c:	f023 0303 	bic.w	r3, r3, #3
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	3e03      	subs	r6, #3
 800c9a4:	3401      	adds	r4, #1
 800c9a6:	42a6      	cmp	r6, r4
 800c9a8:	bf38      	it	cc
 800c9aa:	2304      	movcc	r3, #4
 800c9ac:	4443      	add	r3, r8
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f843 2b04 	str.w	r2, [r3], #4
 800c9b4:	429f      	cmp	r7, r3
 800c9b6:	d2fb      	bcs.n	800c9b0 <__hexnan+0xcc>
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	b91b      	cbnz	r3, 800c9c4 <__hexnan+0xe0>
 800c9bc:	4547      	cmp	r7, r8
 800c9be:	d126      	bne.n	800ca0e <__hexnan+0x12a>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	603b      	str	r3, [r7, #0]
 800c9c4:	2005      	movs	r0, #5
 800c9c6:	e025      	b.n	800ca14 <__hexnan+0x130>
 800c9c8:	3501      	adds	r5, #1
 800c9ca:	2d08      	cmp	r5, #8
 800c9cc:	f10b 0b01 	add.w	fp, fp, #1
 800c9d0:	dd06      	ble.n	800c9e0 <__hexnan+0xfc>
 800c9d2:	4544      	cmp	r4, r8
 800c9d4:	d9c3      	bls.n	800c95e <__hexnan+0x7a>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9dc:	2501      	movs	r5, #1
 800c9de:	3c04      	subs	r4, #4
 800c9e0:	6822      	ldr	r2, [r4, #0]
 800c9e2:	f000 000f 	and.w	r0, r0, #15
 800c9e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c9ea:	6020      	str	r0, [r4, #0]
 800c9ec:	e7b7      	b.n	800c95e <__hexnan+0x7a>
 800c9ee:	2508      	movs	r5, #8
 800c9f0:	e7b5      	b.n	800c95e <__hexnan+0x7a>
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d0df      	beq.n	800c9b8 <__hexnan+0xd4>
 800c9f8:	f1c3 0320 	rsb	r3, r3, #32
 800c9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800ca00:	40da      	lsrs	r2, r3
 800ca02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca06:	4013      	ands	r3, r2
 800ca08:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca0c:	e7d4      	b.n	800c9b8 <__hexnan+0xd4>
 800ca0e:	3f04      	subs	r7, #4
 800ca10:	e7d2      	b.n	800c9b8 <__hexnan+0xd4>
 800ca12:	2004      	movs	r0, #4
 800ca14:	b007      	add	sp, #28
 800ca16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca1a <__ascii_mbtowc>:
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	b901      	cbnz	r1, 800ca20 <__ascii_mbtowc+0x6>
 800ca1e:	a901      	add	r1, sp, #4
 800ca20:	b142      	cbz	r2, 800ca34 <__ascii_mbtowc+0x1a>
 800ca22:	b14b      	cbz	r3, 800ca38 <__ascii_mbtowc+0x1e>
 800ca24:	7813      	ldrb	r3, [r2, #0]
 800ca26:	600b      	str	r3, [r1, #0]
 800ca28:	7812      	ldrb	r2, [r2, #0]
 800ca2a:	1e10      	subs	r0, r2, #0
 800ca2c:	bf18      	it	ne
 800ca2e:	2001      	movne	r0, #1
 800ca30:	b002      	add	sp, #8
 800ca32:	4770      	bx	lr
 800ca34:	4610      	mov	r0, r2
 800ca36:	e7fb      	b.n	800ca30 <__ascii_mbtowc+0x16>
 800ca38:	f06f 0001 	mvn.w	r0, #1
 800ca3c:	e7f8      	b.n	800ca30 <__ascii_mbtowc+0x16>
	...

0800ca40 <_Balloc>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	69c6      	ldr	r6, [r0, #28]
 800ca44:	4604      	mov	r4, r0
 800ca46:	460d      	mov	r5, r1
 800ca48:	b976      	cbnz	r6, 800ca68 <_Balloc+0x28>
 800ca4a:	2010      	movs	r0, #16
 800ca4c:	f7fe fb30 	bl	800b0b0 <malloc>
 800ca50:	4602      	mov	r2, r0
 800ca52:	61e0      	str	r0, [r4, #28]
 800ca54:	b920      	cbnz	r0, 800ca60 <_Balloc+0x20>
 800ca56:	4b18      	ldr	r3, [pc, #96]	; (800cab8 <_Balloc+0x78>)
 800ca58:	4818      	ldr	r0, [pc, #96]	; (800cabc <_Balloc+0x7c>)
 800ca5a:	216b      	movs	r1, #107	; 0x6b
 800ca5c:	f7ff fc1c 	bl	800c298 <__assert_func>
 800ca60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca64:	6006      	str	r6, [r0, #0]
 800ca66:	60c6      	str	r6, [r0, #12]
 800ca68:	69e6      	ldr	r6, [r4, #28]
 800ca6a:	68f3      	ldr	r3, [r6, #12]
 800ca6c:	b183      	cbz	r3, 800ca90 <_Balloc+0x50>
 800ca6e:	69e3      	ldr	r3, [r4, #28]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca76:	b9b8      	cbnz	r0, 800caa8 <_Balloc+0x68>
 800ca78:	2101      	movs	r1, #1
 800ca7a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca7e:	1d72      	adds	r2, r6, #5
 800ca80:	0092      	lsls	r2, r2, #2
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 fd5d 	bl	800d542 <_calloc_r>
 800ca88:	b160      	cbz	r0, 800caa4 <_Balloc+0x64>
 800ca8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca8e:	e00e      	b.n	800caae <_Balloc+0x6e>
 800ca90:	2221      	movs	r2, #33	; 0x21
 800ca92:	2104      	movs	r1, #4
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fd54 	bl	800d542 <_calloc_r>
 800ca9a:	69e3      	ldr	r3, [r4, #28]
 800ca9c:	60f0      	str	r0, [r6, #12]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1e4      	bne.n	800ca6e <_Balloc+0x2e>
 800caa4:	2000      	movs	r0, #0
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	6802      	ldr	r2, [r0, #0]
 800caaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800caae:	2300      	movs	r3, #0
 800cab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cab4:	e7f7      	b.n	800caa6 <_Balloc+0x66>
 800cab6:	bf00      	nop
 800cab8:	0800df28 	.word	0x0800df28
 800cabc:	0800e04e 	.word	0x0800e04e

0800cac0 <_Bfree>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	69c6      	ldr	r6, [r0, #28]
 800cac4:	4605      	mov	r5, r0
 800cac6:	460c      	mov	r4, r1
 800cac8:	b976      	cbnz	r6, 800cae8 <_Bfree+0x28>
 800caca:	2010      	movs	r0, #16
 800cacc:	f7fe faf0 	bl	800b0b0 <malloc>
 800cad0:	4602      	mov	r2, r0
 800cad2:	61e8      	str	r0, [r5, #28]
 800cad4:	b920      	cbnz	r0, 800cae0 <_Bfree+0x20>
 800cad6:	4b09      	ldr	r3, [pc, #36]	; (800cafc <_Bfree+0x3c>)
 800cad8:	4809      	ldr	r0, [pc, #36]	; (800cb00 <_Bfree+0x40>)
 800cada:	218f      	movs	r1, #143	; 0x8f
 800cadc:	f7ff fbdc 	bl	800c298 <__assert_func>
 800cae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cae4:	6006      	str	r6, [r0, #0]
 800cae6:	60c6      	str	r6, [r0, #12]
 800cae8:	b13c      	cbz	r4, 800cafa <_Bfree+0x3a>
 800caea:	69eb      	ldr	r3, [r5, #28]
 800caec:	6862      	ldr	r2, [r4, #4]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800caf4:	6021      	str	r1, [r4, #0]
 800caf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cafa:	bd70      	pop	{r4, r5, r6, pc}
 800cafc:	0800df28 	.word	0x0800df28
 800cb00:	0800e04e 	.word	0x0800e04e

0800cb04 <__multadd>:
 800cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb08:	690d      	ldr	r5, [r1, #16]
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	461e      	mov	r6, r3
 800cb10:	f101 0c14 	add.w	ip, r1, #20
 800cb14:	2000      	movs	r0, #0
 800cb16:	f8dc 3000 	ldr.w	r3, [ip]
 800cb1a:	b299      	uxth	r1, r3
 800cb1c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb20:	0c1e      	lsrs	r6, r3, #16
 800cb22:	0c0b      	lsrs	r3, r1, #16
 800cb24:	fb02 3306 	mla	r3, r2, r6, r3
 800cb28:	b289      	uxth	r1, r1
 800cb2a:	3001      	adds	r0, #1
 800cb2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb30:	4285      	cmp	r5, r0
 800cb32:	f84c 1b04 	str.w	r1, [ip], #4
 800cb36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb3a:	dcec      	bgt.n	800cb16 <__multadd+0x12>
 800cb3c:	b30e      	cbz	r6, 800cb82 <__multadd+0x7e>
 800cb3e:	68a3      	ldr	r3, [r4, #8]
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	dc19      	bgt.n	800cb78 <__multadd+0x74>
 800cb44:	6861      	ldr	r1, [r4, #4]
 800cb46:	4638      	mov	r0, r7
 800cb48:	3101      	adds	r1, #1
 800cb4a:	f7ff ff79 	bl	800ca40 <_Balloc>
 800cb4e:	4680      	mov	r8, r0
 800cb50:	b928      	cbnz	r0, 800cb5e <__multadd+0x5a>
 800cb52:	4602      	mov	r2, r0
 800cb54:	4b0c      	ldr	r3, [pc, #48]	; (800cb88 <__multadd+0x84>)
 800cb56:	480d      	ldr	r0, [pc, #52]	; (800cb8c <__multadd+0x88>)
 800cb58:	21ba      	movs	r1, #186	; 0xba
 800cb5a:	f7ff fb9d 	bl	800c298 <__assert_func>
 800cb5e:	6922      	ldr	r2, [r4, #16]
 800cb60:	3202      	adds	r2, #2
 800cb62:	f104 010c 	add.w	r1, r4, #12
 800cb66:	0092      	lsls	r2, r2, #2
 800cb68:	300c      	adds	r0, #12
 800cb6a:	f7ff fb7c 	bl	800c266 <memcpy>
 800cb6e:	4621      	mov	r1, r4
 800cb70:	4638      	mov	r0, r7
 800cb72:	f7ff ffa5 	bl	800cac0 <_Bfree>
 800cb76:	4644      	mov	r4, r8
 800cb78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb7c:	3501      	adds	r5, #1
 800cb7e:	615e      	str	r6, [r3, #20]
 800cb80:	6125      	str	r5, [r4, #16]
 800cb82:	4620      	mov	r0, r4
 800cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb88:	0800dfdd 	.word	0x0800dfdd
 800cb8c:	0800e04e 	.word	0x0800e04e

0800cb90 <__s2b>:
 800cb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb94:	460c      	mov	r4, r1
 800cb96:	4615      	mov	r5, r2
 800cb98:	461f      	mov	r7, r3
 800cb9a:	2209      	movs	r2, #9
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	4606      	mov	r6, r0
 800cba0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cba4:	2100      	movs	r1, #0
 800cba6:	2201      	movs	r2, #1
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	db09      	blt.n	800cbc0 <__s2b+0x30>
 800cbac:	4630      	mov	r0, r6
 800cbae:	f7ff ff47 	bl	800ca40 <_Balloc>
 800cbb2:	b940      	cbnz	r0, 800cbc6 <__s2b+0x36>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	4b19      	ldr	r3, [pc, #100]	; (800cc1c <__s2b+0x8c>)
 800cbb8:	4819      	ldr	r0, [pc, #100]	; (800cc20 <__s2b+0x90>)
 800cbba:	21d3      	movs	r1, #211	; 0xd3
 800cbbc:	f7ff fb6c 	bl	800c298 <__assert_func>
 800cbc0:	0052      	lsls	r2, r2, #1
 800cbc2:	3101      	adds	r1, #1
 800cbc4:	e7f0      	b.n	800cba8 <__s2b+0x18>
 800cbc6:	9b08      	ldr	r3, [sp, #32]
 800cbc8:	6143      	str	r3, [r0, #20]
 800cbca:	2d09      	cmp	r5, #9
 800cbcc:	f04f 0301 	mov.w	r3, #1
 800cbd0:	6103      	str	r3, [r0, #16]
 800cbd2:	dd16      	ble.n	800cc02 <__s2b+0x72>
 800cbd4:	f104 0909 	add.w	r9, r4, #9
 800cbd8:	46c8      	mov	r8, r9
 800cbda:	442c      	add	r4, r5
 800cbdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	3b30      	subs	r3, #48	; 0x30
 800cbe4:	220a      	movs	r2, #10
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7ff ff8c 	bl	800cb04 <__multadd>
 800cbec:	45a0      	cmp	r8, r4
 800cbee:	d1f5      	bne.n	800cbdc <__s2b+0x4c>
 800cbf0:	f1a5 0408 	sub.w	r4, r5, #8
 800cbf4:	444c      	add	r4, r9
 800cbf6:	1b2d      	subs	r5, r5, r4
 800cbf8:	1963      	adds	r3, r4, r5
 800cbfa:	42bb      	cmp	r3, r7
 800cbfc:	db04      	blt.n	800cc08 <__s2b+0x78>
 800cbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc02:	340a      	adds	r4, #10
 800cc04:	2509      	movs	r5, #9
 800cc06:	e7f6      	b.n	800cbf6 <__s2b+0x66>
 800cc08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc0c:	4601      	mov	r1, r0
 800cc0e:	3b30      	subs	r3, #48	; 0x30
 800cc10:	220a      	movs	r2, #10
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7ff ff76 	bl	800cb04 <__multadd>
 800cc18:	e7ee      	b.n	800cbf8 <__s2b+0x68>
 800cc1a:	bf00      	nop
 800cc1c:	0800dfdd 	.word	0x0800dfdd
 800cc20:	0800e04e 	.word	0x0800e04e

0800cc24 <__hi0bits>:
 800cc24:	0c03      	lsrs	r3, r0, #16
 800cc26:	041b      	lsls	r3, r3, #16
 800cc28:	b9d3      	cbnz	r3, 800cc60 <__hi0bits+0x3c>
 800cc2a:	0400      	lsls	r0, r0, #16
 800cc2c:	2310      	movs	r3, #16
 800cc2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc32:	bf04      	itt	eq
 800cc34:	0200      	lsleq	r0, r0, #8
 800cc36:	3308      	addeq	r3, #8
 800cc38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc3c:	bf04      	itt	eq
 800cc3e:	0100      	lsleq	r0, r0, #4
 800cc40:	3304      	addeq	r3, #4
 800cc42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc46:	bf04      	itt	eq
 800cc48:	0080      	lsleq	r0, r0, #2
 800cc4a:	3302      	addeq	r3, #2
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	db05      	blt.n	800cc5c <__hi0bits+0x38>
 800cc50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc54:	f103 0301 	add.w	r3, r3, #1
 800cc58:	bf08      	it	eq
 800cc5a:	2320      	moveq	r3, #32
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	4770      	bx	lr
 800cc60:	2300      	movs	r3, #0
 800cc62:	e7e4      	b.n	800cc2e <__hi0bits+0xa>

0800cc64 <__lo0bits>:
 800cc64:	6803      	ldr	r3, [r0, #0]
 800cc66:	f013 0207 	ands.w	r2, r3, #7
 800cc6a:	d00c      	beq.n	800cc86 <__lo0bits+0x22>
 800cc6c:	07d9      	lsls	r1, r3, #31
 800cc6e:	d422      	bmi.n	800ccb6 <__lo0bits+0x52>
 800cc70:	079a      	lsls	r2, r3, #30
 800cc72:	bf49      	itett	mi
 800cc74:	085b      	lsrmi	r3, r3, #1
 800cc76:	089b      	lsrpl	r3, r3, #2
 800cc78:	6003      	strmi	r3, [r0, #0]
 800cc7a:	2201      	movmi	r2, #1
 800cc7c:	bf5c      	itt	pl
 800cc7e:	6003      	strpl	r3, [r0, #0]
 800cc80:	2202      	movpl	r2, #2
 800cc82:	4610      	mov	r0, r2
 800cc84:	4770      	bx	lr
 800cc86:	b299      	uxth	r1, r3
 800cc88:	b909      	cbnz	r1, 800cc8e <__lo0bits+0x2a>
 800cc8a:	0c1b      	lsrs	r3, r3, #16
 800cc8c:	2210      	movs	r2, #16
 800cc8e:	b2d9      	uxtb	r1, r3
 800cc90:	b909      	cbnz	r1, 800cc96 <__lo0bits+0x32>
 800cc92:	3208      	adds	r2, #8
 800cc94:	0a1b      	lsrs	r3, r3, #8
 800cc96:	0719      	lsls	r1, r3, #28
 800cc98:	bf04      	itt	eq
 800cc9a:	091b      	lsreq	r3, r3, #4
 800cc9c:	3204      	addeq	r2, #4
 800cc9e:	0799      	lsls	r1, r3, #30
 800cca0:	bf04      	itt	eq
 800cca2:	089b      	lsreq	r3, r3, #2
 800cca4:	3202      	addeq	r2, #2
 800cca6:	07d9      	lsls	r1, r3, #31
 800cca8:	d403      	bmi.n	800ccb2 <__lo0bits+0x4e>
 800ccaa:	085b      	lsrs	r3, r3, #1
 800ccac:	f102 0201 	add.w	r2, r2, #1
 800ccb0:	d003      	beq.n	800ccba <__lo0bits+0x56>
 800ccb2:	6003      	str	r3, [r0, #0]
 800ccb4:	e7e5      	b.n	800cc82 <__lo0bits+0x1e>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	e7e3      	b.n	800cc82 <__lo0bits+0x1e>
 800ccba:	2220      	movs	r2, #32
 800ccbc:	e7e1      	b.n	800cc82 <__lo0bits+0x1e>
	...

0800ccc0 <__i2b>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	2101      	movs	r1, #1
 800ccc6:	f7ff febb 	bl	800ca40 <_Balloc>
 800ccca:	4602      	mov	r2, r0
 800cccc:	b928      	cbnz	r0, 800ccda <__i2b+0x1a>
 800ccce:	4b05      	ldr	r3, [pc, #20]	; (800cce4 <__i2b+0x24>)
 800ccd0:	4805      	ldr	r0, [pc, #20]	; (800cce8 <__i2b+0x28>)
 800ccd2:	f240 1145 	movw	r1, #325	; 0x145
 800ccd6:	f7ff fadf 	bl	800c298 <__assert_func>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	6144      	str	r4, [r0, #20]
 800ccde:	6103      	str	r3, [r0, #16]
 800cce0:	bd10      	pop	{r4, pc}
 800cce2:	bf00      	nop
 800cce4:	0800dfdd 	.word	0x0800dfdd
 800cce8:	0800e04e 	.word	0x0800e04e

0800ccec <__multiply>:
 800ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	4691      	mov	r9, r2
 800ccf2:	690a      	ldr	r2, [r1, #16]
 800ccf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	bfb8      	it	lt
 800ccfc:	460b      	movlt	r3, r1
 800ccfe:	460c      	mov	r4, r1
 800cd00:	bfbc      	itt	lt
 800cd02:	464c      	movlt	r4, r9
 800cd04:	4699      	movlt	r9, r3
 800cd06:	6927      	ldr	r7, [r4, #16]
 800cd08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd0c:	68a3      	ldr	r3, [r4, #8]
 800cd0e:	6861      	ldr	r1, [r4, #4]
 800cd10:	eb07 060a 	add.w	r6, r7, sl
 800cd14:	42b3      	cmp	r3, r6
 800cd16:	b085      	sub	sp, #20
 800cd18:	bfb8      	it	lt
 800cd1a:	3101      	addlt	r1, #1
 800cd1c:	f7ff fe90 	bl	800ca40 <_Balloc>
 800cd20:	b930      	cbnz	r0, 800cd30 <__multiply+0x44>
 800cd22:	4602      	mov	r2, r0
 800cd24:	4b44      	ldr	r3, [pc, #272]	; (800ce38 <__multiply+0x14c>)
 800cd26:	4845      	ldr	r0, [pc, #276]	; (800ce3c <__multiply+0x150>)
 800cd28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cd2c:	f7ff fab4 	bl	800c298 <__assert_func>
 800cd30:	f100 0514 	add.w	r5, r0, #20
 800cd34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd38:	462b      	mov	r3, r5
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	4543      	cmp	r3, r8
 800cd3e:	d321      	bcc.n	800cd84 <__multiply+0x98>
 800cd40:	f104 0314 	add.w	r3, r4, #20
 800cd44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd48:	f109 0314 	add.w	r3, r9, #20
 800cd4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd50:	9202      	str	r2, [sp, #8]
 800cd52:	1b3a      	subs	r2, r7, r4
 800cd54:	3a15      	subs	r2, #21
 800cd56:	f022 0203 	bic.w	r2, r2, #3
 800cd5a:	3204      	adds	r2, #4
 800cd5c:	f104 0115 	add.w	r1, r4, #21
 800cd60:	428f      	cmp	r7, r1
 800cd62:	bf38      	it	cc
 800cd64:	2204      	movcc	r2, #4
 800cd66:	9201      	str	r2, [sp, #4]
 800cd68:	9a02      	ldr	r2, [sp, #8]
 800cd6a:	9303      	str	r3, [sp, #12]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d80c      	bhi.n	800cd8a <__multiply+0x9e>
 800cd70:	2e00      	cmp	r6, #0
 800cd72:	dd03      	ble.n	800cd7c <__multiply+0x90>
 800cd74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d05b      	beq.n	800ce34 <__multiply+0x148>
 800cd7c:	6106      	str	r6, [r0, #16]
 800cd7e:	b005      	add	sp, #20
 800cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd84:	f843 2b04 	str.w	r2, [r3], #4
 800cd88:	e7d8      	b.n	800cd3c <__multiply+0x50>
 800cd8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd8e:	f1ba 0f00 	cmp.w	sl, #0
 800cd92:	d024      	beq.n	800cdde <__multiply+0xf2>
 800cd94:	f104 0e14 	add.w	lr, r4, #20
 800cd98:	46a9      	mov	r9, r5
 800cd9a:	f04f 0c00 	mov.w	ip, #0
 800cd9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cda2:	f8d9 1000 	ldr.w	r1, [r9]
 800cda6:	fa1f fb82 	uxth.w	fp, r2
 800cdaa:	b289      	uxth	r1, r1
 800cdac:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdb4:	f8d9 2000 	ldr.w	r2, [r9]
 800cdb8:	4461      	add	r1, ip
 800cdba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdc6:	b289      	uxth	r1, r1
 800cdc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdcc:	4577      	cmp	r7, lr
 800cdce:	f849 1b04 	str.w	r1, [r9], #4
 800cdd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdd6:	d8e2      	bhi.n	800cd9e <__multiply+0xb2>
 800cdd8:	9a01      	ldr	r2, [sp, #4]
 800cdda:	f845 c002 	str.w	ip, [r5, r2]
 800cdde:	9a03      	ldr	r2, [sp, #12]
 800cde0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cde4:	3304      	adds	r3, #4
 800cde6:	f1b9 0f00 	cmp.w	r9, #0
 800cdea:	d021      	beq.n	800ce30 <__multiply+0x144>
 800cdec:	6829      	ldr	r1, [r5, #0]
 800cdee:	f104 0c14 	add.w	ip, r4, #20
 800cdf2:	46ae      	mov	lr, r5
 800cdf4:	f04f 0a00 	mov.w	sl, #0
 800cdf8:	f8bc b000 	ldrh.w	fp, [ip]
 800cdfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce00:	fb09 220b 	mla	r2, r9, fp, r2
 800ce04:	4452      	add	r2, sl
 800ce06:	b289      	uxth	r1, r1
 800ce08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ce10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ce14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce18:	f8be 1000 	ldrh.w	r1, [lr]
 800ce1c:	fb09 110a 	mla	r1, r9, sl, r1
 800ce20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ce24:	4567      	cmp	r7, ip
 800ce26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce2a:	d8e5      	bhi.n	800cdf8 <__multiply+0x10c>
 800ce2c:	9a01      	ldr	r2, [sp, #4]
 800ce2e:	50a9      	str	r1, [r5, r2]
 800ce30:	3504      	adds	r5, #4
 800ce32:	e799      	b.n	800cd68 <__multiply+0x7c>
 800ce34:	3e01      	subs	r6, #1
 800ce36:	e79b      	b.n	800cd70 <__multiply+0x84>
 800ce38:	0800dfdd 	.word	0x0800dfdd
 800ce3c:	0800e04e 	.word	0x0800e04e

0800ce40 <__pow5mult>:
 800ce40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce44:	4615      	mov	r5, r2
 800ce46:	f012 0203 	ands.w	r2, r2, #3
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460f      	mov	r7, r1
 800ce4e:	d007      	beq.n	800ce60 <__pow5mult+0x20>
 800ce50:	4c25      	ldr	r4, [pc, #148]	; (800cee8 <__pow5mult+0xa8>)
 800ce52:	3a01      	subs	r2, #1
 800ce54:	2300      	movs	r3, #0
 800ce56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce5a:	f7ff fe53 	bl	800cb04 <__multadd>
 800ce5e:	4607      	mov	r7, r0
 800ce60:	10ad      	asrs	r5, r5, #2
 800ce62:	d03d      	beq.n	800cee0 <__pow5mult+0xa0>
 800ce64:	69f4      	ldr	r4, [r6, #28]
 800ce66:	b97c      	cbnz	r4, 800ce88 <__pow5mult+0x48>
 800ce68:	2010      	movs	r0, #16
 800ce6a:	f7fe f921 	bl	800b0b0 <malloc>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	61f0      	str	r0, [r6, #28]
 800ce72:	b928      	cbnz	r0, 800ce80 <__pow5mult+0x40>
 800ce74:	4b1d      	ldr	r3, [pc, #116]	; (800ceec <__pow5mult+0xac>)
 800ce76:	481e      	ldr	r0, [pc, #120]	; (800cef0 <__pow5mult+0xb0>)
 800ce78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ce7c:	f7ff fa0c 	bl	800c298 <__assert_func>
 800ce80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce84:	6004      	str	r4, [r0, #0]
 800ce86:	60c4      	str	r4, [r0, #12]
 800ce88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ce8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce90:	b94c      	cbnz	r4, 800cea6 <__pow5mult+0x66>
 800ce92:	f240 2171 	movw	r1, #625	; 0x271
 800ce96:	4630      	mov	r0, r6
 800ce98:	f7ff ff12 	bl	800ccc0 <__i2b>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cea2:	4604      	mov	r4, r0
 800cea4:	6003      	str	r3, [r0, #0]
 800cea6:	f04f 0900 	mov.w	r9, #0
 800ceaa:	07eb      	lsls	r3, r5, #31
 800ceac:	d50a      	bpl.n	800cec4 <__pow5mult+0x84>
 800ceae:	4639      	mov	r1, r7
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7ff ff1a 	bl	800ccec <__multiply>
 800ceb8:	4639      	mov	r1, r7
 800ceba:	4680      	mov	r8, r0
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7ff fdff 	bl	800cac0 <_Bfree>
 800cec2:	4647      	mov	r7, r8
 800cec4:	106d      	asrs	r5, r5, #1
 800cec6:	d00b      	beq.n	800cee0 <__pow5mult+0xa0>
 800cec8:	6820      	ldr	r0, [r4, #0]
 800ceca:	b938      	cbnz	r0, 800cedc <__pow5mult+0x9c>
 800cecc:	4622      	mov	r2, r4
 800cece:	4621      	mov	r1, r4
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7ff ff0b 	bl	800ccec <__multiply>
 800ced6:	6020      	str	r0, [r4, #0]
 800ced8:	f8c0 9000 	str.w	r9, [r0]
 800cedc:	4604      	mov	r4, r0
 800cede:	e7e4      	b.n	800ceaa <__pow5mult+0x6a>
 800cee0:	4638      	mov	r0, r7
 800cee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cee6:	bf00      	nop
 800cee8:	0800e198 	.word	0x0800e198
 800ceec:	0800df28 	.word	0x0800df28
 800cef0:	0800e04e 	.word	0x0800e04e

0800cef4 <__lshift>:
 800cef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef8:	460c      	mov	r4, r1
 800cefa:	6849      	ldr	r1, [r1, #4]
 800cefc:	6923      	ldr	r3, [r4, #16]
 800cefe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf02:	68a3      	ldr	r3, [r4, #8]
 800cf04:	4607      	mov	r7, r0
 800cf06:	4691      	mov	r9, r2
 800cf08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf0c:	f108 0601 	add.w	r6, r8, #1
 800cf10:	42b3      	cmp	r3, r6
 800cf12:	db0b      	blt.n	800cf2c <__lshift+0x38>
 800cf14:	4638      	mov	r0, r7
 800cf16:	f7ff fd93 	bl	800ca40 <_Balloc>
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	b948      	cbnz	r0, 800cf32 <__lshift+0x3e>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	4b28      	ldr	r3, [pc, #160]	; (800cfc4 <__lshift+0xd0>)
 800cf22:	4829      	ldr	r0, [pc, #164]	; (800cfc8 <__lshift+0xd4>)
 800cf24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cf28:	f7ff f9b6 	bl	800c298 <__assert_func>
 800cf2c:	3101      	adds	r1, #1
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	e7ee      	b.n	800cf10 <__lshift+0x1c>
 800cf32:	2300      	movs	r3, #0
 800cf34:	f100 0114 	add.w	r1, r0, #20
 800cf38:	f100 0210 	add.w	r2, r0, #16
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	4553      	cmp	r3, sl
 800cf40:	db33      	blt.n	800cfaa <__lshift+0xb6>
 800cf42:	6920      	ldr	r0, [r4, #16]
 800cf44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf48:	f104 0314 	add.w	r3, r4, #20
 800cf4c:	f019 091f 	ands.w	r9, r9, #31
 800cf50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf58:	d02b      	beq.n	800cfb2 <__lshift+0xbe>
 800cf5a:	f1c9 0e20 	rsb	lr, r9, #32
 800cf5e:	468a      	mov	sl, r1
 800cf60:	2200      	movs	r2, #0
 800cf62:	6818      	ldr	r0, [r3, #0]
 800cf64:	fa00 f009 	lsl.w	r0, r0, r9
 800cf68:	4310      	orrs	r0, r2
 800cf6a:	f84a 0b04 	str.w	r0, [sl], #4
 800cf6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf72:	459c      	cmp	ip, r3
 800cf74:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf78:	d8f3      	bhi.n	800cf62 <__lshift+0x6e>
 800cf7a:	ebac 0304 	sub.w	r3, ip, r4
 800cf7e:	3b15      	subs	r3, #21
 800cf80:	f023 0303 	bic.w	r3, r3, #3
 800cf84:	3304      	adds	r3, #4
 800cf86:	f104 0015 	add.w	r0, r4, #21
 800cf8a:	4584      	cmp	ip, r0
 800cf8c:	bf38      	it	cc
 800cf8e:	2304      	movcc	r3, #4
 800cf90:	50ca      	str	r2, [r1, r3]
 800cf92:	b10a      	cbz	r2, 800cf98 <__lshift+0xa4>
 800cf94:	f108 0602 	add.w	r6, r8, #2
 800cf98:	3e01      	subs	r6, #1
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	612e      	str	r6, [r5, #16]
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	f7ff fd8e 	bl	800cac0 <_Bfree>
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfae:	3301      	adds	r3, #1
 800cfb0:	e7c5      	b.n	800cf3e <__lshift+0x4a>
 800cfb2:	3904      	subs	r1, #4
 800cfb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfbc:	459c      	cmp	ip, r3
 800cfbe:	d8f9      	bhi.n	800cfb4 <__lshift+0xc0>
 800cfc0:	e7ea      	b.n	800cf98 <__lshift+0xa4>
 800cfc2:	bf00      	nop
 800cfc4:	0800dfdd 	.word	0x0800dfdd
 800cfc8:	0800e04e 	.word	0x0800e04e

0800cfcc <__mcmp>:
 800cfcc:	b530      	push	{r4, r5, lr}
 800cfce:	6902      	ldr	r2, [r0, #16]
 800cfd0:	690c      	ldr	r4, [r1, #16]
 800cfd2:	1b12      	subs	r2, r2, r4
 800cfd4:	d10e      	bne.n	800cff4 <__mcmp+0x28>
 800cfd6:	f100 0314 	add.w	r3, r0, #20
 800cfda:	3114      	adds	r1, #20
 800cfdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cfe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cfe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cfe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cfec:	42a5      	cmp	r5, r4
 800cfee:	d003      	beq.n	800cff8 <__mcmp+0x2c>
 800cff0:	d305      	bcc.n	800cffe <__mcmp+0x32>
 800cff2:	2201      	movs	r2, #1
 800cff4:	4610      	mov	r0, r2
 800cff6:	bd30      	pop	{r4, r5, pc}
 800cff8:	4283      	cmp	r3, r0
 800cffa:	d3f3      	bcc.n	800cfe4 <__mcmp+0x18>
 800cffc:	e7fa      	b.n	800cff4 <__mcmp+0x28>
 800cffe:	f04f 32ff 	mov.w	r2, #4294967295
 800d002:	e7f7      	b.n	800cff4 <__mcmp+0x28>

0800d004 <__mdiff>:
 800d004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d008:	460c      	mov	r4, r1
 800d00a:	4606      	mov	r6, r0
 800d00c:	4611      	mov	r1, r2
 800d00e:	4620      	mov	r0, r4
 800d010:	4690      	mov	r8, r2
 800d012:	f7ff ffdb 	bl	800cfcc <__mcmp>
 800d016:	1e05      	subs	r5, r0, #0
 800d018:	d110      	bne.n	800d03c <__mdiff+0x38>
 800d01a:	4629      	mov	r1, r5
 800d01c:	4630      	mov	r0, r6
 800d01e:	f7ff fd0f 	bl	800ca40 <_Balloc>
 800d022:	b930      	cbnz	r0, 800d032 <__mdiff+0x2e>
 800d024:	4b3a      	ldr	r3, [pc, #232]	; (800d110 <__mdiff+0x10c>)
 800d026:	4602      	mov	r2, r0
 800d028:	f240 2137 	movw	r1, #567	; 0x237
 800d02c:	4839      	ldr	r0, [pc, #228]	; (800d114 <__mdiff+0x110>)
 800d02e:	f7ff f933 	bl	800c298 <__assert_func>
 800d032:	2301      	movs	r3, #1
 800d034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03c:	bfa4      	itt	ge
 800d03e:	4643      	movge	r3, r8
 800d040:	46a0      	movge	r8, r4
 800d042:	4630      	mov	r0, r6
 800d044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d048:	bfa6      	itte	ge
 800d04a:	461c      	movge	r4, r3
 800d04c:	2500      	movge	r5, #0
 800d04e:	2501      	movlt	r5, #1
 800d050:	f7ff fcf6 	bl	800ca40 <_Balloc>
 800d054:	b920      	cbnz	r0, 800d060 <__mdiff+0x5c>
 800d056:	4b2e      	ldr	r3, [pc, #184]	; (800d110 <__mdiff+0x10c>)
 800d058:	4602      	mov	r2, r0
 800d05a:	f240 2145 	movw	r1, #581	; 0x245
 800d05e:	e7e5      	b.n	800d02c <__mdiff+0x28>
 800d060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d064:	6926      	ldr	r6, [r4, #16]
 800d066:	60c5      	str	r5, [r0, #12]
 800d068:	f104 0914 	add.w	r9, r4, #20
 800d06c:	f108 0514 	add.w	r5, r8, #20
 800d070:	f100 0e14 	add.w	lr, r0, #20
 800d074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d07c:	f108 0210 	add.w	r2, r8, #16
 800d080:	46f2      	mov	sl, lr
 800d082:	2100      	movs	r1, #0
 800d084:	f859 3b04 	ldr.w	r3, [r9], #4
 800d088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d08c:	fa11 f88b 	uxtah	r8, r1, fp
 800d090:	b299      	uxth	r1, r3
 800d092:	0c1b      	lsrs	r3, r3, #16
 800d094:	eba8 0801 	sub.w	r8, r8, r1
 800d098:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d09c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0a0:	fa1f f888 	uxth.w	r8, r8
 800d0a4:	1419      	asrs	r1, r3, #16
 800d0a6:	454e      	cmp	r6, r9
 800d0a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0ac:	f84a 3b04 	str.w	r3, [sl], #4
 800d0b0:	d8e8      	bhi.n	800d084 <__mdiff+0x80>
 800d0b2:	1b33      	subs	r3, r6, r4
 800d0b4:	3b15      	subs	r3, #21
 800d0b6:	f023 0303 	bic.w	r3, r3, #3
 800d0ba:	3304      	adds	r3, #4
 800d0bc:	3415      	adds	r4, #21
 800d0be:	42a6      	cmp	r6, r4
 800d0c0:	bf38      	it	cc
 800d0c2:	2304      	movcc	r3, #4
 800d0c4:	441d      	add	r5, r3
 800d0c6:	4473      	add	r3, lr
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	462e      	mov	r6, r5
 800d0cc:	4566      	cmp	r6, ip
 800d0ce:	d30e      	bcc.n	800d0ee <__mdiff+0xea>
 800d0d0:	f10c 0203 	add.w	r2, ip, #3
 800d0d4:	1b52      	subs	r2, r2, r5
 800d0d6:	f022 0203 	bic.w	r2, r2, #3
 800d0da:	3d03      	subs	r5, #3
 800d0dc:	45ac      	cmp	ip, r5
 800d0de:	bf38      	it	cc
 800d0e0:	2200      	movcc	r2, #0
 800d0e2:	4413      	add	r3, r2
 800d0e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d0e8:	b17a      	cbz	r2, 800d10a <__mdiff+0x106>
 800d0ea:	6107      	str	r7, [r0, #16]
 800d0ec:	e7a4      	b.n	800d038 <__mdiff+0x34>
 800d0ee:	f856 8b04 	ldr.w	r8, [r6], #4
 800d0f2:	fa11 f288 	uxtah	r2, r1, r8
 800d0f6:	1414      	asrs	r4, r2, #16
 800d0f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d0fc:	b292      	uxth	r2, r2
 800d0fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d102:	f84e 2b04 	str.w	r2, [lr], #4
 800d106:	1421      	asrs	r1, r4, #16
 800d108:	e7e0      	b.n	800d0cc <__mdiff+0xc8>
 800d10a:	3f01      	subs	r7, #1
 800d10c:	e7ea      	b.n	800d0e4 <__mdiff+0xe0>
 800d10e:	bf00      	nop
 800d110:	0800dfdd 	.word	0x0800dfdd
 800d114:	0800e04e 	.word	0x0800e04e

0800d118 <__ulp>:
 800d118:	b082      	sub	sp, #8
 800d11a:	ed8d 0b00 	vstr	d0, [sp]
 800d11e:	9a01      	ldr	r2, [sp, #4]
 800d120:	4b0f      	ldr	r3, [pc, #60]	; (800d160 <__ulp+0x48>)
 800d122:	4013      	ands	r3, r2
 800d124:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	dc08      	bgt.n	800d13e <__ulp+0x26>
 800d12c:	425b      	negs	r3, r3
 800d12e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d132:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d136:	da04      	bge.n	800d142 <__ulp+0x2a>
 800d138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d13c:	4113      	asrs	r3, r2
 800d13e:	2200      	movs	r2, #0
 800d140:	e008      	b.n	800d154 <__ulp+0x3c>
 800d142:	f1a2 0314 	sub.w	r3, r2, #20
 800d146:	2b1e      	cmp	r3, #30
 800d148:	bfda      	itte	le
 800d14a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d14e:	40da      	lsrle	r2, r3
 800d150:	2201      	movgt	r2, #1
 800d152:	2300      	movs	r3, #0
 800d154:	4619      	mov	r1, r3
 800d156:	4610      	mov	r0, r2
 800d158:	ec41 0b10 	vmov	d0, r0, r1
 800d15c:	b002      	add	sp, #8
 800d15e:	4770      	bx	lr
 800d160:	7ff00000 	.word	0x7ff00000

0800d164 <__b2d>:
 800d164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d168:	6906      	ldr	r6, [r0, #16]
 800d16a:	f100 0814 	add.w	r8, r0, #20
 800d16e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d172:	1f37      	subs	r7, r6, #4
 800d174:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d178:	4610      	mov	r0, r2
 800d17a:	f7ff fd53 	bl	800cc24 <__hi0bits>
 800d17e:	f1c0 0320 	rsb	r3, r0, #32
 800d182:	280a      	cmp	r0, #10
 800d184:	600b      	str	r3, [r1, #0]
 800d186:	491b      	ldr	r1, [pc, #108]	; (800d1f4 <__b2d+0x90>)
 800d188:	dc15      	bgt.n	800d1b6 <__b2d+0x52>
 800d18a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d18e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d192:	45b8      	cmp	r8, r7
 800d194:	ea43 0501 	orr.w	r5, r3, r1
 800d198:	bf34      	ite	cc
 800d19a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d19e:	2300      	movcs	r3, #0
 800d1a0:	3015      	adds	r0, #21
 800d1a2:	fa02 f000 	lsl.w	r0, r2, r0
 800d1a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800d1aa:	4303      	orrs	r3, r0
 800d1ac:	461c      	mov	r4, r3
 800d1ae:	ec45 4b10 	vmov	d0, r4, r5
 800d1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b6:	45b8      	cmp	r8, r7
 800d1b8:	bf3a      	itte	cc
 800d1ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1be:	f1a6 0708 	subcc.w	r7, r6, #8
 800d1c2:	2300      	movcs	r3, #0
 800d1c4:	380b      	subs	r0, #11
 800d1c6:	d012      	beq.n	800d1ee <__b2d+0x8a>
 800d1c8:	f1c0 0120 	rsb	r1, r0, #32
 800d1cc:	fa23 f401 	lsr.w	r4, r3, r1
 800d1d0:	4082      	lsls	r2, r0
 800d1d2:	4322      	orrs	r2, r4
 800d1d4:	4547      	cmp	r7, r8
 800d1d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d1da:	bf8c      	ite	hi
 800d1dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d1e0:	2200      	movls	r2, #0
 800d1e2:	4083      	lsls	r3, r0
 800d1e4:	40ca      	lsrs	r2, r1
 800d1e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	e7de      	b.n	800d1ac <__b2d+0x48>
 800d1ee:	ea42 0501 	orr.w	r5, r2, r1
 800d1f2:	e7db      	b.n	800d1ac <__b2d+0x48>
 800d1f4:	3ff00000 	.word	0x3ff00000

0800d1f8 <__d2b>:
 800d1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1fc:	460f      	mov	r7, r1
 800d1fe:	2101      	movs	r1, #1
 800d200:	ec59 8b10 	vmov	r8, r9, d0
 800d204:	4616      	mov	r6, r2
 800d206:	f7ff fc1b 	bl	800ca40 <_Balloc>
 800d20a:	4604      	mov	r4, r0
 800d20c:	b930      	cbnz	r0, 800d21c <__d2b+0x24>
 800d20e:	4602      	mov	r2, r0
 800d210:	4b24      	ldr	r3, [pc, #144]	; (800d2a4 <__d2b+0xac>)
 800d212:	4825      	ldr	r0, [pc, #148]	; (800d2a8 <__d2b+0xb0>)
 800d214:	f240 310f 	movw	r1, #783	; 0x30f
 800d218:	f7ff f83e 	bl	800c298 <__assert_func>
 800d21c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d224:	bb2d      	cbnz	r5, 800d272 <__d2b+0x7a>
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	f1b8 0300 	subs.w	r3, r8, #0
 800d22c:	d026      	beq.n	800d27c <__d2b+0x84>
 800d22e:	4668      	mov	r0, sp
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	f7ff fd17 	bl	800cc64 <__lo0bits>
 800d236:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d23a:	b1e8      	cbz	r0, 800d278 <__d2b+0x80>
 800d23c:	f1c0 0320 	rsb	r3, r0, #32
 800d240:	fa02 f303 	lsl.w	r3, r2, r3
 800d244:	430b      	orrs	r3, r1
 800d246:	40c2      	lsrs	r2, r0
 800d248:	6163      	str	r3, [r4, #20]
 800d24a:	9201      	str	r2, [sp, #4]
 800d24c:	9b01      	ldr	r3, [sp, #4]
 800d24e:	61a3      	str	r3, [r4, #24]
 800d250:	2b00      	cmp	r3, #0
 800d252:	bf14      	ite	ne
 800d254:	2202      	movne	r2, #2
 800d256:	2201      	moveq	r2, #1
 800d258:	6122      	str	r2, [r4, #16]
 800d25a:	b1bd      	cbz	r5, 800d28c <__d2b+0x94>
 800d25c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d260:	4405      	add	r5, r0
 800d262:	603d      	str	r5, [r7, #0]
 800d264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d268:	6030      	str	r0, [r6, #0]
 800d26a:	4620      	mov	r0, r4
 800d26c:	b003      	add	sp, #12
 800d26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d276:	e7d6      	b.n	800d226 <__d2b+0x2e>
 800d278:	6161      	str	r1, [r4, #20]
 800d27a:	e7e7      	b.n	800d24c <__d2b+0x54>
 800d27c:	a801      	add	r0, sp, #4
 800d27e:	f7ff fcf1 	bl	800cc64 <__lo0bits>
 800d282:	9b01      	ldr	r3, [sp, #4]
 800d284:	6163      	str	r3, [r4, #20]
 800d286:	3020      	adds	r0, #32
 800d288:	2201      	movs	r2, #1
 800d28a:	e7e5      	b.n	800d258 <__d2b+0x60>
 800d28c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d294:	6038      	str	r0, [r7, #0]
 800d296:	6918      	ldr	r0, [r3, #16]
 800d298:	f7ff fcc4 	bl	800cc24 <__hi0bits>
 800d29c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2a0:	e7e2      	b.n	800d268 <__d2b+0x70>
 800d2a2:	bf00      	nop
 800d2a4:	0800dfdd 	.word	0x0800dfdd
 800d2a8:	0800e04e 	.word	0x0800e04e

0800d2ac <__ratio>:
 800d2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b0:	4688      	mov	r8, r1
 800d2b2:	4669      	mov	r1, sp
 800d2b4:	4681      	mov	r9, r0
 800d2b6:	f7ff ff55 	bl	800d164 <__b2d>
 800d2ba:	a901      	add	r1, sp, #4
 800d2bc:	4640      	mov	r0, r8
 800d2be:	ec55 4b10 	vmov	r4, r5, d0
 800d2c2:	f7ff ff4f 	bl	800d164 <__b2d>
 800d2c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d2ce:	eba3 0c02 	sub.w	ip, r3, r2
 800d2d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2d6:	1a9b      	subs	r3, r3, r2
 800d2d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d2dc:	ec51 0b10 	vmov	r0, r1, d0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	bfd6      	itet	le
 800d2e4:	460a      	movle	r2, r1
 800d2e6:	462a      	movgt	r2, r5
 800d2e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d2ec:	468b      	mov	fp, r1
 800d2ee:	462f      	mov	r7, r5
 800d2f0:	bfd4      	ite	le
 800d2f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d2f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	ee10 2a10 	vmov	r2, s0
 800d300:	465b      	mov	r3, fp
 800d302:	4639      	mov	r1, r7
 800d304:	f7f3 fac2 	bl	800088c <__aeabi_ddiv>
 800d308:	ec41 0b10 	vmov	d0, r0, r1
 800d30c:	b003      	add	sp, #12
 800d30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d312 <__copybits>:
 800d312:	3901      	subs	r1, #1
 800d314:	b570      	push	{r4, r5, r6, lr}
 800d316:	1149      	asrs	r1, r1, #5
 800d318:	6914      	ldr	r4, [r2, #16]
 800d31a:	3101      	adds	r1, #1
 800d31c:	f102 0314 	add.w	r3, r2, #20
 800d320:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d324:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d328:	1f05      	subs	r5, r0, #4
 800d32a:	42a3      	cmp	r3, r4
 800d32c:	d30c      	bcc.n	800d348 <__copybits+0x36>
 800d32e:	1aa3      	subs	r3, r4, r2
 800d330:	3b11      	subs	r3, #17
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	3211      	adds	r2, #17
 800d338:	42a2      	cmp	r2, r4
 800d33a:	bf88      	it	hi
 800d33c:	2300      	movhi	r3, #0
 800d33e:	4418      	add	r0, r3
 800d340:	2300      	movs	r3, #0
 800d342:	4288      	cmp	r0, r1
 800d344:	d305      	bcc.n	800d352 <__copybits+0x40>
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	f853 6b04 	ldr.w	r6, [r3], #4
 800d34c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d350:	e7eb      	b.n	800d32a <__copybits+0x18>
 800d352:	f840 3b04 	str.w	r3, [r0], #4
 800d356:	e7f4      	b.n	800d342 <__copybits+0x30>

0800d358 <__any_on>:
 800d358:	f100 0214 	add.w	r2, r0, #20
 800d35c:	6900      	ldr	r0, [r0, #16]
 800d35e:	114b      	asrs	r3, r1, #5
 800d360:	4298      	cmp	r0, r3
 800d362:	b510      	push	{r4, lr}
 800d364:	db11      	blt.n	800d38a <__any_on+0x32>
 800d366:	dd0a      	ble.n	800d37e <__any_on+0x26>
 800d368:	f011 011f 	ands.w	r1, r1, #31
 800d36c:	d007      	beq.n	800d37e <__any_on+0x26>
 800d36e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d372:	fa24 f001 	lsr.w	r0, r4, r1
 800d376:	fa00 f101 	lsl.w	r1, r0, r1
 800d37a:	428c      	cmp	r4, r1
 800d37c:	d10b      	bne.n	800d396 <__any_on+0x3e>
 800d37e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d382:	4293      	cmp	r3, r2
 800d384:	d803      	bhi.n	800d38e <__any_on+0x36>
 800d386:	2000      	movs	r0, #0
 800d388:	bd10      	pop	{r4, pc}
 800d38a:	4603      	mov	r3, r0
 800d38c:	e7f7      	b.n	800d37e <__any_on+0x26>
 800d38e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d392:	2900      	cmp	r1, #0
 800d394:	d0f5      	beq.n	800d382 <__any_on+0x2a>
 800d396:	2001      	movs	r0, #1
 800d398:	e7f6      	b.n	800d388 <__any_on+0x30>

0800d39a <__ascii_wctomb>:
 800d39a:	b149      	cbz	r1, 800d3b0 <__ascii_wctomb+0x16>
 800d39c:	2aff      	cmp	r2, #255	; 0xff
 800d39e:	bf85      	ittet	hi
 800d3a0:	238a      	movhi	r3, #138	; 0x8a
 800d3a2:	6003      	strhi	r3, [r0, #0]
 800d3a4:	700a      	strbls	r2, [r1, #0]
 800d3a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3aa:	bf98      	it	ls
 800d3ac:	2001      	movls	r0, #1
 800d3ae:	4770      	bx	lr
 800d3b0:	4608      	mov	r0, r1
 800d3b2:	4770      	bx	lr

0800d3b4 <__sflush_r>:
 800d3b4:	898a      	ldrh	r2, [r1, #12]
 800d3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	0710      	lsls	r0, r2, #28
 800d3be:	460c      	mov	r4, r1
 800d3c0:	d458      	bmi.n	800d474 <__sflush_r+0xc0>
 800d3c2:	684b      	ldr	r3, [r1, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dc05      	bgt.n	800d3d4 <__sflush_r+0x20>
 800d3c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dc02      	bgt.n	800d3d4 <__sflush_r+0x20>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3d6:	2e00      	cmp	r6, #0
 800d3d8:	d0f9      	beq.n	800d3ce <__sflush_r+0x1a>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3e0:	682f      	ldr	r7, [r5, #0]
 800d3e2:	6a21      	ldr	r1, [r4, #32]
 800d3e4:	602b      	str	r3, [r5, #0]
 800d3e6:	d032      	beq.n	800d44e <__sflush_r+0x9a>
 800d3e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3ea:	89a3      	ldrh	r3, [r4, #12]
 800d3ec:	075a      	lsls	r2, r3, #29
 800d3ee:	d505      	bpl.n	800d3fc <__sflush_r+0x48>
 800d3f0:	6863      	ldr	r3, [r4, #4]
 800d3f2:	1ac0      	subs	r0, r0, r3
 800d3f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3f6:	b10b      	cbz	r3, 800d3fc <__sflush_r+0x48>
 800d3f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3fa:	1ac0      	subs	r0, r0, r3
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4602      	mov	r2, r0
 800d400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d402:	6a21      	ldr	r1, [r4, #32]
 800d404:	4628      	mov	r0, r5
 800d406:	47b0      	blx	r6
 800d408:	1c43      	adds	r3, r0, #1
 800d40a:	89a3      	ldrh	r3, [r4, #12]
 800d40c:	d106      	bne.n	800d41c <__sflush_r+0x68>
 800d40e:	6829      	ldr	r1, [r5, #0]
 800d410:	291d      	cmp	r1, #29
 800d412:	d82b      	bhi.n	800d46c <__sflush_r+0xb8>
 800d414:	4a29      	ldr	r2, [pc, #164]	; (800d4bc <__sflush_r+0x108>)
 800d416:	410a      	asrs	r2, r1
 800d418:	07d6      	lsls	r6, r2, #31
 800d41a:	d427      	bmi.n	800d46c <__sflush_r+0xb8>
 800d41c:	2200      	movs	r2, #0
 800d41e:	6062      	str	r2, [r4, #4]
 800d420:	04d9      	lsls	r1, r3, #19
 800d422:	6922      	ldr	r2, [r4, #16]
 800d424:	6022      	str	r2, [r4, #0]
 800d426:	d504      	bpl.n	800d432 <__sflush_r+0x7e>
 800d428:	1c42      	adds	r2, r0, #1
 800d42a:	d101      	bne.n	800d430 <__sflush_r+0x7c>
 800d42c:	682b      	ldr	r3, [r5, #0]
 800d42e:	b903      	cbnz	r3, 800d432 <__sflush_r+0x7e>
 800d430:	6560      	str	r0, [r4, #84]	; 0x54
 800d432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d434:	602f      	str	r7, [r5, #0]
 800d436:	2900      	cmp	r1, #0
 800d438:	d0c9      	beq.n	800d3ce <__sflush_r+0x1a>
 800d43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d43e:	4299      	cmp	r1, r3
 800d440:	d002      	beq.n	800d448 <__sflush_r+0x94>
 800d442:	4628      	mov	r0, r5
 800d444:	f7fe ff46 	bl	800c2d4 <_free_r>
 800d448:	2000      	movs	r0, #0
 800d44a:	6360      	str	r0, [r4, #52]	; 0x34
 800d44c:	e7c0      	b.n	800d3d0 <__sflush_r+0x1c>
 800d44e:	2301      	movs	r3, #1
 800d450:	4628      	mov	r0, r5
 800d452:	47b0      	blx	r6
 800d454:	1c41      	adds	r1, r0, #1
 800d456:	d1c8      	bne.n	800d3ea <__sflush_r+0x36>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d0c5      	beq.n	800d3ea <__sflush_r+0x36>
 800d45e:	2b1d      	cmp	r3, #29
 800d460:	d001      	beq.n	800d466 <__sflush_r+0xb2>
 800d462:	2b16      	cmp	r3, #22
 800d464:	d101      	bne.n	800d46a <__sflush_r+0xb6>
 800d466:	602f      	str	r7, [r5, #0]
 800d468:	e7b1      	b.n	800d3ce <__sflush_r+0x1a>
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	e7ad      	b.n	800d3d0 <__sflush_r+0x1c>
 800d474:	690f      	ldr	r7, [r1, #16]
 800d476:	2f00      	cmp	r7, #0
 800d478:	d0a9      	beq.n	800d3ce <__sflush_r+0x1a>
 800d47a:	0793      	lsls	r3, r2, #30
 800d47c:	680e      	ldr	r6, [r1, #0]
 800d47e:	bf08      	it	eq
 800d480:	694b      	ldreq	r3, [r1, #20]
 800d482:	600f      	str	r7, [r1, #0]
 800d484:	bf18      	it	ne
 800d486:	2300      	movne	r3, #0
 800d488:	eba6 0807 	sub.w	r8, r6, r7
 800d48c:	608b      	str	r3, [r1, #8]
 800d48e:	f1b8 0f00 	cmp.w	r8, #0
 800d492:	dd9c      	ble.n	800d3ce <__sflush_r+0x1a>
 800d494:	6a21      	ldr	r1, [r4, #32]
 800d496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d498:	4643      	mov	r3, r8
 800d49a:	463a      	mov	r2, r7
 800d49c:	4628      	mov	r0, r5
 800d49e:	47b0      	blx	r6
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	dc06      	bgt.n	800d4b2 <__sflush_r+0xfe>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4aa:	81a3      	strh	r3, [r4, #12]
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	e78e      	b.n	800d3d0 <__sflush_r+0x1c>
 800d4b2:	4407      	add	r7, r0
 800d4b4:	eba8 0800 	sub.w	r8, r8, r0
 800d4b8:	e7e9      	b.n	800d48e <__sflush_r+0xda>
 800d4ba:	bf00      	nop
 800d4bc:	dfbffffe 	.word	0xdfbffffe

0800d4c0 <_fflush_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	690b      	ldr	r3, [r1, #16]
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	b913      	cbnz	r3, 800d4d0 <_fflush_r+0x10>
 800d4ca:	2500      	movs	r5, #0
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	b118      	cbz	r0, 800d4da <_fflush_r+0x1a>
 800d4d2:	6a03      	ldr	r3, [r0, #32]
 800d4d4:	b90b      	cbnz	r3, 800d4da <_fflush_r+0x1a>
 800d4d6:	f7fe fd4b 	bl	800bf70 <__sinit>
 800d4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d0f3      	beq.n	800d4ca <_fflush_r+0xa>
 800d4e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4e4:	07d0      	lsls	r0, r2, #31
 800d4e6:	d404      	bmi.n	800d4f2 <_fflush_r+0x32>
 800d4e8:	0599      	lsls	r1, r3, #22
 800d4ea:	d402      	bmi.n	800d4f2 <_fflush_r+0x32>
 800d4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4ee:	f7fe feb0 	bl	800c252 <__retarget_lock_acquire_recursive>
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	f7ff ff5d 	bl	800d3b4 <__sflush_r>
 800d4fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4fc:	07da      	lsls	r2, r3, #31
 800d4fe:	4605      	mov	r5, r0
 800d500:	d4e4      	bmi.n	800d4cc <_fflush_r+0xc>
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	059b      	lsls	r3, r3, #22
 800d506:	d4e1      	bmi.n	800d4cc <_fflush_r+0xc>
 800d508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d50a:	f7fe fea3 	bl	800c254 <__retarget_lock_release_recursive>
 800d50e:	e7dd      	b.n	800d4cc <_fflush_r+0xc>

0800d510 <fiprintf>:
 800d510:	b40e      	push	{r1, r2, r3}
 800d512:	b503      	push	{r0, r1, lr}
 800d514:	4601      	mov	r1, r0
 800d516:	ab03      	add	r3, sp, #12
 800d518:	4805      	ldr	r0, [pc, #20]	; (800d530 <fiprintf+0x20>)
 800d51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d51e:	6800      	ldr	r0, [r0, #0]
 800d520:	9301      	str	r3, [sp, #4]
 800d522:	f000 f84d 	bl	800d5c0 <_vfiprintf_r>
 800d526:	b002      	add	sp, #8
 800d528:	f85d eb04 	ldr.w	lr, [sp], #4
 800d52c:	b003      	add	sp, #12
 800d52e:	4770      	bx	lr
 800d530:	200001ec 	.word	0x200001ec

0800d534 <abort>:
 800d534:	b508      	push	{r3, lr}
 800d536:	2006      	movs	r0, #6
 800d538:	f000 fbaa 	bl	800dc90 <raise>
 800d53c:	2001      	movs	r0, #1
 800d53e:	f7f5 fcc3 	bl	8002ec8 <_exit>

0800d542 <_calloc_r>:
 800d542:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d544:	fba1 2402 	umull	r2, r4, r1, r2
 800d548:	b94c      	cbnz	r4, 800d55e <_calloc_r+0x1c>
 800d54a:	4611      	mov	r1, r2
 800d54c:	9201      	str	r2, [sp, #4]
 800d54e:	f7fd fddf 	bl	800b110 <_malloc_r>
 800d552:	9a01      	ldr	r2, [sp, #4]
 800d554:	4605      	mov	r5, r0
 800d556:	b930      	cbnz	r0, 800d566 <_calloc_r+0x24>
 800d558:	4628      	mov	r0, r5
 800d55a:	b003      	add	sp, #12
 800d55c:	bd30      	pop	{r4, r5, pc}
 800d55e:	220c      	movs	r2, #12
 800d560:	6002      	str	r2, [r0, #0]
 800d562:	2500      	movs	r5, #0
 800d564:	e7f8      	b.n	800d558 <_calloc_r+0x16>
 800d566:	4621      	mov	r1, r4
 800d568:	f7fe fd7b 	bl	800c062 <memset>
 800d56c:	e7f4      	b.n	800d558 <_calloc_r+0x16>

0800d56e <__sfputc_r>:
 800d56e:	6893      	ldr	r3, [r2, #8]
 800d570:	3b01      	subs	r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	b410      	push	{r4}
 800d576:	6093      	str	r3, [r2, #8]
 800d578:	da08      	bge.n	800d58c <__sfputc_r+0x1e>
 800d57a:	6994      	ldr	r4, [r2, #24]
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	db01      	blt.n	800d584 <__sfputc_r+0x16>
 800d580:	290a      	cmp	r1, #10
 800d582:	d103      	bne.n	800d58c <__sfputc_r+0x1e>
 800d584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d588:	f000 bac4 	b.w	800db14 <__swbuf_r>
 800d58c:	6813      	ldr	r3, [r2, #0]
 800d58e:	1c58      	adds	r0, r3, #1
 800d590:	6010      	str	r0, [r2, #0]
 800d592:	7019      	strb	r1, [r3, #0]
 800d594:	4608      	mov	r0, r1
 800d596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <__sfputs_r>:
 800d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59e:	4606      	mov	r6, r0
 800d5a0:	460f      	mov	r7, r1
 800d5a2:	4614      	mov	r4, r2
 800d5a4:	18d5      	adds	r5, r2, r3
 800d5a6:	42ac      	cmp	r4, r5
 800d5a8:	d101      	bne.n	800d5ae <__sfputs_r+0x12>
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	e007      	b.n	800d5be <__sfputs_r+0x22>
 800d5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5b2:	463a      	mov	r2, r7
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f7ff ffda 	bl	800d56e <__sfputc_r>
 800d5ba:	1c43      	adds	r3, r0, #1
 800d5bc:	d1f3      	bne.n	800d5a6 <__sfputs_r+0xa>
 800d5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5c0 <_vfiprintf_r>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	460d      	mov	r5, r1
 800d5c6:	b09d      	sub	sp, #116	; 0x74
 800d5c8:	4614      	mov	r4, r2
 800d5ca:	4698      	mov	r8, r3
 800d5cc:	4606      	mov	r6, r0
 800d5ce:	b118      	cbz	r0, 800d5d8 <_vfiprintf_r+0x18>
 800d5d0:	6a03      	ldr	r3, [r0, #32]
 800d5d2:	b90b      	cbnz	r3, 800d5d8 <_vfiprintf_r+0x18>
 800d5d4:	f7fe fccc 	bl	800bf70 <__sinit>
 800d5d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5da:	07d9      	lsls	r1, r3, #31
 800d5dc:	d405      	bmi.n	800d5ea <_vfiprintf_r+0x2a>
 800d5de:	89ab      	ldrh	r3, [r5, #12]
 800d5e0:	059a      	lsls	r2, r3, #22
 800d5e2:	d402      	bmi.n	800d5ea <_vfiprintf_r+0x2a>
 800d5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5e6:	f7fe fe34 	bl	800c252 <__retarget_lock_acquire_recursive>
 800d5ea:	89ab      	ldrh	r3, [r5, #12]
 800d5ec:	071b      	lsls	r3, r3, #28
 800d5ee:	d501      	bpl.n	800d5f4 <_vfiprintf_r+0x34>
 800d5f0:	692b      	ldr	r3, [r5, #16]
 800d5f2:	b99b      	cbnz	r3, 800d61c <_vfiprintf_r+0x5c>
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f000 faca 	bl	800db90 <__swsetup_r>
 800d5fc:	b170      	cbz	r0, 800d61c <_vfiprintf_r+0x5c>
 800d5fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d600:	07dc      	lsls	r4, r3, #31
 800d602:	d504      	bpl.n	800d60e <_vfiprintf_r+0x4e>
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	b01d      	add	sp, #116	; 0x74
 800d60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60e:	89ab      	ldrh	r3, [r5, #12]
 800d610:	0598      	lsls	r0, r3, #22
 800d612:	d4f7      	bmi.n	800d604 <_vfiprintf_r+0x44>
 800d614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d616:	f7fe fe1d 	bl	800c254 <__retarget_lock_release_recursive>
 800d61a:	e7f3      	b.n	800d604 <_vfiprintf_r+0x44>
 800d61c:	2300      	movs	r3, #0
 800d61e:	9309      	str	r3, [sp, #36]	; 0x24
 800d620:	2320      	movs	r3, #32
 800d622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d626:	f8cd 800c 	str.w	r8, [sp, #12]
 800d62a:	2330      	movs	r3, #48	; 0x30
 800d62c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d7e0 <_vfiprintf_r+0x220>
 800d630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d634:	f04f 0901 	mov.w	r9, #1
 800d638:	4623      	mov	r3, r4
 800d63a:	469a      	mov	sl, r3
 800d63c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d640:	b10a      	cbz	r2, 800d646 <_vfiprintf_r+0x86>
 800d642:	2a25      	cmp	r2, #37	; 0x25
 800d644:	d1f9      	bne.n	800d63a <_vfiprintf_r+0x7a>
 800d646:	ebba 0b04 	subs.w	fp, sl, r4
 800d64a:	d00b      	beq.n	800d664 <_vfiprintf_r+0xa4>
 800d64c:	465b      	mov	r3, fp
 800d64e:	4622      	mov	r2, r4
 800d650:	4629      	mov	r1, r5
 800d652:	4630      	mov	r0, r6
 800d654:	f7ff ffa2 	bl	800d59c <__sfputs_r>
 800d658:	3001      	adds	r0, #1
 800d65a:	f000 80a9 	beq.w	800d7b0 <_vfiprintf_r+0x1f0>
 800d65e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d660:	445a      	add	r2, fp
 800d662:	9209      	str	r2, [sp, #36]	; 0x24
 800d664:	f89a 3000 	ldrb.w	r3, [sl]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f000 80a1 	beq.w	800d7b0 <_vfiprintf_r+0x1f0>
 800d66e:	2300      	movs	r3, #0
 800d670:	f04f 32ff 	mov.w	r2, #4294967295
 800d674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d678:	f10a 0a01 	add.w	sl, sl, #1
 800d67c:	9304      	str	r3, [sp, #16]
 800d67e:	9307      	str	r3, [sp, #28]
 800d680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d684:	931a      	str	r3, [sp, #104]	; 0x68
 800d686:	4654      	mov	r4, sl
 800d688:	2205      	movs	r2, #5
 800d68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d68e:	4854      	ldr	r0, [pc, #336]	; (800d7e0 <_vfiprintf_r+0x220>)
 800d690:	f7f2 fdc6 	bl	8000220 <memchr>
 800d694:	9a04      	ldr	r2, [sp, #16]
 800d696:	b9d8      	cbnz	r0, 800d6d0 <_vfiprintf_r+0x110>
 800d698:	06d1      	lsls	r1, r2, #27
 800d69a:	bf44      	itt	mi
 800d69c:	2320      	movmi	r3, #32
 800d69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6a2:	0713      	lsls	r3, r2, #28
 800d6a4:	bf44      	itt	mi
 800d6a6:	232b      	movmi	r3, #43	; 0x2b
 800d6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b2:	d015      	beq.n	800d6e0 <_vfiprintf_r+0x120>
 800d6b4:	9a07      	ldr	r2, [sp, #28]
 800d6b6:	4654      	mov	r4, sl
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	f04f 0c0a 	mov.w	ip, #10
 800d6be:	4621      	mov	r1, r4
 800d6c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6c4:	3b30      	subs	r3, #48	; 0x30
 800d6c6:	2b09      	cmp	r3, #9
 800d6c8:	d94d      	bls.n	800d766 <_vfiprintf_r+0x1a6>
 800d6ca:	b1b0      	cbz	r0, 800d6fa <_vfiprintf_r+0x13a>
 800d6cc:	9207      	str	r2, [sp, #28]
 800d6ce:	e014      	b.n	800d6fa <_vfiprintf_r+0x13a>
 800d6d0:	eba0 0308 	sub.w	r3, r0, r8
 800d6d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	9304      	str	r3, [sp, #16]
 800d6dc:	46a2      	mov	sl, r4
 800d6de:	e7d2      	b.n	800d686 <_vfiprintf_r+0xc6>
 800d6e0:	9b03      	ldr	r3, [sp, #12]
 800d6e2:	1d19      	adds	r1, r3, #4
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	9103      	str	r1, [sp, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	bfbb      	ittet	lt
 800d6ec:	425b      	neglt	r3, r3
 800d6ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d6f2:	9307      	strge	r3, [sp, #28]
 800d6f4:	9307      	strlt	r3, [sp, #28]
 800d6f6:	bfb8      	it	lt
 800d6f8:	9204      	strlt	r2, [sp, #16]
 800d6fa:	7823      	ldrb	r3, [r4, #0]
 800d6fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d6fe:	d10c      	bne.n	800d71a <_vfiprintf_r+0x15a>
 800d700:	7863      	ldrb	r3, [r4, #1]
 800d702:	2b2a      	cmp	r3, #42	; 0x2a
 800d704:	d134      	bne.n	800d770 <_vfiprintf_r+0x1b0>
 800d706:	9b03      	ldr	r3, [sp, #12]
 800d708:	1d1a      	adds	r2, r3, #4
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	9203      	str	r2, [sp, #12]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	bfb8      	it	lt
 800d712:	f04f 33ff 	movlt.w	r3, #4294967295
 800d716:	3402      	adds	r4, #2
 800d718:	9305      	str	r3, [sp, #20]
 800d71a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d7f0 <_vfiprintf_r+0x230>
 800d71e:	7821      	ldrb	r1, [r4, #0]
 800d720:	2203      	movs	r2, #3
 800d722:	4650      	mov	r0, sl
 800d724:	f7f2 fd7c 	bl	8000220 <memchr>
 800d728:	b138      	cbz	r0, 800d73a <_vfiprintf_r+0x17a>
 800d72a:	9b04      	ldr	r3, [sp, #16]
 800d72c:	eba0 000a 	sub.w	r0, r0, sl
 800d730:	2240      	movs	r2, #64	; 0x40
 800d732:	4082      	lsls	r2, r0
 800d734:	4313      	orrs	r3, r2
 800d736:	3401      	adds	r4, #1
 800d738:	9304      	str	r3, [sp, #16]
 800d73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73e:	4829      	ldr	r0, [pc, #164]	; (800d7e4 <_vfiprintf_r+0x224>)
 800d740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d744:	2206      	movs	r2, #6
 800d746:	f7f2 fd6b 	bl	8000220 <memchr>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d03f      	beq.n	800d7ce <_vfiprintf_r+0x20e>
 800d74e:	4b26      	ldr	r3, [pc, #152]	; (800d7e8 <_vfiprintf_r+0x228>)
 800d750:	bb1b      	cbnz	r3, 800d79a <_vfiprintf_r+0x1da>
 800d752:	9b03      	ldr	r3, [sp, #12]
 800d754:	3307      	adds	r3, #7
 800d756:	f023 0307 	bic.w	r3, r3, #7
 800d75a:	3308      	adds	r3, #8
 800d75c:	9303      	str	r3, [sp, #12]
 800d75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d760:	443b      	add	r3, r7
 800d762:	9309      	str	r3, [sp, #36]	; 0x24
 800d764:	e768      	b.n	800d638 <_vfiprintf_r+0x78>
 800d766:	fb0c 3202 	mla	r2, ip, r2, r3
 800d76a:	460c      	mov	r4, r1
 800d76c:	2001      	movs	r0, #1
 800d76e:	e7a6      	b.n	800d6be <_vfiprintf_r+0xfe>
 800d770:	2300      	movs	r3, #0
 800d772:	3401      	adds	r4, #1
 800d774:	9305      	str	r3, [sp, #20]
 800d776:	4619      	mov	r1, r3
 800d778:	f04f 0c0a 	mov.w	ip, #10
 800d77c:	4620      	mov	r0, r4
 800d77e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d782:	3a30      	subs	r2, #48	; 0x30
 800d784:	2a09      	cmp	r2, #9
 800d786:	d903      	bls.n	800d790 <_vfiprintf_r+0x1d0>
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d0c6      	beq.n	800d71a <_vfiprintf_r+0x15a>
 800d78c:	9105      	str	r1, [sp, #20]
 800d78e:	e7c4      	b.n	800d71a <_vfiprintf_r+0x15a>
 800d790:	fb0c 2101 	mla	r1, ip, r1, r2
 800d794:	4604      	mov	r4, r0
 800d796:	2301      	movs	r3, #1
 800d798:	e7f0      	b.n	800d77c <_vfiprintf_r+0x1bc>
 800d79a:	ab03      	add	r3, sp, #12
 800d79c:	9300      	str	r3, [sp, #0]
 800d79e:	462a      	mov	r2, r5
 800d7a0:	4b12      	ldr	r3, [pc, #72]	; (800d7ec <_vfiprintf_r+0x22c>)
 800d7a2:	a904      	add	r1, sp, #16
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f3af 8000 	nop.w
 800d7aa:	4607      	mov	r7, r0
 800d7ac:	1c78      	adds	r0, r7, #1
 800d7ae:	d1d6      	bne.n	800d75e <_vfiprintf_r+0x19e>
 800d7b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7b2:	07d9      	lsls	r1, r3, #31
 800d7b4:	d405      	bmi.n	800d7c2 <_vfiprintf_r+0x202>
 800d7b6:	89ab      	ldrh	r3, [r5, #12]
 800d7b8:	059a      	lsls	r2, r3, #22
 800d7ba:	d402      	bmi.n	800d7c2 <_vfiprintf_r+0x202>
 800d7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7be:	f7fe fd49 	bl	800c254 <__retarget_lock_release_recursive>
 800d7c2:	89ab      	ldrh	r3, [r5, #12]
 800d7c4:	065b      	lsls	r3, r3, #25
 800d7c6:	f53f af1d 	bmi.w	800d604 <_vfiprintf_r+0x44>
 800d7ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7cc:	e71c      	b.n	800d608 <_vfiprintf_r+0x48>
 800d7ce:	ab03      	add	r3, sp, #12
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <_vfiprintf_r+0x22c>)
 800d7d6:	a904      	add	r1, sp, #16
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f000 f879 	bl	800d8d0 <_printf_i>
 800d7de:	e7e4      	b.n	800d7aa <_vfiprintf_r+0x1ea>
 800d7e0:	0800e2a5 	.word	0x0800e2a5
 800d7e4:	0800e2af 	.word	0x0800e2af
 800d7e8:	00000000 	.word	0x00000000
 800d7ec:	0800d59d 	.word	0x0800d59d
 800d7f0:	0800e2ab 	.word	0x0800e2ab

0800d7f4 <_printf_common>:
 800d7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f8:	4616      	mov	r6, r2
 800d7fa:	4699      	mov	r9, r3
 800d7fc:	688a      	ldr	r2, [r1, #8]
 800d7fe:	690b      	ldr	r3, [r1, #16]
 800d800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d804:	4293      	cmp	r3, r2
 800d806:	bfb8      	it	lt
 800d808:	4613      	movlt	r3, r2
 800d80a:	6033      	str	r3, [r6, #0]
 800d80c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d810:	4607      	mov	r7, r0
 800d812:	460c      	mov	r4, r1
 800d814:	b10a      	cbz	r2, 800d81a <_printf_common+0x26>
 800d816:	3301      	adds	r3, #1
 800d818:	6033      	str	r3, [r6, #0]
 800d81a:	6823      	ldr	r3, [r4, #0]
 800d81c:	0699      	lsls	r1, r3, #26
 800d81e:	bf42      	ittt	mi
 800d820:	6833      	ldrmi	r3, [r6, #0]
 800d822:	3302      	addmi	r3, #2
 800d824:	6033      	strmi	r3, [r6, #0]
 800d826:	6825      	ldr	r5, [r4, #0]
 800d828:	f015 0506 	ands.w	r5, r5, #6
 800d82c:	d106      	bne.n	800d83c <_printf_common+0x48>
 800d82e:	f104 0a19 	add.w	sl, r4, #25
 800d832:	68e3      	ldr	r3, [r4, #12]
 800d834:	6832      	ldr	r2, [r6, #0]
 800d836:	1a9b      	subs	r3, r3, r2
 800d838:	42ab      	cmp	r3, r5
 800d83a:	dc26      	bgt.n	800d88a <_printf_common+0x96>
 800d83c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d840:	1e13      	subs	r3, r2, #0
 800d842:	6822      	ldr	r2, [r4, #0]
 800d844:	bf18      	it	ne
 800d846:	2301      	movne	r3, #1
 800d848:	0692      	lsls	r2, r2, #26
 800d84a:	d42b      	bmi.n	800d8a4 <_printf_common+0xb0>
 800d84c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d850:	4649      	mov	r1, r9
 800d852:	4638      	mov	r0, r7
 800d854:	47c0      	blx	r8
 800d856:	3001      	adds	r0, #1
 800d858:	d01e      	beq.n	800d898 <_printf_common+0xa4>
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	6922      	ldr	r2, [r4, #16]
 800d85e:	f003 0306 	and.w	r3, r3, #6
 800d862:	2b04      	cmp	r3, #4
 800d864:	bf02      	ittt	eq
 800d866:	68e5      	ldreq	r5, [r4, #12]
 800d868:	6833      	ldreq	r3, [r6, #0]
 800d86a:	1aed      	subeq	r5, r5, r3
 800d86c:	68a3      	ldr	r3, [r4, #8]
 800d86e:	bf0c      	ite	eq
 800d870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d874:	2500      	movne	r5, #0
 800d876:	4293      	cmp	r3, r2
 800d878:	bfc4      	itt	gt
 800d87a:	1a9b      	subgt	r3, r3, r2
 800d87c:	18ed      	addgt	r5, r5, r3
 800d87e:	2600      	movs	r6, #0
 800d880:	341a      	adds	r4, #26
 800d882:	42b5      	cmp	r5, r6
 800d884:	d11a      	bne.n	800d8bc <_printf_common+0xc8>
 800d886:	2000      	movs	r0, #0
 800d888:	e008      	b.n	800d89c <_printf_common+0xa8>
 800d88a:	2301      	movs	r3, #1
 800d88c:	4652      	mov	r2, sl
 800d88e:	4649      	mov	r1, r9
 800d890:	4638      	mov	r0, r7
 800d892:	47c0      	blx	r8
 800d894:	3001      	adds	r0, #1
 800d896:	d103      	bne.n	800d8a0 <_printf_common+0xac>
 800d898:	f04f 30ff 	mov.w	r0, #4294967295
 800d89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a0:	3501      	adds	r5, #1
 800d8a2:	e7c6      	b.n	800d832 <_printf_common+0x3e>
 800d8a4:	18e1      	adds	r1, r4, r3
 800d8a6:	1c5a      	adds	r2, r3, #1
 800d8a8:	2030      	movs	r0, #48	; 0x30
 800d8aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8ae:	4422      	add	r2, r4
 800d8b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8b8:	3302      	adds	r3, #2
 800d8ba:	e7c7      	b.n	800d84c <_printf_common+0x58>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	4622      	mov	r2, r4
 800d8c0:	4649      	mov	r1, r9
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	47c0      	blx	r8
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	d0e6      	beq.n	800d898 <_printf_common+0xa4>
 800d8ca:	3601      	adds	r6, #1
 800d8cc:	e7d9      	b.n	800d882 <_printf_common+0x8e>
	...

0800d8d0 <_printf_i>:
 800d8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d4:	7e0f      	ldrb	r7, [r1, #24]
 800d8d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8d8:	2f78      	cmp	r7, #120	; 0x78
 800d8da:	4691      	mov	r9, r2
 800d8dc:	4680      	mov	r8, r0
 800d8de:	460c      	mov	r4, r1
 800d8e0:	469a      	mov	sl, r3
 800d8e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8e6:	d807      	bhi.n	800d8f8 <_printf_i+0x28>
 800d8e8:	2f62      	cmp	r7, #98	; 0x62
 800d8ea:	d80a      	bhi.n	800d902 <_printf_i+0x32>
 800d8ec:	2f00      	cmp	r7, #0
 800d8ee:	f000 80d4 	beq.w	800da9a <_printf_i+0x1ca>
 800d8f2:	2f58      	cmp	r7, #88	; 0x58
 800d8f4:	f000 80c0 	beq.w	800da78 <_printf_i+0x1a8>
 800d8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d900:	e03a      	b.n	800d978 <_printf_i+0xa8>
 800d902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d906:	2b15      	cmp	r3, #21
 800d908:	d8f6      	bhi.n	800d8f8 <_printf_i+0x28>
 800d90a:	a101      	add	r1, pc, #4	; (adr r1, 800d910 <_printf_i+0x40>)
 800d90c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d910:	0800d969 	.word	0x0800d969
 800d914:	0800d97d 	.word	0x0800d97d
 800d918:	0800d8f9 	.word	0x0800d8f9
 800d91c:	0800d8f9 	.word	0x0800d8f9
 800d920:	0800d8f9 	.word	0x0800d8f9
 800d924:	0800d8f9 	.word	0x0800d8f9
 800d928:	0800d97d 	.word	0x0800d97d
 800d92c:	0800d8f9 	.word	0x0800d8f9
 800d930:	0800d8f9 	.word	0x0800d8f9
 800d934:	0800d8f9 	.word	0x0800d8f9
 800d938:	0800d8f9 	.word	0x0800d8f9
 800d93c:	0800da81 	.word	0x0800da81
 800d940:	0800d9a9 	.word	0x0800d9a9
 800d944:	0800da3b 	.word	0x0800da3b
 800d948:	0800d8f9 	.word	0x0800d8f9
 800d94c:	0800d8f9 	.word	0x0800d8f9
 800d950:	0800daa3 	.word	0x0800daa3
 800d954:	0800d8f9 	.word	0x0800d8f9
 800d958:	0800d9a9 	.word	0x0800d9a9
 800d95c:	0800d8f9 	.word	0x0800d8f9
 800d960:	0800d8f9 	.word	0x0800d8f9
 800d964:	0800da43 	.word	0x0800da43
 800d968:	682b      	ldr	r3, [r5, #0]
 800d96a:	1d1a      	adds	r2, r3, #4
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	602a      	str	r2, [r5, #0]
 800d970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d978:	2301      	movs	r3, #1
 800d97a:	e09f      	b.n	800dabc <_printf_i+0x1ec>
 800d97c:	6820      	ldr	r0, [r4, #0]
 800d97e:	682b      	ldr	r3, [r5, #0]
 800d980:	0607      	lsls	r7, r0, #24
 800d982:	f103 0104 	add.w	r1, r3, #4
 800d986:	6029      	str	r1, [r5, #0]
 800d988:	d501      	bpl.n	800d98e <_printf_i+0xbe>
 800d98a:	681e      	ldr	r6, [r3, #0]
 800d98c:	e003      	b.n	800d996 <_printf_i+0xc6>
 800d98e:	0646      	lsls	r6, r0, #25
 800d990:	d5fb      	bpl.n	800d98a <_printf_i+0xba>
 800d992:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d996:	2e00      	cmp	r6, #0
 800d998:	da03      	bge.n	800d9a2 <_printf_i+0xd2>
 800d99a:	232d      	movs	r3, #45	; 0x2d
 800d99c:	4276      	negs	r6, r6
 800d99e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9a2:	485a      	ldr	r0, [pc, #360]	; (800db0c <_printf_i+0x23c>)
 800d9a4:	230a      	movs	r3, #10
 800d9a6:	e012      	b.n	800d9ce <_printf_i+0xfe>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	6820      	ldr	r0, [r4, #0]
 800d9ac:	1d19      	adds	r1, r3, #4
 800d9ae:	6029      	str	r1, [r5, #0]
 800d9b0:	0605      	lsls	r5, r0, #24
 800d9b2:	d501      	bpl.n	800d9b8 <_printf_i+0xe8>
 800d9b4:	681e      	ldr	r6, [r3, #0]
 800d9b6:	e002      	b.n	800d9be <_printf_i+0xee>
 800d9b8:	0641      	lsls	r1, r0, #25
 800d9ba:	d5fb      	bpl.n	800d9b4 <_printf_i+0xe4>
 800d9bc:	881e      	ldrh	r6, [r3, #0]
 800d9be:	4853      	ldr	r0, [pc, #332]	; (800db0c <_printf_i+0x23c>)
 800d9c0:	2f6f      	cmp	r7, #111	; 0x6f
 800d9c2:	bf0c      	ite	eq
 800d9c4:	2308      	moveq	r3, #8
 800d9c6:	230a      	movne	r3, #10
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9ce:	6865      	ldr	r5, [r4, #4]
 800d9d0:	60a5      	str	r5, [r4, #8]
 800d9d2:	2d00      	cmp	r5, #0
 800d9d4:	bfa2      	ittt	ge
 800d9d6:	6821      	ldrge	r1, [r4, #0]
 800d9d8:	f021 0104 	bicge.w	r1, r1, #4
 800d9dc:	6021      	strge	r1, [r4, #0]
 800d9de:	b90e      	cbnz	r6, 800d9e4 <_printf_i+0x114>
 800d9e0:	2d00      	cmp	r5, #0
 800d9e2:	d04b      	beq.n	800da7c <_printf_i+0x1ac>
 800d9e4:	4615      	mov	r5, r2
 800d9e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9ea:	fb03 6711 	mls	r7, r3, r1, r6
 800d9ee:	5dc7      	ldrb	r7, [r0, r7]
 800d9f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9f4:	4637      	mov	r7, r6
 800d9f6:	42bb      	cmp	r3, r7
 800d9f8:	460e      	mov	r6, r1
 800d9fa:	d9f4      	bls.n	800d9e6 <_printf_i+0x116>
 800d9fc:	2b08      	cmp	r3, #8
 800d9fe:	d10b      	bne.n	800da18 <_printf_i+0x148>
 800da00:	6823      	ldr	r3, [r4, #0]
 800da02:	07de      	lsls	r6, r3, #31
 800da04:	d508      	bpl.n	800da18 <_printf_i+0x148>
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	6861      	ldr	r1, [r4, #4]
 800da0a:	4299      	cmp	r1, r3
 800da0c:	bfde      	ittt	le
 800da0e:	2330      	movle	r3, #48	; 0x30
 800da10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da14:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da18:	1b52      	subs	r2, r2, r5
 800da1a:	6122      	str	r2, [r4, #16]
 800da1c:	f8cd a000 	str.w	sl, [sp]
 800da20:	464b      	mov	r3, r9
 800da22:	aa03      	add	r2, sp, #12
 800da24:	4621      	mov	r1, r4
 800da26:	4640      	mov	r0, r8
 800da28:	f7ff fee4 	bl	800d7f4 <_printf_common>
 800da2c:	3001      	adds	r0, #1
 800da2e:	d14a      	bne.n	800dac6 <_printf_i+0x1f6>
 800da30:	f04f 30ff 	mov.w	r0, #4294967295
 800da34:	b004      	add	sp, #16
 800da36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	f043 0320 	orr.w	r3, r3, #32
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	4833      	ldr	r0, [pc, #204]	; (800db10 <_printf_i+0x240>)
 800da44:	2778      	movs	r7, #120	; 0x78
 800da46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	6829      	ldr	r1, [r5, #0]
 800da4e:	061f      	lsls	r7, r3, #24
 800da50:	f851 6b04 	ldr.w	r6, [r1], #4
 800da54:	d402      	bmi.n	800da5c <_printf_i+0x18c>
 800da56:	065f      	lsls	r7, r3, #25
 800da58:	bf48      	it	mi
 800da5a:	b2b6      	uxthmi	r6, r6
 800da5c:	07df      	lsls	r7, r3, #31
 800da5e:	bf48      	it	mi
 800da60:	f043 0320 	orrmi.w	r3, r3, #32
 800da64:	6029      	str	r1, [r5, #0]
 800da66:	bf48      	it	mi
 800da68:	6023      	strmi	r3, [r4, #0]
 800da6a:	b91e      	cbnz	r6, 800da74 <_printf_i+0x1a4>
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	f023 0320 	bic.w	r3, r3, #32
 800da72:	6023      	str	r3, [r4, #0]
 800da74:	2310      	movs	r3, #16
 800da76:	e7a7      	b.n	800d9c8 <_printf_i+0xf8>
 800da78:	4824      	ldr	r0, [pc, #144]	; (800db0c <_printf_i+0x23c>)
 800da7a:	e7e4      	b.n	800da46 <_printf_i+0x176>
 800da7c:	4615      	mov	r5, r2
 800da7e:	e7bd      	b.n	800d9fc <_printf_i+0x12c>
 800da80:	682b      	ldr	r3, [r5, #0]
 800da82:	6826      	ldr	r6, [r4, #0]
 800da84:	6961      	ldr	r1, [r4, #20]
 800da86:	1d18      	adds	r0, r3, #4
 800da88:	6028      	str	r0, [r5, #0]
 800da8a:	0635      	lsls	r5, r6, #24
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	d501      	bpl.n	800da94 <_printf_i+0x1c4>
 800da90:	6019      	str	r1, [r3, #0]
 800da92:	e002      	b.n	800da9a <_printf_i+0x1ca>
 800da94:	0670      	lsls	r0, r6, #25
 800da96:	d5fb      	bpl.n	800da90 <_printf_i+0x1c0>
 800da98:	8019      	strh	r1, [r3, #0]
 800da9a:	2300      	movs	r3, #0
 800da9c:	6123      	str	r3, [r4, #16]
 800da9e:	4615      	mov	r5, r2
 800daa0:	e7bc      	b.n	800da1c <_printf_i+0x14c>
 800daa2:	682b      	ldr	r3, [r5, #0]
 800daa4:	1d1a      	adds	r2, r3, #4
 800daa6:	602a      	str	r2, [r5, #0]
 800daa8:	681d      	ldr	r5, [r3, #0]
 800daaa:	6862      	ldr	r2, [r4, #4]
 800daac:	2100      	movs	r1, #0
 800daae:	4628      	mov	r0, r5
 800dab0:	f7f2 fbb6 	bl	8000220 <memchr>
 800dab4:	b108      	cbz	r0, 800daba <_printf_i+0x1ea>
 800dab6:	1b40      	subs	r0, r0, r5
 800dab8:	6060      	str	r0, [r4, #4]
 800daba:	6863      	ldr	r3, [r4, #4]
 800dabc:	6123      	str	r3, [r4, #16]
 800dabe:	2300      	movs	r3, #0
 800dac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dac4:	e7aa      	b.n	800da1c <_printf_i+0x14c>
 800dac6:	6923      	ldr	r3, [r4, #16]
 800dac8:	462a      	mov	r2, r5
 800daca:	4649      	mov	r1, r9
 800dacc:	4640      	mov	r0, r8
 800dace:	47d0      	blx	sl
 800dad0:	3001      	adds	r0, #1
 800dad2:	d0ad      	beq.n	800da30 <_printf_i+0x160>
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	079b      	lsls	r3, r3, #30
 800dad8:	d413      	bmi.n	800db02 <_printf_i+0x232>
 800dada:	68e0      	ldr	r0, [r4, #12]
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	4298      	cmp	r0, r3
 800dae0:	bfb8      	it	lt
 800dae2:	4618      	movlt	r0, r3
 800dae4:	e7a6      	b.n	800da34 <_printf_i+0x164>
 800dae6:	2301      	movs	r3, #1
 800dae8:	4632      	mov	r2, r6
 800daea:	4649      	mov	r1, r9
 800daec:	4640      	mov	r0, r8
 800daee:	47d0      	blx	sl
 800daf0:	3001      	adds	r0, #1
 800daf2:	d09d      	beq.n	800da30 <_printf_i+0x160>
 800daf4:	3501      	adds	r5, #1
 800daf6:	68e3      	ldr	r3, [r4, #12]
 800daf8:	9903      	ldr	r1, [sp, #12]
 800dafa:	1a5b      	subs	r3, r3, r1
 800dafc:	42ab      	cmp	r3, r5
 800dafe:	dcf2      	bgt.n	800dae6 <_printf_i+0x216>
 800db00:	e7eb      	b.n	800dada <_printf_i+0x20a>
 800db02:	2500      	movs	r5, #0
 800db04:	f104 0619 	add.w	r6, r4, #25
 800db08:	e7f5      	b.n	800daf6 <_printf_i+0x226>
 800db0a:	bf00      	nop
 800db0c:	0800e2b6 	.word	0x0800e2b6
 800db10:	0800e2c7 	.word	0x0800e2c7

0800db14 <__swbuf_r>:
 800db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db16:	460e      	mov	r6, r1
 800db18:	4614      	mov	r4, r2
 800db1a:	4605      	mov	r5, r0
 800db1c:	b118      	cbz	r0, 800db26 <__swbuf_r+0x12>
 800db1e:	6a03      	ldr	r3, [r0, #32]
 800db20:	b90b      	cbnz	r3, 800db26 <__swbuf_r+0x12>
 800db22:	f7fe fa25 	bl	800bf70 <__sinit>
 800db26:	69a3      	ldr	r3, [r4, #24]
 800db28:	60a3      	str	r3, [r4, #8]
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	071a      	lsls	r2, r3, #28
 800db2e:	d525      	bpl.n	800db7c <__swbuf_r+0x68>
 800db30:	6923      	ldr	r3, [r4, #16]
 800db32:	b31b      	cbz	r3, 800db7c <__swbuf_r+0x68>
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	6922      	ldr	r2, [r4, #16]
 800db38:	1a98      	subs	r0, r3, r2
 800db3a:	6963      	ldr	r3, [r4, #20]
 800db3c:	b2f6      	uxtb	r6, r6
 800db3e:	4283      	cmp	r3, r0
 800db40:	4637      	mov	r7, r6
 800db42:	dc04      	bgt.n	800db4e <__swbuf_r+0x3a>
 800db44:	4621      	mov	r1, r4
 800db46:	4628      	mov	r0, r5
 800db48:	f7ff fcba 	bl	800d4c0 <_fflush_r>
 800db4c:	b9e0      	cbnz	r0, 800db88 <__swbuf_r+0x74>
 800db4e:	68a3      	ldr	r3, [r4, #8]
 800db50:	3b01      	subs	r3, #1
 800db52:	60a3      	str	r3, [r4, #8]
 800db54:	6823      	ldr	r3, [r4, #0]
 800db56:	1c5a      	adds	r2, r3, #1
 800db58:	6022      	str	r2, [r4, #0]
 800db5a:	701e      	strb	r6, [r3, #0]
 800db5c:	6962      	ldr	r2, [r4, #20]
 800db5e:	1c43      	adds	r3, r0, #1
 800db60:	429a      	cmp	r2, r3
 800db62:	d004      	beq.n	800db6e <__swbuf_r+0x5a>
 800db64:	89a3      	ldrh	r3, [r4, #12]
 800db66:	07db      	lsls	r3, r3, #31
 800db68:	d506      	bpl.n	800db78 <__swbuf_r+0x64>
 800db6a:	2e0a      	cmp	r6, #10
 800db6c:	d104      	bne.n	800db78 <__swbuf_r+0x64>
 800db6e:	4621      	mov	r1, r4
 800db70:	4628      	mov	r0, r5
 800db72:	f7ff fca5 	bl	800d4c0 <_fflush_r>
 800db76:	b938      	cbnz	r0, 800db88 <__swbuf_r+0x74>
 800db78:	4638      	mov	r0, r7
 800db7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db7c:	4621      	mov	r1, r4
 800db7e:	4628      	mov	r0, r5
 800db80:	f000 f806 	bl	800db90 <__swsetup_r>
 800db84:	2800      	cmp	r0, #0
 800db86:	d0d5      	beq.n	800db34 <__swbuf_r+0x20>
 800db88:	f04f 37ff 	mov.w	r7, #4294967295
 800db8c:	e7f4      	b.n	800db78 <__swbuf_r+0x64>
	...

0800db90 <__swsetup_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4b2a      	ldr	r3, [pc, #168]	; (800dc3c <__swsetup_r+0xac>)
 800db94:	4605      	mov	r5, r0
 800db96:	6818      	ldr	r0, [r3, #0]
 800db98:	460c      	mov	r4, r1
 800db9a:	b118      	cbz	r0, 800dba4 <__swsetup_r+0x14>
 800db9c:	6a03      	ldr	r3, [r0, #32]
 800db9e:	b90b      	cbnz	r3, 800dba4 <__swsetup_r+0x14>
 800dba0:	f7fe f9e6 	bl	800bf70 <__sinit>
 800dba4:	89a3      	ldrh	r3, [r4, #12]
 800dba6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbaa:	0718      	lsls	r0, r3, #28
 800dbac:	d422      	bmi.n	800dbf4 <__swsetup_r+0x64>
 800dbae:	06d9      	lsls	r1, r3, #27
 800dbb0:	d407      	bmi.n	800dbc2 <__swsetup_r+0x32>
 800dbb2:	2309      	movs	r3, #9
 800dbb4:	602b      	str	r3, [r5, #0]
 800dbb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbba:	81a3      	strh	r3, [r4, #12]
 800dbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc0:	e034      	b.n	800dc2c <__swsetup_r+0x9c>
 800dbc2:	0758      	lsls	r0, r3, #29
 800dbc4:	d512      	bpl.n	800dbec <__swsetup_r+0x5c>
 800dbc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbc8:	b141      	cbz	r1, 800dbdc <__swsetup_r+0x4c>
 800dbca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbce:	4299      	cmp	r1, r3
 800dbd0:	d002      	beq.n	800dbd8 <__swsetup_r+0x48>
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	f7fe fb7e 	bl	800c2d4 <_free_r>
 800dbd8:	2300      	movs	r3, #0
 800dbda:	6363      	str	r3, [r4, #52]	; 0x34
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbe2:	81a3      	strh	r3, [r4, #12]
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	6063      	str	r3, [r4, #4]
 800dbe8:	6923      	ldr	r3, [r4, #16]
 800dbea:	6023      	str	r3, [r4, #0]
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	f043 0308 	orr.w	r3, r3, #8
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	6923      	ldr	r3, [r4, #16]
 800dbf6:	b94b      	cbnz	r3, 800dc0c <__swsetup_r+0x7c>
 800dbf8:	89a3      	ldrh	r3, [r4, #12]
 800dbfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc02:	d003      	beq.n	800dc0c <__swsetup_r+0x7c>
 800dc04:	4621      	mov	r1, r4
 800dc06:	4628      	mov	r0, r5
 800dc08:	f000 f884 	bl	800dd14 <__smakebuf_r>
 800dc0c:	89a0      	ldrh	r0, [r4, #12]
 800dc0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc12:	f010 0301 	ands.w	r3, r0, #1
 800dc16:	d00a      	beq.n	800dc2e <__swsetup_r+0x9e>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	60a3      	str	r3, [r4, #8]
 800dc1c:	6963      	ldr	r3, [r4, #20]
 800dc1e:	425b      	negs	r3, r3
 800dc20:	61a3      	str	r3, [r4, #24]
 800dc22:	6923      	ldr	r3, [r4, #16]
 800dc24:	b943      	cbnz	r3, 800dc38 <__swsetup_r+0xa8>
 800dc26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc2a:	d1c4      	bne.n	800dbb6 <__swsetup_r+0x26>
 800dc2c:	bd38      	pop	{r3, r4, r5, pc}
 800dc2e:	0781      	lsls	r1, r0, #30
 800dc30:	bf58      	it	pl
 800dc32:	6963      	ldrpl	r3, [r4, #20]
 800dc34:	60a3      	str	r3, [r4, #8]
 800dc36:	e7f4      	b.n	800dc22 <__swsetup_r+0x92>
 800dc38:	2000      	movs	r0, #0
 800dc3a:	e7f7      	b.n	800dc2c <__swsetup_r+0x9c>
 800dc3c:	200001ec 	.word	0x200001ec

0800dc40 <_raise_r>:
 800dc40:	291f      	cmp	r1, #31
 800dc42:	b538      	push	{r3, r4, r5, lr}
 800dc44:	4604      	mov	r4, r0
 800dc46:	460d      	mov	r5, r1
 800dc48:	d904      	bls.n	800dc54 <_raise_r+0x14>
 800dc4a:	2316      	movs	r3, #22
 800dc4c:	6003      	str	r3, [r0, #0]
 800dc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc56:	b112      	cbz	r2, 800dc5e <_raise_r+0x1e>
 800dc58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc5c:	b94b      	cbnz	r3, 800dc72 <_raise_r+0x32>
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f000 f830 	bl	800dcc4 <_getpid_r>
 800dc64:	462a      	mov	r2, r5
 800dc66:	4601      	mov	r1, r0
 800dc68:	4620      	mov	r0, r4
 800dc6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc6e:	f000 b817 	b.w	800dca0 <_kill_r>
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d00a      	beq.n	800dc8c <_raise_r+0x4c>
 800dc76:	1c59      	adds	r1, r3, #1
 800dc78:	d103      	bne.n	800dc82 <_raise_r+0x42>
 800dc7a:	2316      	movs	r3, #22
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	2001      	movs	r0, #1
 800dc80:	e7e7      	b.n	800dc52 <_raise_r+0x12>
 800dc82:	2400      	movs	r4, #0
 800dc84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc88:	4628      	mov	r0, r5
 800dc8a:	4798      	blx	r3
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	e7e0      	b.n	800dc52 <_raise_r+0x12>

0800dc90 <raise>:
 800dc90:	4b02      	ldr	r3, [pc, #8]	; (800dc9c <raise+0xc>)
 800dc92:	4601      	mov	r1, r0
 800dc94:	6818      	ldr	r0, [r3, #0]
 800dc96:	f7ff bfd3 	b.w	800dc40 <_raise_r>
 800dc9a:	bf00      	nop
 800dc9c:	200001ec 	.word	0x200001ec

0800dca0 <_kill_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4d07      	ldr	r5, [pc, #28]	; (800dcc0 <_kill_r+0x20>)
 800dca4:	2300      	movs	r3, #0
 800dca6:	4604      	mov	r4, r0
 800dca8:	4608      	mov	r0, r1
 800dcaa:	4611      	mov	r1, r2
 800dcac:	602b      	str	r3, [r5, #0]
 800dcae:	f7f5 f8fb 	bl	8002ea8 <_kill>
 800dcb2:	1c43      	adds	r3, r0, #1
 800dcb4:	d102      	bne.n	800dcbc <_kill_r+0x1c>
 800dcb6:	682b      	ldr	r3, [r5, #0]
 800dcb8:	b103      	cbz	r3, 800dcbc <_kill_r+0x1c>
 800dcba:	6023      	str	r3, [r4, #0]
 800dcbc:	bd38      	pop	{r3, r4, r5, pc}
 800dcbe:	bf00      	nop
 800dcc0:	20003694 	.word	0x20003694

0800dcc4 <_getpid_r>:
 800dcc4:	f7f5 b8e8 	b.w	8002e98 <_getpid>

0800dcc8 <__swhatbuf_r>:
 800dcc8:	b570      	push	{r4, r5, r6, lr}
 800dcca:	460c      	mov	r4, r1
 800dccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd0:	2900      	cmp	r1, #0
 800dcd2:	b096      	sub	sp, #88	; 0x58
 800dcd4:	4615      	mov	r5, r2
 800dcd6:	461e      	mov	r6, r3
 800dcd8:	da0d      	bge.n	800dcf6 <__swhatbuf_r+0x2e>
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dce0:	f04f 0100 	mov.w	r1, #0
 800dce4:	bf0c      	ite	eq
 800dce6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dcea:	2340      	movne	r3, #64	; 0x40
 800dcec:	2000      	movs	r0, #0
 800dcee:	6031      	str	r1, [r6, #0]
 800dcf0:	602b      	str	r3, [r5, #0]
 800dcf2:	b016      	add	sp, #88	; 0x58
 800dcf4:	bd70      	pop	{r4, r5, r6, pc}
 800dcf6:	466a      	mov	r2, sp
 800dcf8:	f000 f848 	bl	800dd8c <_fstat_r>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	dbec      	blt.n	800dcda <__swhatbuf_r+0x12>
 800dd00:	9901      	ldr	r1, [sp, #4]
 800dd02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd0a:	4259      	negs	r1, r3
 800dd0c:	4159      	adcs	r1, r3
 800dd0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd12:	e7eb      	b.n	800dcec <__swhatbuf_r+0x24>

0800dd14 <__smakebuf_r>:
 800dd14:	898b      	ldrh	r3, [r1, #12]
 800dd16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd18:	079d      	lsls	r5, r3, #30
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	d507      	bpl.n	800dd30 <__smakebuf_r+0x1c>
 800dd20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	6123      	str	r3, [r4, #16]
 800dd28:	2301      	movs	r3, #1
 800dd2a:	6163      	str	r3, [r4, #20]
 800dd2c:	b002      	add	sp, #8
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}
 800dd30:	ab01      	add	r3, sp, #4
 800dd32:	466a      	mov	r2, sp
 800dd34:	f7ff ffc8 	bl	800dcc8 <__swhatbuf_r>
 800dd38:	9900      	ldr	r1, [sp, #0]
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f7fd f9e7 	bl	800b110 <_malloc_r>
 800dd42:	b948      	cbnz	r0, 800dd58 <__smakebuf_r+0x44>
 800dd44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd48:	059a      	lsls	r2, r3, #22
 800dd4a:	d4ef      	bmi.n	800dd2c <__smakebuf_r+0x18>
 800dd4c:	f023 0303 	bic.w	r3, r3, #3
 800dd50:	f043 0302 	orr.w	r3, r3, #2
 800dd54:	81a3      	strh	r3, [r4, #12]
 800dd56:	e7e3      	b.n	800dd20 <__smakebuf_r+0xc>
 800dd58:	89a3      	ldrh	r3, [r4, #12]
 800dd5a:	6020      	str	r0, [r4, #0]
 800dd5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd60:	81a3      	strh	r3, [r4, #12]
 800dd62:	9b00      	ldr	r3, [sp, #0]
 800dd64:	6163      	str	r3, [r4, #20]
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	6120      	str	r0, [r4, #16]
 800dd6a:	b15b      	cbz	r3, 800dd84 <__smakebuf_r+0x70>
 800dd6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd70:	4630      	mov	r0, r6
 800dd72:	f000 f81d 	bl	800ddb0 <_isatty_r>
 800dd76:	b128      	cbz	r0, 800dd84 <__smakebuf_r+0x70>
 800dd78:	89a3      	ldrh	r3, [r4, #12]
 800dd7a:	f023 0303 	bic.w	r3, r3, #3
 800dd7e:	f043 0301 	orr.w	r3, r3, #1
 800dd82:	81a3      	strh	r3, [r4, #12]
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	431d      	orrs	r5, r3
 800dd88:	81a5      	strh	r5, [r4, #12]
 800dd8a:	e7cf      	b.n	800dd2c <__smakebuf_r+0x18>

0800dd8c <_fstat_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d07      	ldr	r5, [pc, #28]	; (800ddac <_fstat_r+0x20>)
 800dd90:	2300      	movs	r3, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	4611      	mov	r1, r2
 800dd98:	602b      	str	r3, [r5, #0]
 800dd9a:	f7f5 f8e4 	bl	8002f66 <_fstat>
 800dd9e:	1c43      	adds	r3, r0, #1
 800dda0:	d102      	bne.n	800dda8 <_fstat_r+0x1c>
 800dda2:	682b      	ldr	r3, [r5, #0]
 800dda4:	b103      	cbz	r3, 800dda8 <_fstat_r+0x1c>
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	bf00      	nop
 800ddac:	20003694 	.word	0x20003694

0800ddb0 <_isatty_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d06      	ldr	r5, [pc, #24]	; (800ddcc <_isatty_r+0x1c>)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f7f5 f8e3 	bl	8002f86 <_isatty>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_isatty_r+0x1a>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_isatty_r+0x1a>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	20003694 	.word	0x20003694

0800ddd0 <_init>:
 800ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd2:	bf00      	nop
 800ddd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddd6:	bc08      	pop	{r3}
 800ddd8:	469e      	mov	lr, r3
 800ddda:	4770      	bx	lr

0800dddc <_fini>:
 800dddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddde:	bf00      	nop
 800dde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dde2:	bc08      	pop	{r3}
 800dde4:	469e      	mov	lr, r3
 800dde6:	4770      	bx	lr
